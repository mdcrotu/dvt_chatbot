[
  {
    "id": "5f2ff270-93e3-4d79-ab69-52135676fcf2",
    "title": "Table of Contents | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/index.html",
    "content": "Table of Contents | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Table of Contents Installation Checklist Install DVT Using a pre-packed Distribution Install DVT Using the Update Site Eclipse Version Java Version DVT Plug-in Set the License Predefined Projects Opening a Predefined Project Preferences Getting Started What is a Workspace What is a Project Create a New Project Import an Existing Project Automatic Create or Import Project Natures Workspace and Workbench Work Workspace Workbench Workspace Again Refresh Linked Resources Backup and Local History Basic Tutorial Switch to the DVT Perspective Open a Project Configure the Build Build the Project Inspect the Compilation Errors See Comments in Tooltips Use Hyperlinks to Move Around in the Code Quickly Open a Type (Class, Module, Interface) Quickly Inspect the Class Hierarchy Quickly Open a File Quickly Move Inside the Editor Inspect the Class Hierarchy and Class Members Inspect the Design Hierarchy Inspect the Verification Hierarchy Browse Through All the Available Types (Classes, Modules, Interfaces) Look for the Implementation of an Extern Function or Task Search for Entities Use Content Assist (Autocomplete) Use Code Templates Use Module Auto Instance Expand Macros (Apply Preprocessing) Trace Macro Errors Track Tasks using TODO Markers Quickly See the Current Scope in the Status Bar Fold Code Regions in Order to Improve Readability Access the Context Sensitive Help Build Configurations Non-top files default.build Auto-config Simulator Log-config Emulating compiler invocations Multiple .build Files Compatibility Modes List of Compatibility Modes How to Specify the Compatibility Mode Paths Strings Comments Environment Variables Including Other Argument Files Build Persistence DB Access Considerations DVT Auto-Linked Run a Script Before Build All Build Directives e Language Test Files e Language SPECMAN_PATH Adding VIPs to $SPECMAN_PATH using sn_which.sh SystemVerilog OVM or UVM Library Compilation Xilinx Libraries Compilation Precompilation support for Xilinx Libraries Intel(Altera) Quartus Libraries Compilation Precompilation support for Intel(Altera) Quartus Libraries Questa Libraries Compilation Use of External Programs Compile Checks Compile Waivers Compile Waivers Examples Compile Waivers File Syntax (XML) Semantic Checks Synthesis Checks Performance Checks Dead Code Checks Non Standard Checks Content Assist (Autocomplete) Content assist for CamelCase and Underscore Code Templates Module Automatic Instantiation Override Functions Using Autocomplete Override Constraints Using Autocomplete Implement Extern Functions Using Autocomplete Use Assignment Pattern for Struct Type Variable Quick Fix Proposals Add Parameter to Module Add Port to Module Add Signal to Sensitivity List Add Virtual Qualifier to Interface Type Correct Spelling In Comments and Strings Create Class In New File Create File From Build Config Editor Create Included File Create Interface Class In New File Declare Extern Prototype Declare Method Declare Variable Did You Mean Explicitly Declare Fully Qualify Type Implement Extern Constraint Implement Extern Method Implement Missing Pure Virtual Methods Import Type Remove \u00e2\u0080\u0098local\u00e2\u0080\u0099 or \u00e2\u0080\u0098protected\u00e2\u0080\u0099 Qualifier Remove Signal from Sensitivity List Remove Signal Never Used Update Extern Prototype/Implementation Update Module Instance Update Virtual Method Signature Waive Compilation Problems Quick Assist Proposals Bind Method Call Arguments by Name Bind Method Call Arguments by Position Connect Instance Ports by Name Connect Instance Ports by Position Collapse Macro Expand Macro Expand .* Port Connections Extract to Variable Extract to Method Extract to Module Move Selection to New File Join Extern and Implementation Split into Extern and Implementation Rename in File AI Assistant Overview Getting Started Key Terms Sessions Blueprints Prompting Symbols Snippets Working in Chat List of Buttons, Shortcuts and Commands Working in Editor Code Completion Protecting Code Pattern Format Examples Reference List of Commands Predefined Blueprints Custom Blueprints Predefined Snippets Custom Snippets Advanced LLM Configuration Environment variables-based configuration File-based configuration How to Set-up Local LLMs Using Ollama Add Comments to Selected Element Troubleshooting Why do I get unexpected replies? Why do I get different replies for the same request? What to do if I get errors or find a bug? Content Filters Content Filters XML syntax Filtering by Element Type Content Filters Examples Predefined Content Filters Code Templates Code Templates in Autocomplete Constraint Code Templates Method Code Templates Global Code Templates Project Level Code Templates Code Templates View File Templates Project Templates What is a project template? How to generate code from a project template Step 1. Specify Directories Step 2. Specify Parameters Template Configuration template-config.xml template.config Add from Template Code Formatting Whitespace Indentation Vertical Alignment Vertical Align Patterns (ro.amiq.vlogdt/format.vertical_align.vregex) Line Wrapping Disable Format for Code Sections Format Multiple Files External Preferences Keys Automatic Indentation As You Type Override Functions Override Annotation Inspect Overrides in the Quick Type Hierarchy View Inspect Overrides in the Layers View Override Using the Dialog Override Using Autocomplete Override Using the Type Hierarchy View Override Constraints Override Annotation Inspect Overrides in the Quick Type Hierarchy View Inspect Overrides in the Layers View Override Using the Dialog Override Using Autocomplete Proposals Generate Getters and Setters Module Automatic Instantiation Autoinstance Using Autocomplete Autoinstance Using Drag and Drop Semantic Search Show Usages, Readers or Writers Favorite Searches Show Constraints Show Instances Show Instances in the Search View Show Instances in the Design Hierarchy View Quick Search in Views CamelCase Simple Regex Hierarchical Search Search for Members Search Port in Design Hierarchy Search Port in Verification Hierarchy Search all UVM Phase Overrides Search Global API Trace Connections Trace Connections from Design Hierarchy Trace Connections from Editor Trace Connections View Trace Path Breadcrumb Navigation Bar Design Breadcrumb Verification Breadcrumb Scope Breadcrumb Filesystem Breadcrumb Code Factory Factory Input Creating code Create from Template Design API Port API Port Data API Parameter API Example Refactoring Rename Refactoring Rename Port Across the Design Hierarchy Rename File Bind Method Call Arguments by Name Bind Method Call Arguments by Position Connect Instance Ports by Name Connect Instance Ports by Position Expand .* Port Connections Extract to Variable Extract to Method Extract to Module Move Selection to New File Join Extern and Implementation Split into Extern and Implementation Change Method Signature Connect Instances Across the Design Hierarchy Connect Instances Using New Ports Connect Instances  Using Existing Ports Structural Changes Preview Diagram Refactoring Connect View Add Port to Module from Selected Field Add New Port to Module Add New Parameter to Module Refactoring Scripts Writing a Refactoring Script Applying a Refactoring Script Diagrams UML Diagrams UML Diagrams - Select Types UML Diagrams - Preferences UML Diagrams - Legend Architecture UML Diagrams Sequences UML Diagrams Design Diagrams Schematic Diagrams Flow Diagrams Block Diagrams Finite-State Machine Diagrams Diagram Filters Design Diagram Actions Breadcrumb Navigation Bar Low Power Format Support UVM Components Diagrams Component Diagrams from Verification Hierarchy Component Diagrams from Simulation Diagram Filters Diagram Actions Diagram Toolbar Diagram Magnifier WaveDrom Timing Diagrams Bit Field Diagrams Bit Field Diagrams for UVM registers Bit Field Diagrams for packed data types Low Power Format Support Supply Network Diagram Export HTML/PDF Documentation Preview HTML Documentation External Tools Integration Run Configurations Run Configuration Session Type Custom Shortcut and Button for a Run Configuration Using environment variables in DVT Generic Run Configurations Using an alias in a DVT Generic Run Configuration DVT Generic Run Configuration Variables Smart Log Smart Log - Filters Smart Log - Hyperlinks Smart Log - Styles External Builders How to define a new external builder How to invoke external builders External Builder Output Source Code Markers - errors warnings External Documentation Configure External Documentation Browse External Documentation Search External Documentation Debugger Integration Simulation Prerequisites Launch a Debug Simulation Connect to an Existing Simulation Breakpoints Threads, Call Stack, Stepping Variables Watch Expressions Debug Specific Configurations Custom Dialogs Quick Steps Customizing the Dialog Output SWT/XML Reference Layouts Widgets Custom Dialog Snapshots Custom Dialog Snapshots File Syntax (XML) Command Line Interface dvt_cli.sh Syntax Examples Makefile Example Commands Create a Project (Mixed-Language Capable) Create a Project From an Existing Template Import an Existing Project List Compiled Files Compare Files Launch a Run Configuration Open a File Close a File Open a Custom Dialog Open a Perspective Refresh a Project Rebuild a Project Rebuild All Projects Print Edited File Quit Query the running status Print version Run Performance Exploration Macros Support Inactive Code Highlight Overview Settings Macro Expansion Overview Triggering Tips IMPORTANT NOTE Macros and Quick Macros Views Reminders (TODO Markers) OVM Support OVM Compliance Review OVM Field Editor Triggering Interface Problems Tips OVM Smart Log Quick OVM Documentation Access OVM Templates UVM Support Runtime UVM Configuration Queries Static UVM Configuration Queries UVM Browser UVM Compliance Review UVM Content Filters UVM Field Editor Triggering Interface Problems Tips UVM Runtime Elaboration UVM Sequence Tree UVM Smart Log UVM Templates UVM Verification Hierarchy OVM to UVM Migration Triggering Preferences Review changes VMM Support VMM Smart Log Quick VMM Documentation Access VMM Templates Settings Management Managed Settings Unmanaged Settings User and Common Settings Location Use Cases Memory Allocation Thresholds Workspace Preferences Run Configurations Compile Waivers Content Filters External Builders Export HTML Documentation Custom Pragmas Examples Deprecated Settings Management (before DVT 3.5) Workspace Settings Project Settings Other Settings Importing Preferences From a Different Workspace Using Import/Export Wizard Using dvt.sh Script Manually Customizing Default Settings Using dvt.ini Show Changed Preferences Dialog Changing the Default dvt.ini Using a User Customized dvt.ini Reference Comments Formatting Markdown ( recommended ) Javadoc Natural Docs ( deprecated ) Common Shortcuts Custom Pragmas DVT Resource Monitor Editor Notification Editor Right Click Menu Folding Macros Source Code Factory Show References Trace Refactor Hyperlinks Hyperlinks in Comments Icons and Decorations Icons Decorations Changing Icon Colors Project Colors Inactive Generates Code Highlight Lazy Bring up Resources Memory Monitor Scripts dvt.sh dvt_cli.sh dvt_from_rawtokens.sh dvt_kit_installer.sh dvt_plugin_installer.sh dvt_build.sh Syntax Coloring Themes Toolbar Actions Tooltips Views Call Hierarchy View Checks View Code Templates View Compile Order view Config DB View Console View Coverage View Design Hierarchy View Factory Overrides View Inspect View Layers View Macros View Outline View Power Domain View Problems View Quick Query View Registers View Tasks View Trace Connections View Types View Type Hierarchy View UVM Browser View UVM Sequence Tree View Verification Hierarchy View Application Notes C/C++ support Design Elaboration Top candidates Parameter values Unelaborated Design Debugging Performance Compilation Speed-up How to exclusively compile the API? How to improve the elaboration time? Precompilation Support Auto precompiled databases Encrypted VIP Support FPGA Support Intel(Altera) Quartus Intel(Altera) Quartus Libraries Compilation Xilinx ISE/Vivado Xilinx Libraries Compilation Precompilation support for Intel(Altera) Quartus and Xilinx Libraries Generating External Tool Scripts from the DVT Build Configuration Incremental Compilation Preprocessed Files Support Navigation between (p) and (g) files Integration of the preprocessing tool Mapping preprocessing (p) to generated (g) files Scan locations for (p) files Output and logging Configuration Understanding DVT IDE memory usage UVM Library Compilation Troubleshooting Visual Artifacts Tips and Tricks Editing Code Navigation Searching Miscellaneous Q & A I am new to Eclipse, where should I start from? Where can I find DVT Help? How do I see and configure the key shortcuts? Are there any backup files in Eclipse? Workspace in use, cannot launch eclipse\u00e2\u0080\u00a6 Locking is not possible in the directory\u00e2\u0080\u00a6 How to start DVT Eclipse with a different eclipse.ini Save could not be completed IBM Clearcase Plugin Non existing package mti_fli How to use Working Sets for filtering Problems/Task/Search views? How to handle Simulator and Command Line Macros How do I Access Files Outside Project Dir - Working with Linked Resources Mapping Linux to Windows (/proj/ to Z:\\proj\\) Subversive vs Subclipse How do I associate a project with both DVT and CDT? Can I use vi/vim along with DVT? Can I perform dos2unix or unix2dos from DVT? How can I configure Eclipse to use a local CVS repository? I am using the Common Desktop Environment via Citrix and experiencing crashes. What can I do? How do I change the background color of the Editor? Some widget colors are not displayed properly. What can I do? How do I change the tooltip colors? How do I change Internet Proxy Settings? Eclipse does not start, there is no Workspace, metadata or log file created Workspace permissions How do I link mylyn with Bugzilla? How do I print source code? How do I disable Eclipse Software Sites? How do I revert to a previous version? What are the most common shortcuts in DVT? How does DVT integrate with emacs? How does DVT integrate with CVS? How to set an environment variable within a Run Configuration? How to run a remote Unix command from DVT Eclipse for Windows? Rebuild shortcut (Ctrl + Alt + R) does not work I want to use an alias in a DVT Generic Run Configuration, but it\u00e2\u0080\u0099s not recognized How to set multiple paths as sources of predefined projects ? Lines are suddenly changing indentation when I edit text or move the cursor through the editor. How to change the directory where the build log file is saved ? How to find the DVT logs on Linux/Unix ? How to create resource filters ? How to create custom shortcut and button for a Run Configuration? I know that file.foo is present in the project location, but I can\u00e2\u0080\u0099t see it in the Navigator View How to copy the full path to the file in the current editor? How to adjust the console logs filters matching parameters? When I switch to Block (Column) Selection mode the font changes In Block (Column) Selection mode I see strange editing artifacts How to modify the font size in the code editors? How to automatically checkout/lock files from the revision control system ? How can I see if a file is read-only? How can I open a file in DVT from the terminal? How can I open a file in DVT from Questa? How do I change the name of the xterm opened by a DVT Generic Run Configuration? I get errors while installing or updating a plugin from an update site What is New? 25.1.11 (18 June 2025) 25.1.10 (28 May 2025) 25.1.9 (13 May 2025) 25.1.8 (2 May 2025) 25.1.7 (9 April 2025) 25.1.6 (26 March 2025) 25.1.5 (12 March 2025) 25.1.4 (12 March 2025) 25.1.3 (26 February 2025) 25.1.2 (13 February 2025) 25.1.1 (21 January 2025) 24.2.28 (11 December 2024) 24.2.27 (26 November 2024) 24.2.26 (14 November 2024) 24.2.25 (31 October 2024) 24.2.24 (14 October 2024) 24.2.23 (11 October 2024) 24.1.22 (1 October 2024) 24.1.21 (18 September 2024) 24.1.20 (4 September 2024) 24.1.19 (22 August 2024) 24.1.18 (7 August 2024) 24.1.16 (25 July 2024) 24.1.14 (9 July 2024) 24.1.13 (26 June 2024) 24.1.12 (11 June 2024) 24.1.11 (29 May 2024) 24.1.10 (14 May 2024) 24.1.8 (24 April 2024) 24.1.7 (9 April 2024) 24.1.6 (27 March 2024) 24.1.5 (13 March 2024) 24.1.4 (28 February 2024) 24.1.3 (13 February 2024) 24.1.2 (1 February 2024) 24.1.1 (18 January 2024) 23.2.30 (21 December 2023) 23.2.29 (13 December 2023) 23.2.28 (28 November 2023) 23.2.27 (17 November 2023) 23.2.26 (14 November 2023) 23.2.25 (1 November 2023) 23.2.24 (17 October 2023) 23.2.23 (9 October 2023) 23.1.22 (22 September 2023) 23.1.20 (6 September 2023) 23.1.19 (25 August 2023) 23.1.18 (2 August 2023) 23.1.16 (18 July 2023) 23.1.15 (7 July 2023) 23.1.14 (22 June 2023) 23.1.13 (7 June 2023) 23.1.12 (23 May 2023) 23.1.11 (9 May 2023) 23.1.10 (25 April 2023) 23.1.9 (12 April 2023) 23.1.8 (29 March 2023) 23.1.7 (15 March 2023) 23.1.6 (1 March 2023) 23.1.5 (21 February 2023) 23.1.4 (8 February 2023) 23.1.3 (31 January 2023) 23.1.2 (25 January 2023) 23.1.1 (19 January 2023) 22.1.39 (20 December 2022) 22.1.38 (14 December 2022) 22.1.37 (6 December 2022) 22.1.36 (22 November 2022) 22.1.35 (17 November 2022) 22.1.34 (8 November 2022) 22.1.32 (1 November 2022) 22.1.31 (20 October 2022) 22.1.30 (11 October 2022) 22.1.29 (28 September 2022) 22.1.28 (28 September 2022) 22.1.27 (13 September 2022) 22.1.26 (7 September 2022) 22.1.25 (30 August 2022) 22.1.24 (22 August 2022) 22.1.23 (16 August 2022) 22.1.22 (2 August 2022) 22.1.21 (21 July 2022) 22.1.20 (11 July 2022) 22.1.19 (28 June 2022) 22.1.18 (15 June 2022) 22.1.17 (8 June 2022) 22.1.16 (31 May 2022) 22.1.14 (17 May 2022) 22.1.13 (9 May 2022) 22.1.12 (3 May 2022) 22.1.11 (18 April 2022) 22.1.10 (12 April 2022) 22.1.9 (30 March 2022) 22.1.8 (15 March 2022) 22.1.7 (2 March 2022) 22.1.6 (23 February 2022) 22.1.5 (16 February 2022) 22.1.4 (8 February 2022) 22.1.3 (31 January 2022) 22.1.2 (26 January 2022) 22.1.1 (18 January 2022) 21.1.53 (22 December 2021) 21.1.52 (14 December 2021) 21.1.51 (6 December 2021) 21.1.50 (23 November 2021) 21.1.49 (17 November 2021) 21.1.48 (16 November 2021) 21.1.47 (8 November 2021) 21.1.46 (2 November 2021) 21.1.45 (26 October 2021) 21.1.44 (19 October 2021) 21.1.43 (11 October 2021) 21.1.42 (4 October 2021) 21.1.41 (27 September 2021) 21.1.40 (21 September 2021) 21.1.39 (15 September 2021) 21.1.38 (8 September 2021) 21.1.36 (30 August 2021) 21.1.35 (23 August 2021) 21.1.34 (16 August 2021) 21.1.33 (9 August 2021) 21.1.32 (3 August 2021) 21.1.31 (27 July 2021) 21.1.30 (20 July 2021) 21.1.29 (12 July 2021) 21.1.28 (6 July 2021) 21.1.27 (28 June 2021) 21.1.26 (22 June 2021) 21.1.25 (16 June 2021) 21.1.24 (8 June 2021) 21.1.23 (3 June 2021) 21.1.22 (24 May 2021) 21.1.21 (18 May 2021) 21.1.20 (17 May 2021) 21.1.19 (10 May 2021) 21.1.18 (28 April 2021) 21.1.17 (26 April 2021) 21.1.16 (20 April 2021) 21.1.15 (19 April 2021) 21.1.14 (13 April 2021) 21.1.13 (5 April 2021) 21.1.12 (30 March 2021) 21.1.11 (22 March 2021) 21.1.10 (15 March 2021) 21.1.9 (8 March 2021) 21.1.8 (1 March 2021) 21.1.7 (22 February 2021) 21.1.6 (15 February 2021) 21.1.5 (5 February 2021) 21.1.4 (2 February 2021) 21.1.3 (25 January 2021) 21.1.2 (18 January 2021) 21.1.1 (11 January 2021) 20.1.44 (21 December 2020) 20.1.43 (8 December 2020) 20.1.42 (4 December 2020) 20.1.41 (20 November 2020) 20.1.40 (13 November 2020) 20.1.39 (9 November 2020) 20.1.38 (30 October 2020) 20.1.37 (23 October 2020) 20.1.36 (16 October 2020) 20.1.35 (8 October 2020) 20.1.34 (2 October 2020) 20.1.33 (28 September 2020) 20.1.32 (17 September 2020) 20.1.31 (11 September 2020) 20.1.30 (3 September 2020) 20.1.29 (28 August 2020) 20.1.28 (21 August 2020) 20.1.27 (14 August 2020) 20.1.26 (30 July 2020) 20.1.25 (24 July 2020) 20.1.24 (17 July 2020) 20.1.23 (9 July 2020) 20.1.22 (8 July 2020) 20.1.21 (2 July 2020) 20.1.20 (26 June 2020) 20.1.19 (18 June 2020) 20.1.17 (16 June 2020) 20.1.16 (12 June 2020) 20.1.15 (4 June 2020) 20.1.14 (28 May 2020) 20.1.13 (22 May 2020) 20.1.12 (21 May 2020) 20.1.11 (15 May 2020) 20.1.10 (11 May 2020) 20.1.9 (30 April 2020) 20.1.8 (16 April 2020) 20.1.7 (10 April 2020) 20.1.6 (2 April 2020) 20.1.5 (27 March 2020) 20.1.4 (20 March 2020) 20.1.3 (9 March 2020) 20.1.2 (28 February 2020) 20.1.1 (21 February 2020) 19.1.50 (7 February 2020) 19.1.49 (5 February 2020) 19.1.48 (29 January 2020) 19.1.47 (10 January 2020) 19.1.46 (6 January 2020) 19.1.45 (24 December 2019) 19.1.44 (20 December 2019) 19.1.43 (11 December 2019) 19.1.42 (6 December 2019) 19.1.41 (28 November 2019) 19.1.40 (12 November 2019) 19.1.39 (7 November 2019) 19.1.38 (31 October 2019) 19.1.37 (25 October 2019) 19.1.36 (21 October 2019) 19.1.35 (18 October 2019) 19.1.34 (11 October 2019) 19.1.33 (4 October 2019) 19.1.32 (20 September 2019) 19.1.31 (5 September 2019) 19.1.30 (29 August 2019) 19.1.29 (20 August 2019) 19.1.28 (14 August 2019) 19.1.27 (2 August 2019) 19.1.26 (26 July 2019) 19.1.25 (19 July 2019) 19.1.24 (11 July 2019) 19.1.23 (4 July 2019) 19.1.22 (1 July 2019) 19.1.21 (21 June 2019) 19.1.20 (7 June 2019) 19.1.19 (4 June 2019) 19.1.18 (31 May 2019) 19.1.17 (16 May 2019) 19.1.15 (9 May 2019) 19.1.14 (6 May 2019) 19.1.13 (25 April 2019) 19.1.12 (19 April 2019) 19.1.11 (16 April 2019) 19.1.10 (11 April 2019) 19.1.9 (5 April 2019) 19.1.8 (28 March 2019) 19.1.6 (22 March 2019) 19.1.5 (14 March 2019) 19.1.4 (8 March 2019) 19.1.3 (4 March 2019) 19.1.2 (28 February 2019) 19.1.1 (22 February 2019) 18.1.50 (27 February 2019) 18.1.49 (21 February 2019) 18.1.48 (18 February 2019) 18.1.47 (15 February 2019) 18.1.45 (13 February 2019) 18.1.44 (4 February 2019) 18.1.43 (1 February 2019) 18.1.42 (15 January 2019) 18.1.41 (13 December 2018) 18.1.40 (7 December 2018) 18.1.39 (29 November 2018) 18.1.38 (19 November 2018) 18.1.37 (15 November 2018) 18.1.36 (9 November 2018) 18.1.35 (2 November 2018) 18.1.34 (25 October 2018) 18.1.33 (18 October 2018) 18.1.32 (12 October 2018) 18.1.31 (2 October 2018) 18.1.30 (25  September 2018) 18.1.29 (13 September 2018) 18.1.28 (6 September 2018) 18.1.27 (30 August 2018) 18.1.26 (27 August 2018) 18.1.25 (9 August 2018) 18.1.24 (3 August 2018) 18.1.23 (26 July 2018) 18.1.22 (20 July 2018) 18.1.21 (6 July 2018) 18.1.20 (28 June 2018) 18.1.19 (21 June 2018) 18.1.18 (15 June 2018) 18.1.17 (14 June 2018) 18.1.16 (31 May 2018) 18.1.15 (17 May 2018) 18.1.14 (10 May 2018) 18.1.13 (7 May 2018) 18.1.12 (4 May 2018) 18.1.11 (27 April 2018) 18.1.10 (16 April 2018) 18.1.9 (12 April 2018) 18.1.8 (5 April 2018) 18.1.7 (2 April 2018) 18.1.6 (29 March 2018) 18.1.5 (22 March 2018) 18.1.4 (15 March 2018) 18.1.3 (8 March 2018) 18.1.2 (2 March 2018) 18.1.1 (22 February 2018) 17.1.45 (19 February 2018) 17.1.44 (8 February 2018) 17.1.43 (1 February 2018) 17.1.42 (25 January 2018) 17.1.41 (19 January 2018) 17.1.40 (11 January 2018) 17.1.39 (8 January 2018) 17.1.38 (18 December 2017) 17.1.37 (6 December 2017) 17.1.36 (24 November 2017) 17.1.35 (17 November 2017) 17.1.34 (10 November 2017) 17.1.33 (1 November 2017) 17.1.32 (25 October 2017) 17.1.31 (20 October 2017) 17.1.30 (13 October 2017) 17.1.29 (6 October 2017) 17.1.28 (28 September 2017) 17.1.27 (22 September 2017) 17.1.26 (14 September 2017) 17.1.25 (31 August 2017) 17.1.24 (24 August 2017) 17.1.23 (11 August 2017) 17.1.22 (10 August 2017) 17.1.21 (3 August 2017) 17.1.20 (28 July 2017) 17.1.19 (27 July 2017) 17.1.18 (21 July 2017) 17.1.17 (12 July 2017) 17.1.16 (30 June 2017) 17.1.15 (16 June 2017) 17.1.14 (12 June 2017) 17.1.13 (31 May 2017) 17.1.12 (26 May 2017) 17.1.11 (19 May 2017) 17.1.10 (15 May 2017) 17.1.9 (2 May 2017) 17.1.8 (18 April 2017) 17.1.7 (10 April 2017) 17.1.6 (31 March 2017) 17.1.5 (23 March 2017) 17.1.4 (20 March 2017) 17.1.3 (14 March 2017) 17.1.2 (3 March 2017) 17.1.1 (24 February 2017) 16.1.37 (24 February 2017) 16.1.36 (10 February 2017) 16.1.35 (1 February 2017) 16.1.34 (13 January 2017) 16.1.33 (3 January 2017) 16.1.32 (22 December 2016) 16.1.31 (9 December 2016) 16.1.30 (24 November 2016) 16.1.29 (14 November 2016) 16.1.28 (2 November 2016) 16.1.27 (28 October 2016) 16.1.26 (17 October 2016) 16.1.25 (9 October 2016) 16.1.24 (22 September 2016) 16.1.23 (14 September 2016) 16.1.22 (12 September 2016) 16.1.21 (26 August 2016) 16.1.20 (12 August 2016) 16.1.19 (5 August 2016) 16.1.18 (25 July 2016) 16.1.17 (15 July 2016) 16.1.16 (8 July 2016) 16.1.15 (30 June 2016) 16.1.14 (17 June 2016) 16.1.13 (10 June 2016) 16.1.12 (1 June 2016) 16.1.11 (23 May 2016) 16.1.10 (16 May 2016) 16.1.9 (9 May 2016) 16.1.8 (30 April 2016) 16.1.7 (25 April 2016) 16.1.6 (18 April 2016) 16.1.5 (8 April 2016) 16.1.4 (30 March 2016) 16.1.3 (10 March 2016) 16.1.2 (3 March 2016) 16.1.1 (24 February 2016) 15.1.41 (10 February 2016) 15.1.40 (26 January 2016) 15.1.39 (14 January 2016) 15.1.38 (7 January 2016) 15.1.37 (23 December 2015) 15.1.36 (11 December 2015) 15.1.35 (4 December 2015) 15.1.34 (28 November 2015) 15.1.32 (18 November 2015) 15.1.31 (16 November 2015) 15.1.30 (2 November 2015) 15.1.29 (30 October 2015) 15.1.28 (16 October 2015) 15.1.27 (8 October 2015) 15.1.26 (28 September 2015) 15.1.25 (22 September 2015) 15.1.24 (18 September 2015) 15.1.23 (9 September 2015) 15.1.22 (2 September 2015) 15.1.21 (25 August 2015) 15.1.20 (20 August 2015) 15.1.19 (18 August 2015) 15.1.18 (10 August 2015) 15.1.17 (3 August 2015) 15.1.16 (27 July 2015) 15.1.15 (10 July 2015) 15.1.14 (6 July 2015) 15.1.13 (19 June 2015) 15.1.12 (5 June 2015) 15.1.11 (20 May 2015) 15.1.10 (15 May 2015) 15.1.9 (8 May 2015) 15.1.8 (24 April 2015) 15.1.7 (21 April 2015) 15.1.6 (6 April 2015) 15.1.5 (30 March 2015) 15.1.4 (23 March 2015) 15.1.3 (16 March 2015) 15.1.2 (6 March 2015) 15.1.1 (27 February 2015) 3.5.39 (26 February 2015) 3.5.38 (23 February 2015) 3.5.37 (13 February 2015) 3.5.36 (9 February 2015) 3.5.35 (30 January 2015) 3.5.34 (16 January 2015) 3.5.33 (12 January 2015) 3.5.32 (18 December 2014) 3.5.31 (5 December 2014) 3.5.30 (28 November 2014) 3.5.29 (21 November 2014) 3.5.28 (16 November 2014) 3.5.27 (7 November 2014) 3.5.26 (31 October 2014) 3.5.25 (23 October 2014) 3.5.24 (10 October 2014) 3.5.23 (2 October 2014) 3.5.22 (9 September 2014) 3.5.21 (3 September 2014) 3.5.20 (28 August 2014) 3.5.19 (21 August 2014) 3.5.18 (1 August 2014) 3.5.17 (25 July 2014) 3.5.16 (8 July 2014) 3.5.15 (8 July 2014) 3.5.14 (24 June 2014) 3.5.13 (13 June 2014) 3.5.12 (10 June 2014) 3.5.11 (30 May 2014) 3.5.10 (22 May 2014) 3.5.9 (12 May 2014) 3.5.8 (30 April 2014) 3.5.7 (22 April 2014) 3.5.6 (15 April 2014) 3.5.5 (1 April 2014) 3.5.4 (21 March 2014) 3.5.3 (14 March 2014) 3.5.2 (11 March 2014) 3.5.1 (7 March 2014) 3.4.28 (24 February 2014) 3.4.27 (29 January 2014) 3.4.26 (8 January 2014) 3.4.25 (18 December 2013) 3.4.24 (2 December 2013) 3.4.23 (22 November 2013) 3.4.22 (15 November 2013) 3.4.21 (14 November 2013) 3.4.20 (8 November 2013) 3.4.19 (1 November 2013) 3.4.18 (30 October 2013) 3.4.17 (29 October 2013) 3.4.16 (11 October 2013) 3.4.15 (4 October 2013) 3.4.14 (25 September 2013) 3.4.13 (20 September 2013) 3.4.12 (11 September 2013) 3.4.11 (9 September 2013) 3.4.10 (26 August 2013) 3.4.9 (14 August 2013) 3.4.8 (12 August 2013) 3.4.7 (5 August 2013) 3.4.6 (26 July 2013) 3.4.5 (22 July 2013) 3.4.4 (9 July 2013) 3.4.3 (21 June 2013) 3.4.2 (14 June 2013) 3.4.1 (7 June 2013) 3.3.8 (24 May 2013) 3.3.7 (17 May 2013) 3.3.6 (27 April 2013) 3.3.5 (22 April 2013) 3.3.4 (15 April 2013) 3.3.3 (2 April 2013) 3.3.2 (22 March 2013) 3.3.1 (15 March 2013) 3.2.21 (8 March 2013) 3.2.20 (6 March 2013) 3.2.19 (5 March 2013) 3.2.18 (4 March 2013) 3.2.17 (20 February 2013) 3.2.16 (11 February 2013) 3.2.15 (28 January 2013) 3.2.14 (23 January 2013) 3.2.13 (23 January 2013) 3.2.12 (22 January 2013) 3.2.11 (11 January 2013) 3.2.10 (24 December 2012) 3.2.9 (11 December 2012) 3.2.8 (4 December 2012) 3.2.8 (4 December 2012) 3.2.7 (3 December 2012) 3.2.6 (19 November 2012) 3.2.5 (6 November 2012) 3.2.4 (26 October 2012) 3.2.3 (17 October 2012) 3.2.2 (12 October 2012) 3.2.1 (11 October 2012) 3.1.16 (5 October 2012) 3.1.15 (3 October 2012) 3.1.14 (27 September 2012) 3.1.13 (18 September 2012) 3.1.12 (13 September 2012) 3.1.11 (7 September 2012) 3.1.10 (1 September 2012) 3.1.9 (13 August 2012) 3.1.8 (7 August 2012) 3.1.7 (2 August 2012) 3.1.6 (24 July 2012) 3.1.5 (11 July 2012) 3.1.4 (10 July 2012) 3.1.3 (2 July 2012) 3.1.2 (15 June 2012) 3.1.1 (6 June 2012) 3.0.10 (23 May 2012) 3.0.9 (16 May 2012) 3.0.8 (9 May 2012) 3.0.7.9 (29 April 2012) 3.0.7.8 (24 April 2012) 3.0.7.7 (13 April 2012) 3.0.7.6 (30 March 2012) 3.0.7.5 (16 March 2012) 3.0.7.4 (8 March 2012) 3.0.7.3 (5 March 2012) 3.0.7.2 (1 March 2012) 3.0.7.1 (29 February 2012) 3.0.7 (13 February 2012) 3.0.6.6 (23 January 2012) 3.0.6.4 (10 January 2012) 3.0.6.3 (27 December 2011) 3.0.6.2 (19 December 2011) 3.0.6.1 (12 December 2011) 3.0.6 (1 December 2011) 3.0.5.5 (21 November 2011) 3.0.5.4 (8 November 2011) 3.0.5.3 (17 October 2011) 3.0.5.2 (23 September 2011) 3.0.5 (10 September 2011) 3.0.4.4 (9 September 2011) 3.0.4.3 (29 August 2011) 3.0.4.2 (4 August 2011) 3.0.4.1 (3 August 2011) 3.0.4 (30 July 2011) 3.0.3.3 (22 July 2011) 3.0.3.2 (14 July 2011) 3.0.3.1 (8 July 2011) 3.0.3 (1 July 2011) 3.0.2.1 (27 June 2011) 3.0.2 (17 June 2011) 3.0.1.1 (3 June 2011) 3.0.1 (27 May 2011) 3.0.0 (13 May 2011) 2.9.9.2 (6 May 2011) 2.9.9.1 (4 May 2011) 2.9.9 (30 April 2011) 2.9.8 (15 April 2011) 2.9.7.1 (1 April 2011) 2.9.7 (25 March 2011) 2.9.6.9 (1 March 2011) 2.9.6.8 (26 February 2011) 2.9.6.7 (31 January 2011) 2.9.6.6 (27 January 2011) 2.9.6.5 (7 January 2011) 2.9.6.4 (18 December 2010) 2.9.6.3 (28 November 2010) 2.9.6.2 (23 November 2010) 2.9.6.0 (17 November 2010) 2.9.5.9 (12 November 2010) 2.9.5.8 (5 November 2010) 2.9.5.7 (29 October 2010) 2.9.5.6 (26 October 2010) 2.9.5.5 (20 October 2010) 2.9.5.4 (11 October 2010) 2.9.5.3 (4 October 2010) 2.9.5.2 (1 October 2010) 2.9.5.1 (27 September 2010) 2.9.4 (14 September 2010) 2.9.3 (25 May 2010) 2.9.2 (7 May 2010) 2.8.9 (19 February 2010) 2.8.6 (22 December 2009) 2.8.5 (4 December 2009) 2.8.4 (3 December 2009) 2.8.3 (11 November 2009) 2.8.2 (10 November 2009) 2.8.0 (29 October 2009) 2.7.0 (23 September 2009) 2.6.0 (24 July 2009) 2.5.0 (16 May 2009) 2.4.0 (30 March 2009) 2.3.0 (27 January 2009) 2.0.0 (1 September 2008) 1.5.0 (18 May 2008) 1.4.0 (12 March 2008) How to Report an Issue? How to generate a thread dump from within DVT Eclipse? How to generate a thread dump from outside DVT Eclipse? How to generate a thread dump for Verissimo & Specador running in batch mode? Legal Notices Third Party Licenses Installation Checklist Back to top",
    "section_path": [],
    "tokens": 4756,
    "source": "scraped"
  },
  {
    "id": "b7adfdd2-d537-46cb-a90e-038c04b10d0e",
    "title": "Override Constraints Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-assist/override-constraints.html",
    "content": "Override Constraints Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Override Constraints Using Autocomplete Place your cursor inside a class and then press Ctrl + Space to trigger Content Assist . When doing so, the list of proposals includes constraints that are available to override. The adjacent Proposal Tooltip includes information about the action that will be performed. Upon choosing the constraint, a corresponding constraint stub will be generated at the cursor\u00e2\u0080\u0099s location. The constraints may be filtered by typing additional keywords such as static . Tip You can change the constraint signature by editing the Constraint Code Templates Override Functions Using Autocomplete Implement Extern Functions Using Autocomplete Back to top",
    "section_path": [],
    "tokens": 135,
    "source": "scraped"
  },
  {
    "id": "e04049a3-1184-4ed6-a3af-2e6ce3aede1c",
    "title": "OVM Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ovm-support/index.html",
    "content": "OVM Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide OVM Support OVM Compliance Review OVM Field Editor Triggering Interface Problems Tips OVM Smart Log Quick OVM Documentation Access OVM Templates Reminders (TODO Markers) OVM Compliance Review Back to top",
    "section_path": [],
    "tokens": 62,
    "source": "scraped"
  },
  {
    "id": "3f454601-d966-4c51-9e06-087f6b15f474",
    "title": "Reference | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/index.html",
    "content": "Reference | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Reference Comments Formatting Markdown ( recommended ) Javadoc Natural Docs ( deprecated ) Common Shortcuts Custom Pragmas DVT Resource Monitor Editor Notification Editor Right Click Menu Folding Macros Source Code Factory Show References Trace Refactor Hyperlinks Hyperlinks in Comments Icons and Decorations Icons Decorations Compiled Files Access Modifiers Errors and Warnings Trace Connections Changing Icon Colors Project Colors Inactive Generates Code Highlight Lazy Bring up Resources Memory Monitor Scripts dvt.sh dvt_cli.sh dvt_from_rawtokens.sh dvt_kit_installer.sh dvt_plugin_installer.sh dvt_build.sh Custom Report Custom Report Examples Syntax Coloring Themes Toolbar Actions Tooltips Views Call Hierarchy View Checks View Code Templates View Compile Order view Build Config Hierarchy Quick Compile Order View Config DB View Console View Coverage View Design Hierarchy View Factory Overrides View Inspect View WaveDrom Timing Diagrams Layers View Quick Layers View Macros View Quick Macros View Outline View Quick Outline View Outline View Preferences Power Domain View Problems View Quick Query View Registers View Tasks View Trace Connections View Types View Quick Types View Type Hierarchy View Quick Type Hierarchy View UVM Browser View UVM Sequence Tree View Verification Hierarchy View Deprecated Settings Management (before DVT 3.5) Comments Formatting Back to top",
    "section_path": [],
    "tokens": 220,
    "source": "scraped"
  },
  {
    "id": "a55f2655-1f2f-4b85-8c28-692946a5ef59",
    "title": "Custom Pragmas | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/custom-pragmas.html",
    "content": "Custom Pragmas | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Custom Pragmas You can enable the following features in the editor for regions of code enclosed in comment pragmas: code folding background color receive a read-only notification when editing within the region To define pragmas for a project, Right click on the project in the Project Explorer view and go to Properties \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Custom Pragmas . User defined custom pragmas are stored in the .dvt/custom_pragmas.xml file. custom_pragmas.xml file syntax <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <!DOCTYPE pragmas PUBLIC \"-//DVT//custom_pragmas\" \"custom_pragmas.dtd\"> <pragmas version=\"1\"> <pragma startPragma=\"custom pragma start\" endPragma=\"end custom pragma\" enabled=\"TRUE\" colorEnabled=\"TRUE\" color=\"255;0;0\" readOnly=\"TRUE\" description=\"...\"/> </pragmas> Custom pragmas can be shared using Settings Management . Custom pragmas defined through Settings Management are not editable and are marked with gray color in the project\u00e2\u0080\u0099s property page. For identical pragmas defined in multiple locations, the precedence is: pragmas defined in .dvt (the last defined pragma has the highest priority) pragmas coming from $DVT_USER_SETTINGS/custom_pragmas.xml pragmas coming from $DVT_COMMON_SETTINGS/custom_pragmas.xml Overridden pragmas are marked with a strike out line. Note Two pragmas are identical if they have the same start pragma or end pragma. Note A read-only notification does not prevent editing within the region. Note You can nest at most 3 custom pragmas. Note DVT flags the following incorrect pragma usages: CUSTOM_PRAGMA_NESTING_EXCEEDED : More than 3 nested custom pragmas found CUSTOM_PRAGMA_UNEXPECTED_END : No # start found CUSTOM_PRAGMA_MISMATCH : Expecting # found # CUSTOM_PRAGMA_NO_END : No matching # end pragma found Common Shortcuts DVT Resource Monitor Back to top",
    "section_path": [],
    "tokens": 275,
    "source": "scraped"
  },
  {
    "id": "7b3669c3-7b81-4c9f-80d6-e9a5b2badfad",
    "title": "Expand Macro | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/expand-macro.html",
    "content": "Expand Macro | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Expand Macro You can easily expand macro calls in the current file. Place the editor cursor on a macro call, press Ctrl + 1 , select Expand macro from the list of quick assist proposals and press Enter . The macro call is immediately expanded. Note By default, the expansion is done all levels inline. You can customize these settings by going to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Refactoring and selecting the desired level and place of expansion. Tip You can also click on the link in the proposal\u00e2\u0080\u0099s tooltip and go directly to the preference page for customizing the expansion parameters. Collapse Macro Expand .* Port Connections Back to top",
    "section_path": [],
    "tokens": 146,
    "source": "scraped"
  },
  {
    "id": "2d0065d9-fcc8-4550-867e-b0c4e869366f",
    "title": "Content Filters XML syntax | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-filters/content-filters-xml-syntax.html",
    "content": "Content Filters XML syntax | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Content Filters XML syntax The .dvt/content_filters.xml file contains filter definitions using the syntax documented below. When editing .dvt/content_filters.xml you can use Autocomplete by pressing Ctrl + Space . Any errors encountered while loading the .dvt/content_filters.xml are reported in the DVT Internal Build Console . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!-- XML file header; required. --> <!DOCTYPE content-filters PUBLIC \"-//DVT//content_filters_v2\" \"content_filters_v2.dtd\" > <!-- Root tag; required. Version attribute is required. The latest syntax version, illustrated by this example, is version 2. --> <content-filters version= \"2\" > <!-- The root tag must contain at least one filter. An element is filtered if it matches all the filters. The filter tag must specify the kind=\"HIDE\" attribute. The filter tag must specify a name attribute. --> <filter kind= \"HIDE\" name= \"Filter name\" > <!-- Each filter must specify at least one of the following tags: path-set, element-text-set or element-type-set --> <!-- Each filter may specify a view-set tag. If view-set is not specified, the filter applies to all views. The view-set tag must specify a match attribute. If match=\"TRUE\" the set comprises of the enumerated views (see below). If match=\"FALSE\" the set comprises all views except the enumerated ones (see below). --> <view-set match= \"TRUE\" > <!-- A view-set must contain at least one view tag. The view tag must specify the name attribute. Possible values for the name attribute are: CALL_HIERARCHY, CHECKS, COVERAGE, COMPILE_ORDER, DIAGRAM, FIELD_EDITOR, MACRO, OUTLINE, PROBLEMS, SEARCH, TASKS, TYPE_HIERARCHY_MEMBERS, TYPES, TYPES_MEMBERS, UVM_BROWSER_CLASSES, UVM_BROWSER_MEMBERS, UVM_SEQUENCE_TREE, VERIFICATION_HIERARCHY --> </view-set> <!-- The path-set tag must specify a match attribute. If match=\"TRUE\" the set comprises of the enumerated paths (see below). If match=\"FALSE\" the set comprises any path except the enumerated ones (see below). An element (problem, task, type, function, macro etc) matches the path-set if it is defined/introduced in a file within the path-set. The path-set tag may specify an apply-to-macro-call-stack attribute. By default apply-to-macro-call-stack=\"FALSE\". If apply-to-macro-call-stack=\"TRUE\" an element introduced by a macro call will match the path set if the macro matches the path-set. --> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"TRUE\" > <!-- A path-set must contain at least a path attribute. The path tag must specify a pattern attribute. The pattern may contain wildcards ? (any character) and * (any sequence of characters). The pattern may contain environment variables. You may not use variables defined in build configuration files using +dvt_env+ directive. The path tag may specify an include-children attribute. By default include-children=\"FALSE\". If include-children=\"TRUE\" any file `included (SystemVerilog) or imported (e Language) directly or indirectly by a file matching the pattern, is also part of the path-set. --> </path-set> <!-- The element-type-set tag must specify a match attribute. If match=\"TRUE\", an element matches if it matches any element-type tag. If match=\"FALSE\", an element matches if it does not match any element-type tag. --> <element-type-set match= \"TRUE\" > <!-- An element-type-set must contain at least one element-type tag. The element-type tag must specify the name attribute. Valid values for the element-type name are: ACTION, ACTIVITY, ALIAS, ARCHITECTURE, ASSERT, BLOCK, CHECK, CHECKER, CHECKER_INSTANCE, CLASS, CLOCKING_BLOCK, COMPONENT, CONFIGURATION, CONSTRAINT, COVER_CROSS, COVER_GROUP, COVER_POINT, COVER_TRANSITION, ENTITY, EVENT, EXEC_BLOCK, EXPECT, FIELD, FUNCTION, GENERATE_BLOCK, INSTANCE, INTERFACE, INTERFACE_INSTANCE, LIBRARY, LINKAGE, MACRO, METHOD, METHOD_TYPE, MODPORT, MODULE, MODULE_INSTANCE, NAMESPACE, ONEVENT, PACKAGE, PACKAGE_BODY, PACKAGE_INSTANCE, PARAMETER, PORT, PRIMITIVE, PROCESS, PROGRAM, PROGRAM_INSTANCE, PROPERTY_SEQUENCE, SIGNAL, STRUCT, SUBPROGRAM_INSTANCE, TASK, TOKEN, TYPE, TYPE_PARAMETER, TYPEDEF, UNION, VARIABLE, VUNIT --> <!-- The element-type tag may specify a language attribute which helps to fully identify an element which is valid in multiple languages (for example STRUCT is a valid element type both in SystemVerilog and e Language) The valid values for the language attribute are: CPP, E, PSS, SLN, SV and VHDL. --> <element-type name= \"STRUCT\" language= \"E\" /> </element-type-set> <!-- The element-text-set tag must specify a match attribute. If match=\"TRUE\", an element matches the set if it matches any element-text tag. If match=\"FALSE\", an element matches the set if it does not match any element-text tag. An element (problem, task, type, function, macro etc) matches the text-set if its displayed label matches the text-set. --> <element-text-set match= \"TRUE\" > <!-- An element-text-set must contain at least one element-text tag. The element-text tag must specify a pattern attribute. The pattern may contain wildcards ? (any character) and * (any sequence of characters). --> <element-text pattern= \"_internal_*\" /> </element-text-set> </filter> </content-filters> Note Backslashes \\ are always treated as path separators, regardless of the OS. Therefore, you cannot use \\? and \\* to escape wildcards. Content Filters Filtering by Element Type Back to top",
    "section_path": [],
    "tokens": 774,
    "source": "scraped"
  },
  {
    "id": "d5781110-e726-4d36-8ccb-d615c84a0d43",
    "title": "Working in Chat | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/working-in-chat.html",
    "content": "Working in Chat | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Working in Chat AI Assistant provides a dedicated chat view where you can exchange messages with the LLM on any topic. You can start a new chat session in several ways: Using Start a New Chat Session command. Using Start a New Session from Blueprint command, where you can select any built-in or custom blueprint that targets the chat. Using the built-in blueprint commands starting with DVT AI Blueprint and targeting the chat. Cloning an existing session from the chat view\u00e2\u0080\u0099s Sessions page. Using Run Last Session in Chat command. The chat view has two pages, one with the actual chat and another one with all the sessions: Sessions page allows you to switch between sessions and to manage previous sessions. Chat page allows you to exchange messages with the LLM. It\u00e2\u0080\u0099s divided in two sections, the messages area with pairs of user requests and LLM replies and the prompt area where you input your requests. The prompt area allows you to write your requests and has several features. Highlight: @snippets and #symbols are highlighted so you can easily identify them. Indicates that the actual request will have a different content after the prompt will be expanded. To preview the message before it\u00e2\u0080\u0099s being sent use the Preview Message before Sending button. Autocomplete: Speeds-up @snippet and #symbol insertion. Automatically appears when needed (e.g.\u00c2\u00a0after writing @ or #). Can be triggered using Ctrl + Space . List of Buttons, Shortcuts and Commands The view has a toolbar with the following buttons: Show All Sessions / Show Last Chat Session Go to the list of sessions and back. Start a New Chat Session Start an empty chat session. Save Chat Session as Blueprint Create a new blueprint with all the messages from this session. The prompt has the following buttons: Send (Ctrl + Enter or Shift + Enter) Send the request to LLM. Preview Message before Sending Open an editor with the exact request that will be sent to the LLM. @snippets and #symbols are expanded, warnings or errors might pop-up if expansion fails. The sent User requests have the following buttons: Save Message as Blueprint Create a new blueprint with this user message. Save Message as Snippet Create a new snippet with this user message. View Sent Message Open an editor with the exact request that was sent to the LLM (@snippets and #symbols expanded). Resend Message Resend the same request with the snippets expanded in the current context (e.g when @selected code is present, using resend after selecting a new code section will send a different request to the LLM). Branches the session into a new version from this message onward. Edit and Resend Message Edit and resend the message, snippets will be expanded in the current context (e.g when @selected code is present, using edit and resend after selecting a new code section will send a different request to the LLM). Branches the session into a new version from this message onward. Start a New Editor Session from Message Start a new editor session with this message as a request. Replaces the current editor selection with the reply. When there\u00e2\u0080\u0099s no selection the reply is inserted at cursor position. Force the insert mode using Ctrl + click . Previous / Next Requests Navigate through session versions branched from this request. The LLM replies have the following buttons: Regenerate Regenerate the reply with the same LLM. Branches the session into a new version from this message onward. Switch Language Model Regenerate the reply with a different LLM. Branches the session into a new version from this message onward. Previous / Next Reply Navigate through session versions branched from this reply. Insert at Cursor Insert the code block in the editor at cursor position. Open a compare editor to preview the changes using Ctrl + click . Button appears only on code blocks generated by LLM. Copy to Clipboard Copy the code block in the clipboard. Button appears only on code blocks generated by LLM. Key Terms Working in Editor On this page List of Buttons, Shortcuts and Commands Back to top",
    "section_path": [],
    "tokens": 715,
    "source": "scraped"
  },
  {
    "id": "d52c9980-5e30-4489-b97b-a9f47f52a65b",
    "title": "How do I change the background color of the Editor? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-do-i-change-the-background-color-of-the-editor.html",
    "content": "How do I change the background color of the Editor? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How do I change the background color of the Editor? Go to Window \u00e2\u0080\u00a3 Preferences , then navigate to General \u00e2\u0080\u00a3 Editors \u00e2\u0080\u00a3 Text Editors . In the panel on the right, from the Appearance color options list select Background color , then use the color picker to choose the desired color (the System default checkbox must be unchecked). I am using the Common Desktop Environment via Citrix and experiencing crashes. What can I do? Some widget colors are not displayed properly. What can I do? Back to top",
    "section_path": [],
    "tokens": 129,
    "source": "scraped"
  },
  {
    "id": "88d1080a-ca26-4e4d-88ab-02d61fa865b1",
    "title": "Extract to Method | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/extract-to-method.html",
    "content": "Extract to Method | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Extract to Method You can easily move a code fragment to a separate new method. This is called extract method refactoring. It helps keeping methods shorter and easier to understand. Select a block of actions and press Ctrl + 1 , select Extract to task or Extract to function from the list of quick assist proposals and press Enter . A new method is created containing the selected code fragment, and the selection is replaced with a method call. Note Any local variables declared prior to the code fragment you extracted become arguments of the newly created method. Each argument direction is computed accordingly: input for arguments that are only read output for arguments that are only written inout for arguments that are both read and written in the selected block of actions Note By default, if and loop conditions are evaluated to the logic data type, according to the IEEE 1800-2023 Standard for SystemVerilog. You can enforce the data type to bit by going to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Refactoring and enabling Enforce condition data type to bit . This preference applies only when you select the whole condition. Tip You may change the extracted method name in the edit box, right after the extract action is completed. Tip You can change the method signature by editing the Method Code Templates Tip You can also Right - Click in the editor and go to Refactor > Extract to Task or Extract to Function . Extract to Variable Extract to Module Back to top",
    "section_path": [],
    "tokens": 291,
    "source": "scraped"
  },
  {
    "id": "ab553146-98dc-4f00-a08d-46fa5718584f",
    "title": "Split into Extern and Implementation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/split-into-extern-and-implementation.html",
    "content": "Split into Extern and Implementation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Split into Extern and Implementation It is convenient to move method implementations outside the body of the class declaration. Similarly, this can also be done for constraints. Place the cursor on the method declaration and press Ctrl + 1 , select Split \u00e2\u0080\u00a6 into extern prototype and implementation from the list of quick assist proposals and press Enter . The declaration is replaced with the \u00e2\u0080\u0098extern\u00e2\u0080\u0099 method prototype, and the implementation is inserted after endclass . Tip You can change the method signature or constraint block by editing the Method Code Templates or Constraint Code Templates . Tip You can also Right - Click in the editor and go to Refactor > Split into extern and implementation . Join Extern and Implementation Rename in File Back to top",
    "section_path": [],
    "tokens": 163,
    "source": "scraped"
  },
  {
    "id": "f493480a-4fd1-40cf-a01f-c99cbc4a41a0",
    "title": "How to adjust the console logs filters matching parameters? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-to-adjust-the-console-logs-filters-matching-parameters.html",
    "content": "How to adjust the console logs filters matching parameters? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to adjust the console logs filters matching parameters? Go to Run \u00e2\u0080\u00a3 Run Configurations\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 select a run configuration \u00e2\u0080\u00a3 open Filters tab . Here you can adjust how many characters per line (between 1-999, default 256) and how many consecutive lines (between 1-99, default 8) can be matched by a filter. These limitations prevent inifinite recursive matching if a log message does not follow a standard pattern or it is too long. How to copy the full path to the file in the current editor? When I switch to Block (Column) Selection mode the font changes Back to top",
    "section_path": [],
    "tokens": 140,
    "source": "scraped"
  },
  {
    "id": "97cd4666-e789-49ad-8d39-74f859dd382b",
    "title": "Extract to Method | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/extract-to-method.html",
    "content": "Extract to Method | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Extract to Method You can easily move a code fragment to a separate new method. This is called extract method refactoring. It helps keeping methods shorter and easier to understand. Select a block of actions and press Ctrl + 1 , select Extract to task or Extract to function from the list of quick assist proposals and press Enter . A new method is created containing the selected code fragment, and the selection is replaced with a method call. Note Any local variables declared prior to the code fragment you extracted become arguments of the newly created method. Each argument direction is computed accordingly: input for arguments that are only read output for arguments that are only written inout for arguments that are both read and written in the selected block of actions Note By default, if and loop conditions are evaluated to the logic data type, according to the IEEE 1800-2023 Standard for SystemVerilog. You can enforce the data type to bit by going to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Refactoring and enabling Enforce condition data type to bit . This preference applies only when you select the whole condition. Tip You may change the extracted method name in the edit box, right after the extract action is completed. Tip You can change the method signature by editing the Method Code Templates Tip You can also Right - Click in the editor and go to Refactor > Extract to Task or Extract to Function . Extract to Variable Extract to Module Back to top",
    "section_path": [],
    "tokens": 291,
    "source": "scraped"
  },
  {
    "id": "6cf17a8e-ec59-4fa6-8bfc-62c5ea9ac4c6",
    "title": "WaveDrom Timing Diagrams | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/diagrams/wavedrom-diagrams.html",
    "content": "WaveDrom Timing Diagrams | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide WaveDrom Timing Diagrams WaveDrom is a tool that draws timing diagrams (waveforms) from a simple textual description written in JSON .\nDVT renders WaveDrom waveforms in the Inspect View .\nThe waveform diagram is updated on the fly (as you type). The waveform description can be: either embedded in comments, surrounded by @WAVEDROM_START\u00e2\u0080\u00a6@WAVEDROM_END pragmas or in files with *.json or *.json5 extensions When the waveform description is found in a file with a valid extension, the Inspect View will process it\u00e2\u0080\u0099s content and render the diagram when opened.\nThe waveform description file can also be embedded in comments using the @WAVEDROM_FILE pragma, followed by its location. The location of the file will be solved relatively to the project root. To save the diagram as an SVG file, right-click on it in the Inspect View. DVT offers the ability to view WaveDrom diagrams through tooltips, by hovering over any waveform written inside DVT editors. Tip The WaveDrom documentation is available here . Note To specify additional file extensions, use the +dvt_wavedrom_file_ext_add+<extension> build config directive.\nTo clear the extensions list use +dvt_wavedrom_file_ext_clear . Note To specify additional search file locations to use in junction with @WAVEDROM_FILE pragma, use the +dvt_wavedrom_files_location_add+<location> build config directive. To clear the extensions list use +dvt_wavedrom_files_location_clear . Note By default, only waveform descriptions of maximum 5000 characters are rendered.\nYou can change this threshold from menu Window > Preferences then DVT > Editors. Note DVT uses WaveDrom version 3.5.0. Diagram Magnifier Bit Field Diagrams Back to top",
    "section_path": [],
    "tokens": 282,
    "source": "scraped"
  },
  {
    "id": "3d5e16e2-f224-4ea7-9c31-01850b306742",
    "title": "Bind Method Call Arguments by Position | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/bind-method-call-arguments-by-position.html",
    "content": "Bind Method Call Arguments by Position | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Bind Method Call Arguments by Position You can easily convert the argument bindings of a method call from named to positional. Place the cursor on a method call and press Ctrl + 1 , select Bind method call arguments by position from the list of quick assist proposals and press Enter . The argument bindings of the method call are converted to positional. Tip You can also Right + Click in the editor and go to Refactor > Bind Method Call Arguments by Position . Bind Method Call Arguments by Name Connect Instance Ports by Name Back to top",
    "section_path": [],
    "tokens": 135,
    "source": "scraped"
  },
  {
    "id": "2d29a3c5-ce93-4852-a955-678315bcaa59",
    "title": "Rename in File | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/rename-in-file.html",
    "content": "Rename in File | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Rename in File You can easily rename a variable, signal, method, etc. within the current file. Place the editor cursor on its name, press Ctrl + 1 , select Rename \u00e2\u0080\u00a6 in file from the list of quick assist proposals and press Enter . Type in the new name and press Enter again when done. Tip This is a lightweight Rename Refactoring which you should use in contexts where the renamed element is local to the file: local parameters, method argument names, local variables, signals of a module, etc. Tip You can also Right - Click in the editor and go to Refactor > Rename in File . Split into Extern and Implementation AI Assistant Back to top",
    "section_path": [],
    "tokens": 151,
    "source": "scraped"
  },
  {
    "id": "4098d798-e722-4886-bd67-fce42dfb5dd0",
    "title": "Static UVM Configuration Queries | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/static-uvm-configuration-queries.html",
    "content": "Static UVM Configuration Queries | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Static UVM Configuration Queries Queries for config db setters , config db getters or factory overrides help quickly locate UVM related constructs that may influence the behavior of the testbench. You can run these queries from the UVM entry of the main menu. Results are available in the Search View. Tip Use the Quick Search to locate specific hits. Tip Navigate matches with Next/Prev buttons. The Queries are detailed in the table below: config db setters uvm_component.set_config_int() uvm_component.set_config_string() uvm_component.set_config_object() uvm_config_db.set() config db getters uvm_component.get_config_int() uvm_component.get_config_string() uvm_component.get_config_object() uvm_config_db.get() factory overrides uvm_component.set_type_override_by_type() uvm_component.set_inst_override_by_type() uvm_component.set_type_override() uvm_component.set_inst_override() uvm_factory.set_inst_override_by_type() uvm_factory.set_inst_override_by_name() uvm_factory.set_type_override_by_type() uvm_factory.set_type_override_by_name() uvm_component_registry.set_type_override() uvm_component_registry.set_inst_override() uvm_object_registry.set_type_override() uvm_object_registry.set_inst_override() Runtime UVM Configuration Queries UVM Browser Back to top",
    "section_path": [],
    "tokens": 144,
    "source": "scraped"
  },
  {
    "id": "37616dad-e3dc-40b3-b24a-8d5ca56d8a11",
    "title": "VMM Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/vmm-support/index.html",
    "content": "VMM Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide VMM Support VMM Smart Log Quick VMM Documentation Access VMM Templates OVM to UVM Migration VMM Smart Log Back to top",
    "section_path": [],
    "tokens": 53,
    "source": "scraped"
  },
  {
    "id": "4a10eb19-7007-4912-85b7-c98c1aedb8d3",
    "title": "IBM Clearcase Plugin | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/ibm-clearcase-plugin.html",
    "content": "IBM Clearcase Plugin | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide IBM Clearcase Plugin It is not recommended to add new elements as this might result in unexpected behavior (existing files can be lost/renamed, new files might be created). When working over a slow server connection, the Clearcase Plugin might report errors like: Exception in thread \u00e2\u0080\u009cClearCaseDialogProgressMechanism\u00e2\u0080\u009d org.eclipse.jface.util.Assert$AssertionFailedException: Assertion failed: An operation is already in progress. Save could not be completed Non existing package mti_fli Back to top",
    "section_path": [],
    "tokens": 100,
    "source": "scraped"
  },
  {
    "id": "35fdcf95-ccc0-442f-b172-7fa3872265a7",
    "title": "Including Other Argument Files | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/including-other-argument-files.html",
    "content": "Including Other Argument Files | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Including Other Argument Files You can include other argument files with -f , -F or -file : -f /path/to/argument/file.f The -f and -file directives are equivalent, except for the vcs compatibility mode. In the vcs compatibility mode Strings are handled differently when using -f or -file . The behavior of -F is not consistent across simulators, so DVT treats it according to the Compatibility Modes : dvt, vcs when analyzing the contents of the included argument file, all relative paths are resolved as relative to the parent directory of the argument file ; in other words, this is equivalent to changing the compilation root to be the parent directory of the argument file ius, questa relative paths are solved like in dvt and vcs modes, except: for -v , -y and +incdir directives, if solving relative paths to the argument file parent fails, they are solved relative to the compilation root for -f directives, relative paths are always solved as relative to the compilation root Environment Variables Build Persistence Back to top",
    "section_path": [],
    "tokens": 206,
    "source": "scraped"
  },
  {
    "id": "9438596a-9f1b-49e0-a095-6325a3a2924a",
    "title": "Set-up Local LLMs Using Ollama | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/how-to/set-up-local-llms-using-ollama.html",
    "content": "Set-up Local LLMs Using Ollama | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Set-up Local LLMs Using Ollama Ollama is a lightweight, extensible framework for running language models on the local machine. It provides a simple API and CLI for creating, running, and managing models, as well as a library of pre-built models that can be easily used in a variety of applications. To set-up Ollama on your local machine following these steps: Download and install Ollama from its official website . Start the Ollama server on localhost:11434 using: ollama serve Pull a model from Ollama library : ollama pull <model name> Now the local LLM is ready to be used by AI Assistant. If Ollama runs on the default host and port, no additional configuration is needed for the AI Assistant. All models pulled locally and served by Ollama will show up in the AI Assistant (e.g.\u00c2\u00a0default model selection list). Recommendations: Use models with at least 7B parameters, preferably more. Smaller models typically don\u00e2\u0080\u0099t produce useful results. Some models to start with: llama3.1:8b llama3.1:70b deepseek-coder-v2:16b codestral:22b Running LLMs locally is resource intensive, for example, Llama 3.1 model with 8B parameters requires 4.7G disk space to download and 8G RAM to run. The model speed (tokens/sec) depends on the processing power. A GPU will deliver the best results, running only on CPU will result in slow replies. Ollama supports GPU acceleration. You should refer to the documentation to find out if your GPU is supported. How to Add Comments to Selected Element Back to top",
    "section_path": [],
    "tokens": 278,
    "source": "scraped"
  },
  {
    "id": "dab76184-379c-40aa-8d23-0336fb414958",
    "title": "UVM Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/uvm-templates.html",
    "content": "UVM Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Templates DVT offers autocomplete templates for UVM components. Just type in the editor uvm then hit Ctrl + Space twice and a drop-down list will offer you the available templates. After you pick the desired template, you can fill in the template parameters (e.g. company prefix, component name etc.). UVM Smart Log UVM Verification Hierarchy Back to top",
    "section_path": [],
    "tokens": 91,
    "source": "scraped"
  },
  {
    "id": "10d41329-6ed1-4d5d-9865-865928ead0e8",
    "title": "Add New Parameter to Module | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/add-new-parameter-to-module.html",
    "content": "Add New Parameter to Module | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Add New Parameter to Module To add a new parameter to a module, place the editor cursor on the module name, Right + Click and select Refactor > Add parameter . In the Add parameter wizard you can tune the name, type, width and the value of the new parameter. Click Ok to perform the refactoring or Preview to see the changes that are about to be performed in the source code. Note An empty parameter override is added to all the instances of the selected module along with a FIXME comment which shows up in the Tasks View. See Track Tasks using TODO Markers . Tip In the Preview page you can select what changes should be performed. Add New Port to Module Refactoring Scripts Back to top",
    "section_path": [],
    "tokens": 164,
    "source": "scraped"
  },
  {
    "id": "ed26d2f6-1300-4ec2-87ce-0df8db9851cf",
    "title": "OVM Field Editor | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ovm-support/ovm-field-editor.html",
    "content": "OVM Field Editor | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide OVM Field Editor The OVM Field Editor enables you to inspect and edit OVM field registrations. It allows you to quickly add, remove and edit the registration macros and presents field statistics (total no. of fields, no. of registered fields, no. of warnings/errors). Triggering Triggering the OVM Field Editor for a certain class: place the cursor anywhere inside the class definition, right click and select Source > UVM Field Editor from the pop-up menu. If you place the cursor on a field, the OVM Field Editor will show up with the respective field selected. If there are no previously registered macros, the ovm_*_utils_begin and ovm_*_utils_end macros shall be determined based on the class found at the cursor position. For a class that inherits from ovm_sequence, a pop-up dialog will ask you to select the desired sequencer from the available ones. Interface On the left side of the Field Editor Dialog there is a list containing all the fields in the class. You can register/unregister the class by clicking on the checkbox in the Class group. When the class is registered you can register or unregister fields by checking the corresponding checkboxes. When selecting a field you can also find information about the macro used for registration in the OVM Registration Macro group. If it\u00e2\u0080\u0099s not the desired macro you can fix it using the Fix button. On the right side you can see the flag status of the registered fields. Its main features are highlighted and explained below: Summary information regarding registrations: no. of registered fields, total no. of fields in class, no. of errors, no. of warnings. Content Filters matched indication Class checkbox that allows you to toggle the registration state. Field type Field name Field icon. The field icons have the following meanings: Icon Meaning The class is not registered The class is registered The field is a virtual interface The field is instantiated and is a UVM Component The field is instantiated and is a UVM Object The field is a port The field is an array The field is not registered. The field is registered. The field is registered and affected by a warning. The field is registered and affected by an error. Field registration checkbox that allows you to toggle the registration state. Select/Deselect all buttons. Used to register/unregister all the fields in a class. Fix button. Used to fix a macro registration if the right one isn\u00e2\u0080\u0099t used The UVM Registration Macro that is currently used for the selected field. Message area: displays error/warning messages. Field operation checkbox. If checked, the flag will be added to the registration. Field operation controls: allow you to select / clear all of the checkboxes. Print radix radio button. If checked, the radix will be set in the registration. At most one radix can be specified. Tooltip: hover with the mouse pointer any field operation checkbox or print radix radio button to obtain information about the flag. Clear print radix: allows you to unset the print radix (set all radio buttons off). Problems OVM Field Editor reports the following problems: Message Severity This field is registered with <current_macro_name> instead of <macro_determined_by_dvt> Error Radix flag is specified more than once. Error The flags for the field registration are incorrectly specified. They should be OR-ed together using \u00ef\u00bf\u00bd (pipe character). Error DVT could not determine a registration macro for this field. ovm_field_object will be used. Warning Tips Shortcut You can quickly trigger by using Shift + Alt + G . Fixing problems To fix a problem, press the fix button if it\u00e2\u0080\u0099s a wrong registration macro or unregister and register the field. Note Registering and unregistering the field will reset the flags/registration macro. Multiple selection You can\u00e2\u0080\u0099t use multiple selection to perform registration/unregistration of more fields. Note If you want you can register/unregister all the fields using the Select/Deselect all buttons. OVM Compliance Review OVM Smart Log On this page Triggering Interface Problems Tips Back to top",
    "section_path": [],
    "tokens": 690,
    "source": "scraped"
  },
  {
    "id": "afe5b6e5-14d1-4572-8599-c5d3079e9867",
    "title": "Simple Regex | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/simple-regex.html",
    "content": "Simple Regex | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Simple Regex No filter. Regex Filter: rs* All elements that contain the text rs . Regex Filter: p?c All elements that contain the text p<any_character>c . Regex Filter: ^tc All elements that start with the text tc . Regex Filter: child$ All elements that end with the text child . CamelCase Hierarchical Search Back to top",
    "section_path": [],
    "tokens": 88,
    "source": "scraped"
  },
  {
    "id": "8c31e350-3462-45fc-98d3-bc01d7c4d2af",
    "title": "Run a Script Before Build | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/run-a-script-before-build.html",
    "content": "Run a Script Before Build | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Run a Script Before Build In order to run a script before the build see the Build tab from the DVT Generic run configuration. For more details see Run Configurations . DVT Auto-Linked All Build Directives Back to top",
    "section_path": [],
    "tokens": 74,
    "source": "scraped"
  },
  {
    "id": "ddfdf21c-b3cf-4162-8cd8-c9b4f45d1c33",
    "title": "Connect Instance Ports by Name | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/connect-instance-ports-by-name.html",
    "content": "Connect Instance Ports by Name | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Connect Instance Ports by Name You can easily convert the port connections of an instance from positional to named. Place the cursor on an instance and press Ctrl + 1 , select Connect instance ports by name from the list of quick assist proposals and press Enter . The instance ports are connected by name. Tip You can also Right - Click in the editor and go to Refactor > Connect Instance Ports by Name . Bind Method Call Arguments by Position Connect Instance Ports by Position Back to top",
    "section_path": [],
    "tokens": 125,
    "source": "scraped"
  },
  {
    "id": "b892b7b2-1cb2-4f02-98b9-eabf459a2695",
    "title": "What is a Workspace | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/getting-started/workspace/what-is-a-workspace.html",
    "content": "What is a Workspace | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide What is a Workspace When you start Eclipse you are asked to indicate a workspace directory. The workspace is a directory on the disk where the Eclipse platform and all the installed plug-ins store preferences, configurations and temporary information. Subsequent Eclipse invocations will use this storage to restore the previous state. As the name suggests, it is your \u00e2\u0080\u009cspace of work\u00e2\u0080\u009d. It defines your area of interest during an Eclipse session . In a workspace you define projects that reference your disk resources. You don\u00e2\u0080\u0099t have to move source files into the workspace. And projects don\u00e2\u0080\u0099t import or copy source files into the workspace. Instead projects point to any folder or files on your disk. Warning We don\u00e2\u0080\u0099t recommend keeping source code files in the workspace. Each time you start Eclipse you can create a new workspace directory or indicate an existing one. You can create many workspaces, each one dedicated to some activity . You may use one workspace for developing your current project and another for maintaining the previous one. If the two activities are unrelated, in doing so you minimize clutter and improve performance by using two workspaces. You can launch several Eclipse applications in parallel, but one workspace can be used only by one Eclipse instance that locks it : ./workspace-dir/ \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 .metadata/ \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 .lock \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 ... Warning If you try to use an workspace already in use by an existing Eclipse instance, you\u00e2\u0080\u0099ll be signaled \u00e2\u0080\u009cWorkspace in use or cannot be created, choose a different one\u00e2\u0080\u009d . You can switch at anytime to another workspace from menu File \u00e2\u0080\u00a3 Switch Workspace\u00e2\u0080\u00a6 , but launching different Eclipse for different workspaces is common practice. See also Workspace and Workbench Refresh Getting Started What is a Project Back to top",
    "section_path": [],
    "tokens": 327,
    "source": "scraped"
  },
  {
    "id": "02fa098e-8aa8-4df1-85e0-5125c980ef4d",
    "title": "Supply Network Diagram | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/low-power-format-support/supply-network-diagram.html",
    "content": "Supply Network Diagram | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Supply Network Diagram The Supply Network Diagram shows all the power domains and power switches, and how they are connected via supply nets and ports. To generate the Supply Network Diagram : Click the Generate Diagram toolbar button and choose Supply Network Diagram Right-click on the top instance of your design in the Design Hierarchy View and choose Show Supply Network Diagram Tip To visualize a power domain and all its connections, from the Schematic Diagrams , Flow Diagrams and Block Diagrams right click on an instance included in the extent of the power domain and choose Show in Supply Network Diagram . Tip To quickly jump from the Supply Network Diagram the control signal of a power switch, select the control port, right click and choose Go to Source . Note For readability, the path to control signals is shortened in the diagram labels. Select the control port to see its full path in the Inspect View. Low Power Format Support Export HTML/PDF Documentation Back to top",
    "section_path": [],
    "tokens": 201,
    "source": "scraped"
  },
  {
    "id": "c2c1dd96-272d-4502-9427-4184f203c231",
    "title": "Content Filters Examples | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-filters/content-filters-examples.html",
    "content": "Content Filters Examples | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Content Filters Examples Hide the Types, Tasks and Problems from a library <filter kind= \"HIDE\" name= \"Base classes\" > <description> Hide the Types, Tasks and Problems from /path/to/my_base_classes </description> <view-set match= \"TRUE\" > <view name= \"TYPES\" /> <view name= \"TASKS\" /> <view name= \"PROBLEMS\" /> </view-set> <path-set match= \"TRUE\" > <path pattern= \"/path/to/my_base_classes/*\" /> </path-set> </filter> Hide the Tasks and Problems from a library <filter kind= \"HIDE\" name= \"My library\" > <description> Hide the Tasks and Problems from files included by my_library_top.svh </description> <view-set match= \"TRUE\" > <view name= \"TASKS\" /> <view name= \"PROBLEMS\" /> </view-set> <path-set match= \"TRUE\" > <path include-children= \"TRUE\" pattern= \"*/my_library_top.svh\" /> </path-set> </filter> Hide from Outline View the functions and fields introduced by specific macros <filter kind= \"HIDE\" name= \"Noisy macros\" > <description> Hide from Outline View the functions and fields introduced by macros defined in files under $MY_MACROS_LIBRARY </description> <view-set match= \"TRUE\" > <view name= \"OUTLINE\" /> </view-set> <path-set apply-to-macro-call-stack= \"TRUE\" match= \"TRUE\" > <path pattern= \"$MY_MACROS_LIBRARY/*\" /> </path-set> <element-type-set match= \"TRUE\" > <element-type name= \"FUNCTION\" /> <element-type name= \"FIELD\" /> </element-type-set> </filter> See only tasks that contain REVIEW_FIRST from a library <filter kind= \"HIDE\" name= \"REVIEW_FIRST tasks\" > <description> Hide the tasks that don't contain REVIEW_FIRST from /path/to/my_in_progress_folder </description> <view-set match= \"TRUE\" > <view name= \"TASKS\" /> </view-set> <path-set match= \"TRUE\" > <path pattern= \"/path/to/my_in_progress_folder/*\" /> </path-set> <element-text-set match= \"FALSE\" > <element-text pattern= \"*REVIEW_FIRST*\" /> </element-text-set> </filter> See only macros and types from precompiled files <filter kind= \"HIDE\" name= \"Precompiled Databases\" > <description> Hide the types and macros from precompiled files </description> <view-set match= \"TRUE\" > <view name= \"TYPES\" /> <view name= \"MACRO\" /> </view-set> <path-set match= \"TRUE\" > <path pattern= \"*\" /> </path-set> <precompiled-element match= \"TRUE\" /> </filter> Filtering by Element Type Predefined Content Filters Back to top",
    "section_path": [],
    "tokens": 329,
    "source": "scraped"
  },
  {
    "id": "141c373c-cc55-4010-9294-263c5b2ca587",
    "title": "Strings | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/strings.html",
    "content": "Strings | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Strings You may use single quoted (\u00e2\u0080\u0099) or double quoted (\u00e2\u0080\u009d) strings to group a piece of text so that it will be considered a single directive argument. Example: + define + FOO = 'my macro' To use a quotation mark \u00e2\u0080\u009c in a string, you should escape it using backslash \\ like this: + define + MOO = \"Hello \\\" Moo \\\" \" You can also use \" as string delimiter, and any \u00e2\u0080\u009c inside the string defined like this are considered as part of the string, like this: + define + MOO = \\ \"Hello \" Moo \" \\\" Note When in vcs compatibility mode, the escaping only works in files included with -file (see Including Other Argument Files ). Paths Comments Back to top",
    "section_path": [],
    "tokens": 158,
    "source": "scraped"
  },
  {
    "id": "78bcbd0a-7cc8-48ba-ab83-5521f748c1da",
    "title": "Encrypted VIP Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/encrypted_vip.html",
    "content": "Encrypted VIP Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Encrypted VIP Support The DVT compiler safely skips encrypted regions of code. Ideally VIP source code should be compiled without errors by any third party tools.\nHowever, some VIPs may not be properly encrypted, and lead to false errors. Most of the time this happens due to: Asymmetric encryption - for example when endmodule or endif is inside the encrypted code while the corresponding module or ifdef is outside the encrypted region. In this situation DVT may signal errors for mismatched language tokens, for example \u00e2\u0080\u009cUnexpected token \u00e2\u0080\u0098endmodule\u00e2\u0080\u0099\u00e2\u0080\u009d. Furthermore some of the types may end up being compiled in the wrong scope altogether. Public encrypted API - for example when the definition of a macro, class, or function is encrypted while still being referenced outside the encrypted region. Note How come a simulator works fine in such cases? Because as simulator decrypts the code if you have the proper licenses. To restore full or partial functionality you can employ one or more of the following solutions: Kindly ask the VIP provider to fix the encryption issues . The SystemVerilog language provides dedicated constructs for this type of encapsulation, such as forward typedefs and extern methods placed in non-encrypted header files. Instruct DVT to automatically close scopes in encrypted files . The automatic closing of scopes will take place in all files that contain encrypted code and whose full path matches the provided pattern. + dvt_encrypted_code_auto_close +/ path / pattern /* + dvt_encrypted_code_auto_close + not +/ path / pattern / to / exclude /* Instruct DVT to automatically define non-existing API . These functions and fields that are accessed within the specified files will be automatically defined with the appropriate signature. The definition will be placed in the closest scope which is defined in a file containing encrypted code. + dvt_encrypted_code_auto_api +/ path / pattern /* + dvt_encrypted_code_auto_api + not +/ path / pattern / to / exclude /* Macros whose name matches the macro regular expression are automatically defined at project level. + dvt_encrypted_code_auto_macro + name_regex Note All +dvt_encrypted_code_auto inclusion directives are applied first, followed by the exclusion (_not) patterns. Any number of such directives can be specified. The directives are global. Particularly for Synopsys encrypted VIPs, instruct DVT to load a predefined set of macro definitions and waivers using the following directives: + dvt_auto_snps_vip_macros Generate and load in each invocation . dvt / auto_snps_vip_macros . svh file . It contains dummy definitions for macros which are commonly used but not defined or encrypted in Synopsis VIPs . + dvt_auto_snps_vip_waivers Generate and load . dvt / auto_snps_vip_waivers . xml file . It contains waivers for problems commonly encountered when working with encrypted Synopsis VIPs . As a last resort, you can manually fix the encryption The encrypted code can be fixed on a case by case basis, for example by adding the missing endmodule , endclass , `endif etc, declaring dummy prototypes of the missing API (classes, functions, fields and so on). To avoid changing the original files, you will have to substitute the original broken files with the fixed ones. Start by choosing a suitable directory to store the DVT substitute files. Often, they can be used across projects, so the directory should be outside of any DVT project directory in particular. You can define an environment variable to point to the chosen directory, like $DVT_FIXES. For every file that needs to be fixed do: Copy the file to $DVT_FIXES as is. Modify $DVT_FIXES/file with the necessary fixes. Tell DVT to use $DVT_FIXES/file as a substitute to file . This means adding to the default.build the following All Build Directives : +dvt_file_substitute+/path/to/file=$DVT_FIXES/file Having done the above, DVT will use the substitute files and offer valuable functionality, like hyperlinks, type hierarchy, references in the now correctly compiled code. Note The +dvt_file_substitute directive accepts only absolute paths as arguments. Environment variable can be used to define the absolute paths. Regular expressions are not supported. Precompilation Support FPGA Support Back to top",
    "section_path": [],
    "tokens": 693,
    "source": "scraped"
  },
  {
    "id": "c4ba2456-eca3-411b-8684-e3d6abdeaca7",
    "title": "Sequences UML Diagrams | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/diagrams/sequences-uml-diagrams.html",
    "content": "Sequences UML Diagrams | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Sequences UML Diagrams A Sequences UML Diagram presents the associations between all the entities that inherit from a commonly used set of base classes. Typically these are sequence or scenario data types. To create a Sequences UML Diagram use the New Diagram toolbar button and select Sequences UML Diagram from the menu. You can tune the default set of base classes and filters from menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Diagrams \u00e2\u0080\u00a3 UML Diagrams \u00e2\u0080\u00a3 Sequences . Architecture UML Diagrams Design Diagrams Back to top",
    "section_path": [],
    "tokens": 119,
    "source": "scraped"
  },
  {
    "id": "0fbea42e-a50c-40bf-b3dd-388614ed42e2",
    "title": "Mapping Linux to Windows (/proj/ to Z:\\proj\\) | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/mapping-linux-to-windows-proj-to-zproj.html",
    "content": "Mapping Linux to Windows (/proj/ to Z:\\proj\\) | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Mapping Linux to Windows (/proj/ to Z:\\proj\\) Linux directories can be mapped to Windows drives, allowing editing files from Windows. For example /home/dvt is mapped to Z:\\ .\nThis has an impact on paths configured for a DVT project.\nThe paths are set using Linux conventions, however Eclipse runs in Windows and the DVT builder needs to know about the mapping in order to compile the files. To specify the mapping, set the system variable %DVT_CROSSPLATFORM_MAP% before invoking Eclipse. You can add multiple mappings separated by \u00e2\u0080\u009c;\u00e2\u0080\u009d e.g.: / projects /= p : \\ ; / home / lars /= Z : \\ lars \\ Important Please do not put any mapping of type /=\\, we are handling this automatically. How do I Access Files Outside Project Dir - Working with Linked Resources Subversive vs Subclipse Back to top",
    "section_path": [],
    "tokens": 176,
    "source": "scraped"
  },
  {
    "id": "bc2b597b-799a-43e8-9255-1cc8ba6f7511",
    "title": "DVT Auto-Linked | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/dvt-auto-linked.html",
    "content": "DVT Auto-Linked | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide DVT Auto-Linked Some of the files that DVT compiles for a project may be located outside the project directory (see What is a Project ). In order to benefit from DVTs advanced functionalities on such files, they are automatically linked as if inside the project, under the <project_root>/DVT Auto-Linked virtual folder. A virtual folder is a logical container - it has no physical representation on the disk. For example, a file physically located in: /path/to/my/base/classes/file.ext will be Auto-Linked under the following virtual folder hierarchy: ./<project_root> \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 DVT Auto-Linked/ \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 path/ \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 to/ \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 my/ \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 base/ \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 classes/ \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 file.ext/ \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 ... You can create new files or open existing ones anywhere in the DVT Auto-Linked hierarchy. For creating new files, you can use the New File Wizard. The files thus created will have a representation on the disk. For opening existing files, you can right click on any folder in the DVT Auto-Linked hierarchy and select Open from the context menu. A File Chooser will appear that will help you find the file that you want. In the case of very deep hierarchies, you can define \u00e2\u0080\u009caliases\u00e2\u0080\u009d for paths using the +dvt_auto_link_root+<alias>=<root_path> directive. These aliases are called DVT Auto-Linked Roots. For example by adding this line in the project\u00e2\u0080\u0099s default.build: + dvt_auto_link_root + base_classes =/ path / to / my / base / classes / the following virtual folder hierarchy is created: ./<project_root> \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 DVT Auto-Linked/ \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 base_classes/ \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 file.ext/ \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 ... The specified <root_paths> and <aliases> must be unique, and therefore only the first occurrence is considered. Aliases may not be names of directories located directly under the filesystem root (like for example /etc or /bin ). Environment variables may be used when specifying root paths, for example: +dvt_auto_link_root+src=$HOME/a/b/c Note An environment variable may only be used at the beginning of a root path (that is, the following will not work: +dvt_auto_link_root+src=/path/$VAR/a/b/c ) Only environment variables inherited from the console where DVT was started may be used. Variables defined using +dvt_setenv+ are not allowed. The +dvt_auto_link_root+ directive may only be used in the first invocation More examples + dvt_auto_link_root + hdl =/ a / b / c All auto-linked files with a path that starts with /a/b/c will be presented in DVT Auto Linked/hdl + dvt_auto_link_root + hdl =/ a / b / c + dvt_auto_link_root + hdl / d / e / f The second directive will be ignored because the same \u00e2\u0080\u009chdl\u00e2\u0080\u009d alias was used. + dvt_auto_link_root + hdl =/ a / b / c + dvt_auto_link_root + src =/ a / b / c The second directive will be ignored because the same \u00e2\u0080\u009c/a/b/c\u00e2\u0080\u009d path was used. + dvt_auto_link_root + hdl =/ a / b + dvt_auto_link_root + src =/ a / b / c All files under /a/b/c will be presented under src and the rest from /a/b under hdl. Build Persistence Run a Script Before Build Back to top",
    "section_path": [],
    "tokens": 526,
    "source": "scraped"
  },
  {
    "id": "b5f6a1b0-4461-4f30-a49c-32912e2cb369",
    "title": "Connect to an Existing Simulation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/debugger-integration/connect-to-an-existing-simulation.html",
    "content": "Connect to an Existing Simulation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Connect to an Existing Simulation By host/port Parameters Assuming you know the connection parameters (host, port) you can directly connect to a simulation using a Debug DVT run configuration. Note DVT can also connect to a simulation running on a remote machine. By Sockets File Assuming you know the working directory of a simulation, you can create an empty DVT Generic run configuration (for example using a dummy echo for the launch command) and just specify the working directory. DVT will scan for a sockets file in the working directory and prompt you to connect to the running simulation. The dvt_debug Command creates the sockets file. Note For SystemVerilog / VHDL simulations, the socket and the sockets file are created automatically when the simulation starts, assuming you fulfilled the Simulation Prerequisites . The dvt_debug Command Assuming you fulfilled the Simulation Prerequisites , at the simulator prompt you can type dvt_debug . This will create a communication socket where DVT can connect to. The connection parameters (host, port) will be printed in the simulator console. This command allows you to connect to a simulation that was launched outside DVT, and later on you want to connect to it from DVT. The dvt_debug command also dumps a sockets file in the current directory. Launch a Debug Simulation Breakpoints Back to top",
    "section_path": [],
    "tokens": 254,
    "source": "scraped"
  },
  {
    "id": "c4ca1af8-4aaa-4005-9441-5a6b31acc03b",
    "title": "Diagram Toolbar | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/diagrams/diagram-toolbar.html",
    "content": "Diagram Toolbar | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Diagram Toolbar Select Types (select starting types for diagram) Select Instances (choose which design element instances are relevant) Filter (hide or highlight specific diagram elements using regex) Preferences (change diagram preferences) Save As (save diagram as image) Refresh Zoom In Zoom Out Fit Canvas Pin (pin diagram window) Inspect Panel (show or hide inspect panel) Transition Table (show or hide transition table) Diagram Actions Diagram Magnifier Back to top",
    "section_path": [],
    "tokens": 101,
    "source": "scraped"
  },
  {
    "id": "466d69f9-55bd-41dd-b706-5d016ce31ccd",
    "title": "Implement Extern Functions Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-assist/implement-extern-functions-using-autocomplete.html",
    "content": "Implement Extern Functions Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Implement Extern Functions Using Autocomplete Type the function or task keyword and then press Ctrl + Space to trigger Content Assist . When doing so, the list of proposals includes extern methods that are available to implement. The adjacent Proposal Tooltip includes information about the action that will be performed. Upon choosing the method, a corresponding method stub will be generated at the cursor\u00e2\u0080\u0099s location. The methods may be filtered by typing their return type . Override Constraints Using Autocomplete Use Assignment Pattern for Struct Type Variable Back to top",
    "section_path": [],
    "tokens": 125,
    "source": "scraped"
  },
  {
    "id": "d4301d1b-c84c-42aa-9a14-25aa3ec71229",
    "title": "Icons and Decorations | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/icons-and-decorations.html",
    "content": "Icons and Decorations | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Icons and Decorations Icons Regular Verilog/SystemVerilog File Linked Resource Verilog/SystemVerilog File   See Linked Resources . Out of Project Verilog/SystemVerilog File  The file is not inside a project directory, nor accessible as a linked resource. Functionality is limited on \u00e2\u0080\u009cgray\u00e2\u0080\u009d files. Library Package Program Typedef Class Interface Module Checker Primitive Generate Field Enumeration name Constructor Function Task Event Fork/join - Indicates a fork block. Process - Indicates a process in a fork block. Constraint Cover Group Input Port Output Port Bidirectional Port Interface Port ModPort Port passed multiple times when tracing a signal Wire Port connection Always Assign Module Instance Unknown Instance Interface Instance Object Instance - Relevant for XVM methodologies, indicates a \u00e2\u0080\u009ccreated\u00e2\u0080\u009d object. Component Instance - Relevant for XVM methodologies, indicates a \u00e2\u0080\u009ccreated\u00e2\u0080\u009d component. Test Class - Relevant for XVM methodologies, indicates a \u00e2\u0080\u009ctest\u00e2\u0080\u009d class. Sequence - Relevant for XVM methodologies, indicates a \u00e2\u0080\u009csequence\u00e2\u0080\u009d class. Sequence Item - Relevant for XVM methodologies, indicates a \u00e2\u0080\u009csequence item\u00e2\u0080\u009d class. Root Class - Relevant for XVM methodologies, indicates the \u00e2\u0080\u009croot\u00e2\u0080\u009d class. Preprocessing define Preprocessing undefine Preprocessing ifdef, ifndef Code Template For example in autocomplete proposals. Decorations Compiled Files To enable/disable go to Window > Preferences > General > Appearance > Label Decorations preference page and check/uncheck DVT Compiled File . Compiled File Skipped File See also: Build Configurations . Access Modifiers To enable/disable go to Window > Preferences > General > Appearance > Label Decorations preference page and check/uncheck Verilog Language Access Modifier . Local Protected Public Errors and Warnings To enable/disable go to Window > Preferences > General > Appearance > Label Decorations preference page and check/uncheck Verilog Language Problem . Error Warning Trace Connections Signal source Signal destination Signal source and destination Changing Icon Colors To change the color of the icons in DVT, navigate to Window > Preferences and open the DVT > Icons preference page. To change one or more icons select them in the tree and choose a filter from the drop-down list. Once you are comfortable with the colors you chose, click Ok and you will be prompted for a restart to apply the changes. There are six predefined color filters : Red, Yellow, Green, Cyan, Blue, Magenta. These filters change the predominant color of the selected icons into one of the six colors previously mentioned. You can also create your own filters, by clicking the Edit\u00e2\u0080\u00a6 button. You will be prompted with a dialog that allows you to Add , Remove , or Duplicate custom filters. To edit a filter, select it in left hand list, then modify the Hue , Saturation , or Brightness parameters in the right hand menu. These parameters will be applied only on the primary colors that are selected above. The Overlap parameter indicates the hue interval size that will be modified. For example, choosing to modify the red color with an Overlap of 180, will modify all the colors, since the hue interval is (-180, 180) degrees. An Overlap of 30 will only modify the colors in the (-30, 30) degrees hue interval around red. Project Colors When working on several files from multiple projects, it is hard to tell at a glance to which project each editor belongs. Sometimes you might even have multiple editors with the same title (for example when each project is a different revision of the same design) which is particularly confusing. Go to menu Window > Preferences then DVT and check Color editor icons per project and project labels . Now all editors belonging to the same project have icons of the same color. Furthermore, the project labels in the Project Explorer have the same color, serving as a quick color legend. Tip You can chose to color the project labels text or background in the Project Explorer Tip To change the default color of a project Right-click in the Project Explorer and go to Project > Change Color Note By default a project\u00e2\u0080\u0099s color is computed using a hash function on the project name. This way you will get the same color for a specific project name, even if you switch workspaces or computers for example. Note This feature only works with Eclipse 4.x. Hyperlinks Inactive Generates Code Highlight On this page Icons Decorations Compiled Files Access Modifiers Errors and Warnings Trace Connections Changing Icon Colors Project Colors Back to top",
    "section_path": [],
    "tokens": 752,
    "source": "scraped"
  },
  {
    "id": "2ace97ef-8f61-465a-a99a-834d3b158cd1",
    "title": "Filtering by Element Type | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-filters/filtering-by-element-type.html",
    "content": "Filtering by Element Type | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Filtering by Element Type The element-type tag allows you to identify elements introduced by a particular language construct, like functions, fields or structs.\nThe table below exemplifies what language constructs map to the available element types. Element Types SV VHDL E SLN PSS C/C++ ACTION action action_name { \u00e2\u0080\u00a6 }; action action_name { \u00e2\u0080\u00a6 } ACTIVITY activity { \u00e2\u0080\u00a6 } ALIAS alias alias_name is alias_type; ARCHITECTURE architecture architecture_name of entity_name is begin end architecture; ASSERT assert_name : assert property(\u00e2\u0080\u00a6); cover_name : cover property(\u00e2\u0080\u00a6); assume_name : assume property(\u00e2\u0080\u00a6); assert boolean != FALSE; assert boolean != FALSE; BLOCK initial begin \u00e2\u0080\u00a6 end blk_name : block \u00e2\u0080\u00a6 begin \u00e2\u0080\u00a6 end block; CHECK check check_name that \u00e2\u0080\u00a6; CHECKER checker checker_name(\u00e2\u0080\u00a6); endchecker CHECKER_INSTANCE checker_name checker_instance(\u00e2\u0080\u00a6); CLASS class class_name; endclass class class_name {}; CLOCKING_BLOCK clocking clocking_block_name @(\u00e2\u0080\u00a6); endclocking COMPONENT component \u00e2\u0080\u00a6 end component; component component_name { \u00e2\u0080\u00a6 }; component component_name { \u00e2\u0080\u00a6 }; CONFIGURATION config config_name; endconfig configuration config_name of entity_name is \u00e2\u0080\u00a6 end configuration; CONSTRAINT constraint constraint_name{ \u00e2\u0080\u00a6 } keep constraint_name is \u00e2\u0080\u00a6 ; keep constraint_name is \u00e2\u0080\u00a6 ; constraint constraint_name { \u00e2\u0080\u00a6 }; COVER_CROSS cross_name : cross item_name, \u00e2\u0080\u00a6 ; cross kind using \u00e2\u0080\u00a6 ; cross kind using \u00e2\u0080\u00a6 ; cross_name : cross item_name; COVER_GROUP covergroup covergroup_name; endgroup cover cover_name is { \u00e2\u0080\u00a6 }; cover cover_name is { \u00e2\u0080\u00a6 }; covergroup covergroup_name { \u00e2\u0080\u00a6 }; covergroup { \u00e2\u0080\u00a6 } instance_name; COVER_POINT coverpoint_name : coverpoint variable_name; item kind using \u00e2\u0080\u00a6 ; item kind using \u00e2\u0080\u00a6 ; coverpoint_name : coverpoint variable_name; COVER_TRANSITION transition transition_name using \u00e2\u0080\u00a6 ; transition transition_name using \u00e2\u0080\u00a6 ; ENTITY entity entity_name is end entity; EVENT event event_name; event event_name; event event_name; EXEC_BLOCK exec exec_kind_identifier { \u00e2\u0080\u00a6 } EXPECT expect_name: expect ( \u00e2\u0080\u00a6 ) else \u00e2\u0080\u00a6 ; expect expect_name is \u00e2\u0080\u00a6 expect expect_name is \u00e2\u0080\u00a6 FIELD field_type field_name; field_name : field_type; field_name : field_type; field_type field_name; FUNCTION function return_type function_name(\u00e2\u0080\u00a6); endfunction function function_name( \u00e2\u0080\u00a6 ) return return_type; function return_type function_name(\u00e2\u0080\u00a6); GENERATE_BLOCK generate \u00e2\u0080\u00a6 endgenerate genvar i; for ( \u00e2\u0080\u00a6 ) begin end label: for \u00e2\u0080\u00a6 in \u00e2\u0080\u00a6 to \u00e2\u0080\u00a6 generate end generate; INSTANCE modport_name instance_name( \u00e2\u0080\u00a6 ); user_defined_primitive instance_name( \u00e2\u0080\u00a6 ); logic_gate instance_name( \u00e2\u0080\u00a6 ); label_name : component_type PORT MAP ( \u00e2\u0080\u00a6 ); label_name : component_type GENERIC MAP ( \u00e2\u0080\u00a6 ); INTERFACE interface interface_name; endinterface INTERFACE_INSTANCE interface_name interface_instance(); LIBRARY +dvt_init -work lib_name +dvt_init -work lib_name LINKAGE C/C++ root from Types View MACRO `define macro_name macro_value define macro_name macro_value; define macro_name macro_value; METHOD method_name() is { \u00e2\u0080\u00a6 }; method_name() is { \u00e2\u0080\u00a6 }; METHOD_TYPE method_type method_type_name (); method_type method_type_name (); MODPORT modport modport_name(\u00e2\u0080\u00a6); MODULE module module_name(\u00e2\u0080\u00a6); endmodule MODULE_INSTANCE module_name mod_instance(\u00e2\u0080\u00a6); NAMESPACE using namespace namespace_name; ONEVENT on event_name { \u00e2\u0080\u00a6 } on event_name { \u00e2\u0080\u00a6 } PACKAGE package package_name; endpackage package package_name is end package; package package_name; package package_name; package package_name { \u00e2\u0080\u00a6 }; PACKAGE_BODY package body package_body_name is end package body; PACKAGE_INSTANCE package instance_name is new package_name; PARAMETER parameter parameter_name; PORT output port_name; input port_name; real port_name; port (\u00e2\u0080\u00a6); PRIMITIVE primitive primitive_name(\u00e2\u0080\u00a6); endprimitive PROCESS process (\u00e2\u0080\u00a6) is begin end process; PROGRAM program program_name (\u00e2\u0080\u00a6); endprogram PROGRAM_INSTANCE program_name instance_name(\u00e2\u0080\u00a6); PROPERTY_SEQUENCE property property_name; endproperty sequence sequence_name; endsequence property property_name is \u00e2\u0080\u00a6 ; sequence sequence_name is \u00e2\u0080\u00a6 ; SIGNAL signal signal_name : signal_type; STRUCT unit unit_name { \u00e2\u0080\u00a6 }; sequence sequence_name using \u00e2\u0080\u00a6 ; struct struct_name { \u00e2\u0080\u00a6 }; unit unit_name { \u00e2\u0080\u00a6 }; sequence sequence_name using \u00e2\u0080\u00a6 ; struct struct_name { \u00e2\u0080\u00a6 }; struct struct_name { \u00e2\u0080\u00a6 }; SUBPROGRAM_INSTANCE function instance_name is new function_name; procedure instance_name is new procedure_name; TASK task task_name(); endtask TOKEN token token_name { \u00e2\u0080\u00a6 }; TYPE typedef int unsigned uint; typedef struct { \u00e2\u0080\u00a6 } struct_name; typedef enum { \u00e2\u0080\u00a6 } enum_name; type type_name is (\u00e2\u0080\u00a6); type type_name : type; type type_name : type; enum enum_name { \u00e2\u0080\u00a6 }; typedef type typedef_name; TYPE_PARAMETER class class_name #(type type_name=bit); endclass TYPEDEF typedef type type_name; UNION union union_name {}; VARIABLE variable var_name: var_type; generic (var_name : var_type); VUNIT vunit vunit_name(entity_name(architecture_name)) { \u00e2\u0080\u00a6 } Content Filters XML syntax Content Filters Examples Back to top",
    "section_path": [],
    "tokens": 692,
    "source": "scraped"
  },
  {
    "id": "e1f398d7-49ec-4a7b-a414-2f97dda6883e",
    "title": "Add Comments to Selected Element | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/how-to/add-comments.html",
    "content": "Add Comments to Selected Element | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Add Comments to Selected Element The Add Comment to Selected Element predefined blueprint allows the insertion of LLM-generated, context-aware documentation into your code. To use this feature, place the cursor on a supported code element (e.g., module , interface , class , entity ), then either: Right-click and choose AI Assistant \u00e2\u0080\u00a3 Add Comment to Selected Element , or Use the command palette to run: DVT AI: Start Session from Blueprint \u00e2\u0080\u00a3 Add Comment to Selected Element The response is shown in a side-by-side compare editor, highlighting the generated content. Note The generated comments use the same markup language set for the editor tooltips (e.g., Markdown , Javadoc , Natural Docs ). Previewing the HTML Output You can preview the HTML version of your generated comments using Specador Live Preview . Customization Use the command DVT AI: Edit Predefined Blueprint to modify the blueprint. The blueprint sends a set of predefined comments as reference for the LLM using the @comments of element snippet. To modify the default snippet run the command DVT AI: Edit Predefined Snippet . This action will extract several files under the .dvt/ai/snippets/comment-examples directory. Each file corresponds to a specific element type and supported markup language (e.g., module_markdown.example ). You can directly modify the contents of these files with your own comments. Set-up Local LLMs Using Ollama Troubleshooting On this page Previewing the HTML Output Customization Back to top",
    "section_path": [],
    "tokens": 267,
    "source": "scraped"
  },
  {
    "id": "8e600462-a553-41a8-a7e2-a2f3f0df2a5e",
    "title": "How can I open a file in DVT from Questa? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-can-i-open-a-file-in-dvt-from-questa.html",
    "content": "How can I open a file in DVT from Questa? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How can I open a file in DVT from Questa? You can define the following procedure in a tcl script: set ::env(DVT_HOME) /dvt/installation/location set ::env(DVT_WORKSPACE_PATH) /dvt/workspace/location proc dvtEdit { filename {linenumber 1} } { set line $linenumber if { $line < 1 } { set line 1 } exec $::env(DVT_HOME)/bin/dvt_cli.sh openFile $filename -line $line & } To make the new procedure available in the Questa tcl command line, add the script path to the MODELSIM_TCL environment variable: MODELSIM_TCL=tcl_script_path.tcl:$MODELSIM_TCL To set DVT as the default editor for opening files in Questa, run the following tcl command: set PrefSource ( altEditor ) dvtEdit To revert the settings for the default editor, run the following tcl command: unset PrefSource ( altEditor ) dvtEdit How can I open a file in DVT from the terminal? How do I change the name of the xterm opened by a DVT Generic Run Configuration? Back to top",
    "section_path": [],
    "tokens": 190,
    "source": "scraped"
  },
  {
    "id": "2ba53af2-b04a-4d2f-9c7e-52f0f3443d71",
    "title": "How to set multiple paths as sources of predefined projects ? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-to-set-multiple-paths-as-sources-of-predefined-projects-.html",
    "content": "How to set multiple paths as sources of predefined projects ? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to set multiple paths as sources of predefined projects ? You can set an environment variable starting with DVT_PREDEFINED_PROJECTS_EXT_ for each directory that contains predefined projects. For example, if there are two directories - let\u00e2\u0080\u0099s say dir1 and dir2 , you must create two environment variables pointing to them: $DVT_PREDEFINED_PROJECTS_EXT_1 -> dir1 $DVT_PREDEFINED_PROJECTS_EXT_2 -> dir2 Note Each environment variable must point to only one directory that can store any number of projects. Note Avoid duplicate projects in different directories. I want to use an alias in a DVT Generic Run Configuration, but it\u00e2\u0080\u0099s not recognized Lines are suddenly changing indentation when I edit text or move the cursor through the editor. Back to top",
    "section_path": [],
    "tokens": 156,
    "source": "scraped"
  },
  {
    "id": "9cf0b27c-d09f-405f-a431-22d70fe94f94",
    "title": "Refactoring | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/index.html",
    "content": "Refactoring | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Refactoring Rename Refactoring Rename Port Across the Design Hierarchy Rename File Bind Method Call Arguments by Name Bind Method Call Arguments by Position Connect Instance Ports by Name Connect Instance Ports by Position Expand .* Port Connections Extract to Variable Extract to Method Extract to Module Move Selection to New File Join Extern and Implementation Split into Extern and Implementation Change Method Signature Connect Instances Across the Design Hierarchy Connect Instances Using New Ports Connect Instances  Using Existing Ports Structural Changes Preview Diagram Refactoring Connect View Add Port to Module from Selected Field Add New Port to Module Add New Parameter to Module Refactoring Scripts Writing a Refactoring Script Applying a Refactoring Script Code Factory Rename Refactoring Back to top",
    "section_path": [],
    "tokens": 151,
    "source": "scraped"
  },
  {
    "id": "dc117489-9b69-42df-a4b5-d7c6b9cff975",
    "title": "Automatic Indentation As You Type | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-formatting/automatic-indentation-as-you-type.html",
    "content": "Automatic Indentation As You Type | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Automatic Indentation As You Type The auto-indentation preference allows you to choose how the code is automatically indented as you type. You can choose the auto-indentation mechanism from: Window -> Preferences -> DVT -> SystemVerilog -> Editor . Available options are: Disabled : Auto-indentation will not be performed. Default : Auto-indentation of a new line matches the indentation of the last line. Advanced (new engine) : Auto-indentation is in line with the formatter\u00e2\u0080\u0099s indentation. Preferences Keys Override Functions Back to top",
    "section_path": [],
    "tokens": 116,
    "source": "scraped"
  },
  {
    "id": "590a0063-b54a-455e-94c4-b115bf11f4a5",
    "title": "How to set an environment variable within a Run Configuration? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-to-set-an-environment-variable-within-a-run-configuration.html",
    "content": "How to set an environment variable within a Run Configuration? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to set an environment variable within a Run Configuration? More details here . How does DVT integrate with CVS? How to run a remote Unix command from DVT Eclipse for Windows? Back to top",
    "section_path": [],
    "tokens": 75,
    "source": "scraped"
  },
  {
    "id": "81eb823f-5bec-40bc-ba2b-3039dfb80252",
    "title": "External Documentation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/external-tools-integration/external-documentation.html",
    "content": "External Documentation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide External Documentation You can browse and search through 3rd party documentation using the Eclipse help system. Configure External Documentation Note Integration with external documentation is not available by default in DVT distributions. You have to install the feature by following this procedure: https://eda.amiq.com/download . At step #4 make sure you have checked the Help Plugins . Warning DVT doesn\u00e2\u0080\u0099t ship with 3rd party documentation, if it is not in the public domain (for example doxygen docs are public). Assuming you have the documentation installed, configure the path to it from menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 Help : Browse External Documentation Once configured it will appear in the help system (menu Help \u00e2\u0080\u00a3 Help Contents ): Search External Documentation You can search through the documentation directly from within Eclipse IDE. For example select and click Ctrl+Shift+H . The Help View is brought up with the matches. You can also bring up the Help View from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 Help . External Builders Debugger Integration On this page Configure External Documentation Browse External Documentation Search External Documentation Back to top",
    "section_path": [],
    "tokens": 215,
    "source": "scraped"
  },
  {
    "id": "3bd07619-3e49-48a0-86dd-a005389a468c",
    "title": "Some widget colors are not displayed properly. What can I do? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/some-widget-colors-are-not-displayed-properly-what-can-i-do.html",
    "content": "Some widget colors are not displayed properly. What can I do? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Some widget colors are not displayed properly. What can I do? When DVT uses GTK2, it is recommended to use a ClearLooks based OS theme. This will help you avoid most of the issues related to the color theme of DVT. If using a ClearLooks theme is not possible, you can still manually tune the colors to fix some of the coloring issues. For example, when: Notifications have a dark background and foreground : Go to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Appearance \u00e2\u0080\u00a3 Colors and Fonts \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Notifications and select a different color for background. Search boxes have the same background and foreground : Most of the widget colors are based on the OS theme (if you didn\u00e2\u0080\u0099t select a dark theme in DVT). You can customize them from Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Appearance \u00e2\u0080\u00a3 Colors and Fonts \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Filter Box . Content Assist has the wrong background : Most of the widget colors are based on the OS theme (if you didn\u00e2\u0080\u0099t select a dark theme in DVT). You can customize them from Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Appearance \u00e2\u0080\u00a3 Colors and Fonts \u00e2\u0080\u00a3 Basic \u00e2\u0080\u00a3 Content Assist background color . How do I change the background color of the Editor? How do I change the tooltip colors? Back to top",
    "section_path": [],
    "tokens": 261,
    "source": "scraped"
  },
  {
    "id": "b5a50b5b-1228-4752-a001-c5bfe1ce1f2e",
    "title": "Workspace and Workbench | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/getting-started/workspace/workspace-and-workbench.html",
    "content": "Workspace and Workbench | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Workspace and Workbench Work Workspace and workbench are different terms for different concepts, however they sound quite similar to be mistakenly interchanged. The \u00e2\u0080\u009cwork\u00e2\u0080\u009d prefix has a tendency to make us lose the interest, so I guess we don\u00e2\u0080\u0099t get to hear clearly the \u00e2\u0080\u009cspace\u00e2\u0080\u009d or \u00e2\u0080\u009cbench\u00e2\u0080\u009d that follow, hence both workspace and workbench collapse under the annoying \u00e2\u0080\u009csomething about work\u00e2\u0080\u009d. Workspace One of the first things you specify when you start Eclipse is the workspace location. The workspace is a directory that holds information about the projects you work on, as well as the Eclipse preferences (from layout to behavior). We can say that the workspace \u00e2\u0080\u009cholds\u00e2\u0080\u009d the Integrated Development Environment: the data you work on (organized in projects) and how you work with it (preferences). It is your \u00e2\u0080\u009cspace of work\u00e2\u0080\u009d or \u00e2\u0080\u009cworking space\u00e2\u0080\u009d or \u00e2\u0080\u009cworking universe\u00e2\u0080\u009d. Depending on your style, you can do all your work in a single workspace, no matter how different projects in your life, for example a Web project to publish your photos, a Verification project and a Java project where you learn how to program. Or you can chose to have several workspaces, each one dedicated to a specific state of mind or universe of thinking. Workbench The workbench is practically the Eclipse main window. It is the bench where you organize your instruments, except that now you don\u00e2\u0080\u0099t have power supplies, signal generators or oscilloscopes, but different views and editors . Views and editors are your instruments to manipulate sources and data. You arrange them at hand for a specific task (exploring, debugging, coding etc.). What instruments you use and how you lay them out on your bench ( workbench ) is known as a perspective : with what and from what angles you look at your data. Eclipse allows you quickly to reorganize your workbench, by choosing a different perspective. Don\u00e2\u0080\u0099t have to spend time moving the signal generator away, just switch to another perspective. Workspace Again The projects (your data) are not necessarily physically located in the workspace directory. They can be simple pointers to other locations on the disk. However the workspace aggregates all your \u00e2\u0080\u009crelevant\u00e2\u0080\u009d projects for a specific development universe. When you create a new empty project in the workspace, it is located in the actual workspace directory. When you create a project from existing source, the workspace keeps a pointer to the project folder. When you import a project in your workspace, again the workspace keeps a pointer to the project folder. (Importing is an interesting concept, documented separately). Note You can switch at any time from one workspace to another (menu File \u00e2\u0080\u00a3 Switch workspace\u00e2\u0080\u00a6 ). You can start several Eclipse instances looking at various workspaces (chose when prompted at start or in batch mode \u00e2\u0080\u009ceclipse -d <workspace location>\u00e2\u0080\u009d). However, you cannot have two Eclipse instances looking at the same workspace at once. Eclipse locks the workspace, as indicated by the .metadata/.lock file in the workspace directory. See also What is a Workspace Project Natures Refresh On this page Work Workspace Workbench Workspace Again Back to top",
    "section_path": [],
    "tokens": 546,
    "source": "scraped"
  },
  {
    "id": "7f5d7fb3-ab3a-46ae-b39c-0cfb616281c8",
    "title": "Search all UVM Phase Overrides | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/search-all-uvm-phase-overrides.html",
    "content": "Search all UVM Phase Overrides | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Search all UVM Phase Overrides Use the Types View to see where a specific function is declared. For example, type .*phase in the Types View Quick Search to locate all UVM phase overrides. The classes that contain the declarations are bolded. The matching type members are also bolded and promoted to the top of the members pane. Search Port in Verification Hierarchy Search Global API Back to top",
    "section_path": [],
    "tokens": 103,
    "source": "scraped"
  },
  {
    "id": "04072fa4-197f-4a4e-a12a-9c3e9427edc1",
    "title": "Remove \u00e2\u0080\u0098local\u00e2\u0080\u0099 or \u00e2\u0080\u0098protected\u00e2\u0080\u0099 Qualifier | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/remove-local-or-protected-qualifier.html",
    "content": "Remove \u00e2\u0080\u0098local\u00e2\u0080\u0099 or \u00e2\u0080\u0098protected\u00e2\u0080\u0099 Qualifier | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Remove \u00e2\u0080\u0098local\u00e2\u0080\u0099 or \u00e2\u0080\u0098protected\u00e2\u0080\u0099 Qualifier An error is triggered when accessing hidden API, for example local fields of a super class, or protected functions of another object. Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Remove \u00e2\u0080\u0098local\u00e2\u0080\u0099 qualifier or Remove \u00e2\u0080\u0098protected\u00e2\u0080\u0099 qualifier from the list of quick fix proposals and press Enter . The declaration of the field is revealed in the editor, and the local qualifier is removed. Import Type Remove Signal from Sensitivity List Back to top",
    "section_path": [],
    "tokens": 121,
    "source": "scraped"
  },
  {
    "id": "cf822d89-8f8d-45ae-81ec-15ff933ece03",
    "title": "VMM Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/vmm-support/vmm-templates.html",
    "content": "VMM Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide VMM Templates DVT offers autocomplete templates for VMM components. Just type in the editor VMM then hit Ctrl + Space twice and a drop-down list will offer you the available templates. After you pick the desired template, you can fill in the template parameters (e.g. transactor name, environment name etc.). Quick VMM Documentation Access Settings Management Back to top",
    "section_path": [],
    "tokens": 91,
    "source": "scraped"
  },
  {
    "id": "525845af-a7fe-4fc5-8b1c-eaa047564fe4",
    "title": "Code Templates in Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-templates/code-templates-in-autocomplete.html",
    "content": "Code Templates in Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Code Templates in Autocomplete Type the first letters from the code template name, then press Ctrl + Space twice to see code template proposals. Proposals are suggested using Global Code Templates and Project Level Code Templates . SystemVerilog: e Language: VHDL: Code Templates Constraint Code Templates Back to top",
    "section_path": [],
    "tokens": 83,
    "source": "scraped"
  },
  {
    "id": "bcc4f8bb-3f26-4663-93db-3b4e4d97905c",
    "title": "I know that file.foo is present in the project location, but I can\u00e2\u0080\u0099t see it in the Navigator View | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/i-know-that-filefoo-is-present-in-the-project-location-but-i-cant-see-it-in-the-navigator-view.html",
    "content": "I know that file.foo is present in the project location, but I can\u00e2\u0080\u0099t see it in the Navigator View | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide I know that file.foo is present in the project location, but I can\u00e2\u0080\u0099t see it in the Navigator View Check if there is a Navigator filter enabled preventing the file from being displayed. Bring down the Navigator View Menu and select Filters : Make sure there is no pattern in the list that matches the name of the file (like for example *.foo). How to create custom shortcut and button for a Run Configuration? How to copy the full path to the file in the current editor? Back to top",
    "section_path": [],
    "tokens": 139,
    "source": "scraped"
  },
  {
    "id": "ca22c560-fe0d-49e1-b56f-eaf394722926",
    "title": "UVM Smart Log | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/uvm-smart-log.html",
    "content": "UVM Smart Log | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Smart Log DVT ships with predefined filters for UVM that allow you to view colored and hyper-linked logs like the one below. To turn on UVM Smart Log: Select the predefined UVM filters as indicated below: UVM Sequence Tree UVM Templates Back to top",
    "section_path": [],
    "tokens": 78,
    "source": "scraped"
  },
  {
    "id": "f3f931e3-cfc2-4d0b-9d52-6bc6d90e3268",
    "title": "Environment Variables | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/environment-variables.html",
    "content": "Environment Variables | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Environment Variables To define an environment variable you can use the following syntax: + dvt_setenv +< NAME > [ = VALUE ] Examples +dvt_setenv+UVM_HOME=/uvm/uvm-1.1 +dvt_setenv+SPECMAN_PATH=$SPECMAN_PATH:/path/to/my/vips To use the value of an environment variable called ENV_VAR you can use any of the following notations: UNIX: $ENV_VAR or ${ENV_VAR} Windows: %ENV_VAR% Makefile: $(ENV_VAR) TCL: $::env(ENV_VAR) or $env(ENV_VAR) Environment variables, either from the parent shell or explicitly defined, can be used to specify: top files directives that take a path as an argument, for example +incdir+ value for defines When an environment variable is not defined, but it is used, the behavior is as follows: for the value of a define directive, the define value is left as-is for top files and directives that take a path as an argument, an error is signaled and such top files and directives are ignored when used inside the value of an environment variable, it is expanded to the empty string Environment variables are visible to the DVT parsers, for example when used in the e language import statements. Environment variables are propagated to the external tools launched from DVT, for example by using Run Configurations or External Builders. When an environment variable is used inside a build file, only the +dvt_setenv+ directives above the usage line are taken into account. Implementation note The Dot \u00e2\u0080\u0098.\u00e2\u0080\u0099 segment in a path denotes the current directory, which is solved when the path is used, for example to specify a top file or incdir.\nIt is not solved when defining an environment variable.\nSee the example below: -------- In default.build -------- +dvt_setenv+MYVAR=.   // $MYVAR has the value '.' until used to specify a path $MYVAR/top1.e         // Equivalent with $DVT_PROJECT_LOC/top1.e -F other/file.f -------- In other/file.f -------- // $MYVAR is used here to specify a path, '.' shall be solved to $DVT_PROJECT_LOC/other/ $MYVAR/top2.e         // Equivalent with $DVT_PROJECT_LOC/other/top2.e Predefined environment variables Variable Value DVT_PROJECT_LOC Absolute path of the project directory. Comments Including Other Argument Files Back to top",
    "section_path": [],
    "tokens": 358,
    "source": "scraped"
  },
  {
    "id": "2e70708c-9062-4b4c-88b3-f33939c3ad39",
    "title": "How to copy the full path to the file in the current editor? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-to-copy-the-full-path-to-the-file-in-the-current-editor.html",
    "content": "How to copy the full path to the file in the current editor? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to copy the full path to the file in the current editor? Right - click in the current editor, then choose Copy Full Path . You can also assign it a shortcut: go to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Keys (or press twice Ctrl + Shift + L ) and assign a shortcut to Copy Full Path . It\u00e2\u0080\u0099s a global shortcut, you can call it from anywhere but only the active editor\u00e2\u0080\u0099s input will be considered (or the current selection in the navigator if you call it when the navigator view is active e.g. after you select a file). I know that file.foo is present in the project location, but I can\u00e2\u0080\u0099t see it in the Navigator View How to adjust the console logs filters matching parameters? Back to top",
    "section_path": [],
    "tokens": 176,
    "source": "scraped"
  },
  {
    "id": "6ee22282-b249-4961-8847-d68f068d0d6b",
    "title": "Run Configurations | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/external-tools-integration/run-configurations.html",
    "content": "Run Configurations | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Run Configurations You can invoke (run) any executable from Eclipse and see its output in the Console View . You just need to create a Run Configuration from menu Run > Run\u00e2\u0080\u00a6 . VlogDT provides one type of configuration: DVT Generic DVT Generic Run Configuration Menu Run > Run Configurations\u00e2\u0080\u00a6 . Select DVT Generic configuration and click the New button. Specify name, working directory, run as command or script and the content of the command or script . Click Run . Before writing the command you can specify how to run the content. Run as a: command: the content must be a single line command with arguments script: the content must be a multiline script, preceded by a hash exclam; in Windows the script will run using cmd.exe, if a #!/bin/sh hash exclam exists on the first line the script will be executed using Busybox included in the distribution If run as a command is selected the content should look like this: sh -c \"echo Test ${string_prompt:Parameter 1} ${string_prompt:Parameter 2}\" or if run as a script is selected a script with hash exclam must be specified: #!/bin/sh echo Test ${ string_prompt : Parameter 1 } ${ string_prompt : Parameter 2 } for i in ` seq 5 -1 0 ` ; do echo Starting in $i seconds sleep 1 done echo Test started Parameters can be specified using Eclipse variables or DVT Custom Dialogs can be used for more complex dialogs. As a result you will be asked to provide the \u00e2\u0080\u009cParameter 1\u00e2\u0080\u009d e.g. \u00e2\u0080\u009crun\u00e2\u0080\u009d\nand \u00e2\u0080\u009cParameter 2\u00e2\u0080\u009d e.g. \u00e2\u0080\u009cscript\u00e2\u0080\u009d. The result of running the command will be: \u00e2\u0080\u009cTest run script\u00e2\u0080\u009d Note The parameters ${VAR} are considered Eclipse variables that and will be resolved before running the command. To use shell variables in the command you must use the $VAR syntax. When running as a command, unresolved Eclipse variables will trigger an error and the run will be aborted. not be reported. When running as a script the unresolved Eclipse variables will remain untouched. Supported Launch Modes You may choose if a launch configuration can be launched in Run mode, Debug mode or both. When both modes are supported, launching from a Custom Shortcut and Button for a Run Configuration will prompt for launch mode. See Debugger Integration for more details on debugging your code in DVT. Quick Run You can launch again at any time from menu Run > Run History\u00e2\u0080\u00a6 or directly from the toolbar (simple click launches last): You can also use the Run > Quick Run menu (or Ctrl+U shortcut key) to quickly launch any existing Run Configuration: The DVT Quick Run dialog will pop-up and present a list of all available Run Configurations. You can use the quick filter to search for a specific Run Configuration, up and down arrows to navigate in the list and Enter to launch: Output The invocation output is dumped to the Console View . Click on hyperlinks in the Console View to jump directly to the to source location. Run Configuration Session Type Note The options available under the command/script text box can be used to control the process session that will be used to run the command or script. The following session types are available: Same process session as DVT The process will be a direct child of DVT The process must manage its subprocesses if termination signals are received, otherwise orphaned processes may appear Job control is not available stdin, stdout, stderr will be available in \u00e2\u0080\u009cConsole View\u00e2\u0080\u009d , tty will not be available A new process session The process will be launched using a wrapper script that will create a new process session The process may manage its subprocesses if termination signals are received, but \u00e2\u0080\u009cTerminate all spawned processes\u00e2\u0080\u00a6\u00e2\u0080\u009d option can be used to kill all subprocesses when the parent process ends or is terminated Job control is available stdin, stdout, stderr will be available in \u00e2\u0080\u009cConsole View\u00e2\u0080\u009d , tty will not be available An xterm process session (xterm must be available in the system) The process will be launched using xterm that will create a new process session The process may manage its subprocesses if termination signals are received, but \u00e2\u0080\u009cTerminate all spawned processes\u00e2\u0080\u00a6\u00e2\u0080\u009d option can be used to kill all subprocesses when the parent process ends or is terminated Job control is available tty, stdin, stdout and stderr will be available in xterm , the stdout, stderr can be redirected to \u00e2\u0080\u009cConsole View\u00e2\u0080\u009d using \u00e2\u0080\u009cRedirect xterm output\u00e2\u0080\u00a6\u00e2\u0080\u009d option xterm window can remain on screen when the process ends or is terminated if \u00e2\u0080\u009cHold xterm window open\u00e2\u0080\u00a6\u00e2\u0080\u009d option is selected Custom Shortcut and Button for a Run Configuration On the main toolbar click on Run > Run Configurations\u00e2\u0080\u00a6 > Select a DVT Generic run configuration and click on Shortcuts Tab . You can choose to add a button in the main toolbar or a shortcut (for example, ALT+SHIFT+1). Warning It is not recommended to remove the shortcuts from Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Keys , you should remove them from the Shortcuts Tab . Toolbar buttons must have an icon. You can specify the path to an icon or generate one by selecting the Geerate icon option. Each icon can have a one character label and a background color. You can specify the position of a button in the toolbar by modifying the Position # . Buttons are placed in the toolbar from left to right, ordered from 0 to N. If there are more buttons with the same number, they will be ordered alphabetically. Note You cannot create shortcuts for read-only run configuration files. Using environment variables in DVT Generic Run Configurations Environment variables can be set in the following ways: in the shell where DVT was launched using the +dvt_setenv+ directive in the project\u00e2\u0080\u0099s build configuration file (.dvt/default.build) - see Environment Variables from the Environment tab of the Run Configurations dialog (menu Run > Run Configurations) directly within the command getting executed, for example: sh -c \u00e2\u0080\u009cenv PROJECT_DIR=${project_loc} iev -f ${project_loc}/iev/iev.f -c\u00e2\u0080\u009d . To ensure that an environment variable ENV_VAR is expanded correctly, use the simple $ENV_VAR notation. Use the enclosing curly brackets ${ENV_VAR} notation only for Eclipse specific variables. You can find a list of these DVT Generic Run Configuration Variables . Using an alias in a DVT Generic Run Configuration Aliases only work in interactive shells. The command specified in the Run Configuration should be: <your_shell> -ic \u00e2\u0080\u009c<your_alias>\u00e2\u0080\u009d for example bash -ic \u00e2\u0080\u009cll\u00e2\u0080\u009d When you create a new DVT Generic Run Configuration, DVT tries to guess the shell that you use from the $SHELL system variable and fills it in for you. DVT Generic Run Configuration Variables The following variables are available when you configure a run configuration. These variables are automatically expanded each time the run configuration is launched. DVT variables Name Description ${selected_resources_loc} Absolute file system path of the selected resources separated by system file separator character. You can pass as argument a string to be used as separator. ${selected_resources_path} Workspace relative path of the selected resources separated by system file separator character. You can pass as argument a string to be used as separator. ${selected_resources_name} The name of the selected resources separated by system file separator character. You can pass as argument a string to be used as separator. ${selected_resource_line} The line of the cursor from the selected resource. ${dvt_current_build_file} Absolute path to the current DVT build file ${dvt_cli} Expands to the full DVT CLI path, using as the workspace option the current workspace: $DVT_HOME/bin/dvt_cli.sh -workspace ${workspace_loc} ${dvt_sim_compile_file_list} List of files compiled by DVT, in compilation dependency order, including library and compile syntax information (VHDL only). Each line in the variable expansion has the format: <library> <langauage_syntax> <file_full_path>. If a file path is provided as an argument to this variable, all the files required for the compilation of the provided file are listed (including itself). If in addition \u00e2\u0080\u009ccomp_deps\u00e2\u0080\u009d is provided as first argument, the entities instantiated through components will also be considered a compilation dependency Eclipse variables Name Description ${workspace_loc} The absolute path on the system\u00e2\u0080\u0099s hard drive to Eclipse\u00e2\u0080\u0099s workspace directory ${workspace_loc:<resource path>} The absolute path on the system\u00e2\u0080\u0099s hard drive to the specified resource. The <resource path> is the full path of the resource relative to the workspace root. For example ${workspace_loc:/MyProject/MyFile.txt}. Note that the expanded result of this variable is not the same as ${workspace_loc}/MyProject/MyFile.txt if the project\u00e2\u0080\u0099s contents directory for MyProject is outside the workspace directory. ${project_loc} The absolute path on the system\u00e2\u0080\u0099s hard drive to the currently selected resource\u00e2\u0080\u0099s project or to the project being built if the external tool is run as part of a build. ${project_loc:<resource path>} The absolute path on the system\u00e2\u0080\u0099s hard drive to the specified resource\u00e2\u0080\u0099s project. The <resource path> is the full path of the resource relative to the workspace root. For example ${workspace_loc:/MyProject/MyFile.txt}. Note that the expanded result of this variable is not the same as ${workspace_loc}/MyProject if the project\u00e2\u0080\u0099s contents directory for MyProject is outside the workspace directory. ${container_loc} The absolute path on the system\u00e2\u0080\u0099s hard drive to the currently selected resource\u00e2\u0080\u0099s parent (either a folder or project). ${container_loc:<resource path>} The absolute path on the system\u00e2\u0080\u0099s hard drive to the specified resource\u00e2\u0080\u0099s parent (either a folder or project). The <resource path> is the full path of the resource relative to the workspace root. For example:${workspace_loc:/MyProject/MyFolder/MyFile.txt}. Note that the expanded result of this variable is not the same as ${workspace_loc}/MyProject/MyFolder if the project\u00e2\u0080\u0099s contents directory for MyProject is outside the workspace directory. ${resource_loc} The absolute path on the system\u00e2\u0080\u0099s hard drive to the currently selected resource. ${resource_loc:<resource path>} The absolute path on the system\u00e2\u0080\u0099s hard drive to the specified resource. The <resource path> is the full path of the resource relative to the workspace root. For example ${workspace_loc:/MyProject/MyFile.txt}. Note that the expanded result of this variable is not the same as ${workspace_loc}/MyProject/MyFile.txt if the project\u00e2\u0080\u0099s contents directory for MyProject is outside the workspace directory. ${project_path} The full path, relative to the workspace root, of the currently selected resource\u00e2\u0080\u0099s project or of the project being built if the external tool is run as part of a build. ${container_path} The full path, relative to the workspace root, of the currently selected resource\u00e2\u0080\u0099s parent (either a folder or project). ${resource_path} The full path, relative to the workspace root, of the currently selected resource. ${project_name} The name of the currently selected resource\u00e2\u0080\u0099s project or of the project being built if the external tool is run as part of a build. ${container_name} The name of the currently selected resource\u00e2\u0080\u0099s parent (either a folder or project). ${resource_name} The name of the currently selected resource. External Tools Integration Smart Log On this page Run Configuration Session Type Custom Shortcut and Button for a Run Configuration Using environment variables in DVT Generic Run Configurations Using an alias in a DVT Generic Run Configuration DVT Generic Run Configuration Variables Back to top",
    "section_path": [],
    "tokens": 1841,
    "source": "scraped"
  },
  {
    "id": "11ebdca0-3f4b-4e68-80f4-f7479c0f9231",
    "title": "External | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-formatting/external.html",
    "content": "External | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide External When enabled, all other code formatting options are disabled and code formatting is performed using the given command. Format Multiple Files Preferences Keys Back to top",
    "section_path": [],
    "tokens": 58,
    "source": "scraped"
  },
  {
    "id": "832a63a0-fe81-4c46-b8df-6c75e659e740",
    "title": "Design Elaboration | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/design-elaboration.html",
    "content": "Design Elaboration | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Design Elaboration Elaboration is the process that occurs after the code is parsed. From one or more starting points, called tops , all instances have their designs computed, parameters and other constants get their values, generate constructs are instantiated and port connections are established. In the project build config file, specify the elaboration top(s) with one or more -top  top_name directives. E.g. work . elem_name - from the specified library , the SystemVerilog * module * , SystemVerilog * configuration * , VHDL * entity * or VHDL * configuration * is set as the top elem_name - all libraries are searched for the design element and the first found is set as top elem_name : config - the configuration specified is the top , even in the case of a name collision with either a SystemVerilog module or a VHDL entity If no directive is used, then the elaboration is preceded by a top candidates search through all the designs. A UNSPECIFIED_TOP warning is also displayed in the Console View to mark the absence of any chosen top design. Note SystemVerilog modules can be instantiated by a VHDL entity and vice versa. You can also specify design tops from either language. Top candidates When no top design element is specified in the project build config file, then any design element that satisfies the following requirements is considered a top: The design element is either a SystemVerilog module , a SystemVerilog program , a VHDL entity or a VHDL configuration . Do note that a SystemVerilog configuration cannot be a candidate. The design element is not instantiated anywhere. Even instantiations under inactive generate constructs are considered and rule out the element in question. Customizable: The design element has sub-instances or local generate constructs. This requirement can be disabled by specifying in the project build config the following directive: +dvt_enable_elaboration_empty_tops+true . As mentioned before, a mixed-language project can have any combination of SystemVerilog, SystemVerilog or VHDL top candidates. Parameter values During elaboration, parameters (or generics in VHDL) get their values computed. The following sources, ordered by importance, are searched: Configuration overrides . Any override of a parameter in a SystemVerilog config or a VHDL configuration rule is considered first. SystemVerilog config cfg ; instance top . inst use amod #(.PARAM(1)) endconfig VHDL configuration cfg of top_entity for rtl for inst : aent use entity work . aent generic map ( PARAM => 1 ); end for ; end for ; end configuration ; Defparam assignments SystemVerilog defparam top . inst . PARAM = 1 ; Instantiation overrides SystemVerilog amod #(.PARAM(1)) inst(); VHDL inst : entity work . aent generic map ( PARAM => 1 ); Default values SystemVerilog parameter int PARAM = 1 ; VHDL generic ( PARAM : integer := 1 ); The computed value can be seen in the parameter tooltip. The Inspect View will also show it, alongside number base conversions. To easily jump to the driver or source of the parameter value, you can use the Jump To Assignment hyperlink. Note The current design path, shown in the Design Breadcrumb, is used for determining the instance to which the inspected parameter belongs. Unelaborated Design The unelaborated design is the part of the compiled code not found under any of the elaboration tops. It can divided into two categories: Inactive generate constructs: e.g. the else branch of an if generate, all inactive case items, for loop generates with no iterations Design elements not instantiated under the elaboration tops: unused interfaces, the design of an instance under an inactive generate construct Unelaborated modules/programs/interfaces/checkers/entities are marked with warnings. Also, packages that are not used in the elaborated design are marked with UNELABORATED_PACKAGE warnings. Tool functionality in the unelaborated part of the design can be restricted through the +dvt_unelaborated_compile_checks All Build Directives .\nA faster build time is the main benefit. But, the tradeoff is the loss of all IDE specific functionality, like for example Show Usages, Readers or Writers , Rename Refactoring , or Design Diagrams , in the excluded code. Debugging Debugging the elaboration is possible through the +dvt_elaboration_debug global build config directive. Its output is shown in the project DVT Console/build log. It accepts multiple argument values: E.g. +dvt_elaboration_debug+STATS+EVAL STATS enables various statistics, e.g. number of elaborated instances, number of defparams found MEMORY the elaborated hierarchy, both designs and parameter values, is listed EVAL internal unsuccessful evaluations are marked with an UNKNOWN_EXPRESSION error that appears also in the Problems View INCREMENTAL additional information regarding incremental adaptive elaboration is shown BINDS_PASS additional information regarding the elaboration of bind directives is shown SUBINSTANCE_COPIES additional information regarding the SINGLE_PASS elaboration of sub-instances that get copied Performance The following build config directives can restrict the elaboration and therefore improve performance when needed. +dvt_elaboration_control Disable or change steps in the elaboration.Use EACH_GENERATE_BLOCK_ONCE to elaborate each generate block, whether active or inactive, only once. All branches of conditional generate blocks will be elaborated. Loop generate blocks will be elaborated only once, for index 0. Similarly, an array of instances will have only one element per dimension, corresponding to index 0.Use NO_GENERATE_BLOCKS to not elaborate generate blocks. Any sub-instance found under a generate block will also not be elaborated.Use NO_PARAM_EVAL to disable parameter evaluation. Parameters and constants will not have their values computed, not even their default values. Use EACH_SPEC_ONCE to stop the SINGLE_PASS elaboration of an instance whose design specialization has already been elaborated (the instance is BBOX-ed). Use NO_SUBINSTANCE_COPIES to not optimize the SINGLE_PASS elaboration through copies of identical sub-instances. E.g. +dvt_elaboration_control+NO_GENERATE_BLOCK_EVAL+NO_PARAM_EVAL +dvt_elaboration_loop_block_cutoff Configure the cut-off number for elaborated loop blocks.In a design with many loop generate constructs, limiting the number to 1 per loop can drastically reduce the elaboration time. E.g. +dvt_elaboration_loop_block_cutoff+1 (default: 200) +dvt_elaboration_loop_statement_cutoff Configure the cut-off number for elaborated function loop statements.In a design with many evaluated functions, limiting the number to 100 per loop statement (e.g. for, foreach, while) can drastically reduce the elaboration time. Functions affected by the cutoff are not elaborated. E.g. +dvt_elaboration_loop_statement_cutoff+100 (default: 1000) +dvt_elaboration_kind Configure the kind of elaboration performed at full build.Use SINGLE_PASS to have the elaboration be performed in one pass. A notable performance improvement can be observed but note that any usage of defparam assignments or configurations may lead to unexpected elaboration results.Use MULTI_PASS to have the elaboration use multiple passes. In most cases it is slower than the SINGLE_PASS elaboration, but ensures correct handling of defparam assignments and configurations.Use ADAPTIVE to let the tool determine the kind based on multiple criteria. E.g. +dvt_elaboration_kind+SINGLE_PASS (default: ADAPTIVE) +dvt_elaboration_max_nof_resolve_binds_passes Configure the maximum number of passes allowed when resolving bind directives. E.g. +dvt_elaboration_max_nof_resolve_binds_passes+1 (default:5) +dvt_elaboration_disable_method_eval Disable function call evaluation in elaboration. E.g. +dvt_elaboration_disable_method_eval+true +dvt_elaboration_skip_defparams Skip defparam assignments during elaboration. E.g. +dvt_elaboration_skip_defparams+true +dvt_elaboration_skip_modules Skip elaboration of an instance based on design name.Instance port connections and parameter overrides are not checked and sub-instances are not elaborated. Skipped designs are considered unelaborated.Elaboration tops cannot be skipped.Wildcards such as \u00e2\u0080\u0098*\u00e2\u0080\u0099 (any string) and \u00e2\u0080\u0098?\u00e2\u0080\u0099 (any character) can be used in the pattern. E.g. +dvt_elaboration_skip_modules+*amod* +dvt_elaboration_skip_paths Skip elaboration of an instance based on design file absolute path.Instance port connections and parameter overrides are not checked and sub-instances are not elaborated. Skipped designs are considered unelaborated.Elaboration tops cannot be skipped.Wildcards such as \u00e2\u0080\u0098*\u00e2\u0080\u0099 (any string) and \u00e2\u0080\u0098?\u00e2\u0080\u0099 (any character) can be used in the pattern. E.g. +dvt_elaboration_skip_paths+/home/user/dvt_project/rtl/* +dvt_elaboration_skip_instances Skip elaboration of an instance based on hierarchical path.Instance port connections and parameter overrides are not checked and sub-instances are not elaborated. Skipped designs are considered unelaborated.Elaboration tops cannot be skipped.Wildcards such as \u00e2\u0080\u0098*\u00e2\u0080\u0099 (any string) and \u00e2\u0080\u0098?\u00e2\u0080\u0099 (any character) can be used in the pattern. E.g. +dvt_elaboration_skip_instances+top.dut.* +dvt_elaboration_bbox_modules Black box an instance based on design name.Instance port connections and parameter overrides are checked but sub-instances are not elaborated. Black boxed designs are considered unelaborated. In the Design Hierarchy View, they are marked as BLOCK BOX.Elaboration tops cannot be black boxed.Wildcards such as \u00e2\u0080\u0098*\u00e2\u0080\u0099 (any string) and \u00e2\u0080\u0098?\u00e2\u0080\u0099 (any character) can be used in the pattern. E.g. +dvt_elaboration_bbox_modules+*amod* +dvt_elaboration_bbox_paths Black box an instance based on design file absolute path.Instance port connections and parameter overrides are checked but sub-instances are not elaborated.Black boxed designs are considered unelaborated. In the Design Hierarchy View, they are marked as BLOCK BOX.Elaboration tops cannot be black boxed.Wildcards such as \u00e2\u0080\u0098*\u00e2\u0080\u0099 (any string) and \u00e2\u0080\u0098?\u00e2\u0080\u0099 (any character) can be used in the pattern. E.g. +dvt_elaboration_bbox_paths+/home/user/dvt_project/rtl/* +dvt_elaboration_bbox_instances Black box an instance based on hierarchical path.Instance port connections and parameter overrides are checked but sub-instances are not elaborated.Black boxed designs are considered unelaborated. In the Design Hierarchy View, they are marked as BLOCK BOX.Elaboration tops cannot be black boxed.Wildcards such as \u00e2\u0080\u0098*\u00e2\u0080\u0099 (any string) and \u00e2\u0080\u0098?\u00e2\u0080\u0099 (any character) can be used in the pattern. E.g. +dvt_elaboration_bbox_instances+top.dut.* The following build config directives can restrict the functionality in the unelaborated code in order to improve performance. +dvt_unelaborated_compile_checks Control the scope of the unelaborated design build checks and functionality. If set to NONE , functionality and checking in the unelaborated modules and unelaborated local generate blocks is limited. If set to GENERATE_BLOCKS , functionality and checking in all unelaborated modules is limited. If set to DISCRETE , functionality and checking in the unelaborated modules found in library files is limited. This is the default value of the directive.If set to FULL, functionality and checking is not limited in the unelaborated code. E.g. +dvt_unelaborated_compile_checks+GENERATE_BLOCKS +dvt_unelaborated_disable_package_constants Disable unelaborated package constants evaluation and checking. E.g. +dvt_unelaborated_disable_package_constants+true C/C++ support Compilation Speed-up On this page Top candidates Parameter values Unelaborated Design Debugging Performance Back to top",
    "section_path": [],
    "tokens": 1609,
    "source": "scraped"
  },
  {
    "id": "b8e10571-eb89-43a1-9a35-d693ad7458a6",
    "title": "Examples | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/command-line-interface/examples.html",
    "content": "Examples | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Examples Create a Verilog/SystemVerilog/VHDL project: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -lang vhdl -f $PROJ /my_project/filelist.f Create a project and place it in its own workingset in a new DVT window; overwrite project if it already exists;\nlogically link some common library files under the project directory: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -lang vhdl -workingset -newwindow -force -f $PROJ /my_project/filelist.f -map common $COMMON_LIB Create an e Language project and place it in its own workingset in a new DVT window; logically link some common library files under the project directory: $ > dvt_cli.sh createProject $PROJ /my_project -workingset -newwindow -force -top $PROJ /my_project/e/top.e -test $PROJ/my_project/tests/test1.e -map common $COMMON_LIB Create a project with resource filters. Use this option to exclude unnecessary files and directories from the project directory tree, like regression results,\nwhich may cause Eclipse platform slowdowns: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -exclude projectRelativePath = sub/directory Create a Verilog/SystemVerilog/VHDL project and associate it with Perforce: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -lang vhdl -f $PROJ /my_project/filelist.f -p4 P4PORT=company_server:1666,P4CLIENT=perforce-work,P4USER=user1 Create a Verilog/SystemVerilog/VHDL project and associate it with ClearCase: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -lang vhdl -f $PROJ /my_project/filelist.f -clearcase Create an e Language project and add a couple of git repositories: $ > dvt_cli.sh createProject $PROJ /my_project -lang e -f /my/filelist.f -git /path/to/repo1/.git:/path/to/repo2/.git Create a Verilog/SystemVerilog project and associate it with Subversive SVN plugin: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -f $PROJ /my_project/filelist.f -svn <SVN repository URL> Create a SystemVerilog/CPP mixed language project and switch to the C/C++ perspective: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -lang cpp_ext -perspective cpp Create a project from an existing template: $ > dvt_cli.sh createProjectFromTemplate /target/location -template $PROJ /template/ Import an existing project into the workspace and place it in its own workingset in a new DVT window: $ > dvt_cli.sh importProject $PROJ /my_project -workingset -newwindow Open a file in the context of my_project and reveal line #50: $ > dvt_cli.sh openFile $PROJ /my_project/e/bfm.e -line 50 -project my_project Save and close a file: $ > dvt_cli.sh closeFile $PROJ /my_project/e/bfm.e -forceSave Open a custom dialog and print its output to the console: $ > dvt_cli.sh openCustomDialog -file dialog.swtxml -project my_project Print a list of the files compiled in my_project: $ > dvt_cli.sh listCompiledFiles -project my_project -unique Note If you need to run multiple commands, each command should be passed to a separate dvt_cli.sh invocation. Note To run multiple commands, simply invoke dvt_cli.sh in the desired order or wrap the invocations in a separate script: $ > dvt_cli.sh importProject $PROJ /my_project -workingset -newwindow $ > dvt_cli.sh openFile $PROJ /my_project/e/bfm.e -line 50 -project my_project $ > dvt_cli.sh openCustomDialog -file dialog.swtxml -project my_project Note It is not recommended to run in parallel several dvt_cli.sh invocations which depend on each other. Syntax Makefile Example Back to top",
    "section_path": [],
    "tokens": 503,
    "source": "scraped"
  },
  {
    "id": "ee3c1068-25c3-4744-a029-0bb4e0ee1f10",
    "title": "How to | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/how-to.html",
    "content": "How to | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to Set-up Local LLMs Using Ollama Add Comments to Selected Element Previewing the HTML Output Customization Advanced LLM Configuration Set-up Local LLMs Using Ollama Back to top",
    "section_path": [],
    "tokens": 60,
    "source": "scraped"
  },
  {
    "id": "dc27d82d-7cb5-4204-aa44-47d648ca6950",
    "title": "Hyperlinks | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/hyperlinks.html",
    "content": "Hyperlinks | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Hyperlinks Place the mouse cursor over an identifier in the editor while holding down the Ctrl key. The identifier becomes a hyperlink , and a list of navigation options is displayed. The first option is Open Declaration . This is the default action when you click directly on the identifier. Hyperlinks are available for all classes, modules, methods, fields, signals, macros, etc. in the source code files that DVT analyzes in your project. Open Declaration Tip Keyboard alternative: place editor cursor on an identifier and press F3 . Open Extern Method Implementation Open Super Implementation Available only if the method under cursor overrides a virtual method inherited from a superclass. Opens the implementation of the overridden method: Open Child Implementation Available only if the method under cursor is overridden in a subclass. If there is only one override, it is opened. Otherwise the Quick Type Hierarchy View is opened. Open Instance Available only for a design element under cursor which is instantiable. It jumps to the corresponding instance from design (which is also available in the Design Breadcrumb Navigation Bar). Open \u00e2\u0080\u00a6 Type Jump to Assignment Jumps to the next assignment of the signal under cursor in the current editor. Jump to Case Branch Available only on enum constants and parameters. Jumps directly to the case branch where element under cursor is used. Jump to an Imported File Jump to a Macro Definition Jump to Connected TLM Port Jumps to the next connected TLM port of the TLM port under cursor in the current editor. Show Connected TLM Ports Show in Config DB View Shows the selected  set or get call in the Config DB View . Note You need to perform UVM Runtime Elaboration in order to populate the Config DB View. Show Associated Getters in Config DB View Shows the associated get calls in the Config DB View for the selected set call. Note You need to perform UVM Runtime Elaboration in order to populate the Config DB View. Show Associated Setters in Config DB View Shows the associated set calls in the Config DB View for the selected get call. Note You need to perform UVM Runtime Elaboration in order to populate the Config DB View. Show in Factory Overrides View Shows the selected UVM factory override call in the Factory Overrides View . Note You need to perform UVM Runtime Elaboration in order to populate the Factory Overrides View. Show in Registers View Shows the selected UVM register in the Registers View . Note You need to perform UVM Runtime Elaboration in order to populate the Registers View. When the identifier under the cursor is a macro that expands to a single identifier, you can also see all the hyperlinks available for the macro replacement . For example you can open the declaration or show the usages of a macro replacement, which is a class, as seen below: Open Declaration of a Macro Replacement Hyperlinks in Comments You can define hyperlinks in comments using the @link or @see pragmas, for example: // @link uvm_pkg :: run_test // For more details @see spi_if . miso and @see spi_if . mosi Hover the hierarchical id specified after the pragma with the mouse cursor while holding down the Ctrl key, and click to go to the element\u00e2\u0080\u0099s declaration.\nAlternatively, place the editor cursor on the hierarchical id and press F3 The hierarchical identifier following @link or @see is of the form: [ < package_name > :: < type_name >.< inner_type_name >. ] < element_name > where <element_name> must be a type (class, struct, module, entity, interface, etc.) or a type member (method, field, event, signal, port etc.). Examples @link <element_name> @link <type_name>.<element_name> @link <type_name>.<inner_type_name>.<element_name> @link <package_name>::<type_name>.<element_name> : Note If <path.to.element> does not solve to a unique element in code, a list of navigation options is displayed. Editor Right Click Menu Icons and Decorations On this page Hyperlinks in Comments Back to top",
    "section_path": [],
    "tokens": 684,
    "source": "scraped"
  },
  {
    "id": "74e80923-ed57-46f7-9a78-d3b3553898b4",
    "title": "Install DVT Using the Update Site | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/installation/update-site.html",
    "content": "Install DVT Using the Update Site | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Install DVT Using the Update Site To install DVT using the update site you must first make sure the Eclipse and Java versions are up to date. Eclipse Version You must use Eclipse 4.6 or newer . To check the Eclipse version use menu Help \u00e2\u0080\u00a3 About Eclipse Platform . In the snapshot the Eclipse version is 4.6. Java Version You must use Java 1.8 or newer . To check the Java version use menu Help \u00e2\u0080\u00a3 About Eclipse Platform , then click on Configuration Details and select Configuration tab. In the configuration look for java.runtime.version property. DVT Plug-in To check that the DVT plugin is installed use menu Help \u00e2\u0080\u00a3 About Eclipse Platform . You should see the DVT button. To see more details, for example the version, click the button. Install DVT Using a pre-packed Distribution Set the License On this page Eclipse Version Java Version DVT Plug-in Back to top",
    "section_path": [],
    "tokens": 189,
    "source": "scraped"
  },
  {
    "id": "fd42ad9d-1bcc-4d37-b7b3-69488ffd39ec",
    "title": "Installation Checklist | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/installation/index.html",
    "content": "Installation Checklist | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Installation Checklist Install DVT Using a pre-packed Distribution Install DVT Using the Update Site Eclipse Version Java Version DVT Plug-in Set the License Table of Contents Install DVT Using a pre-packed Distribution Back to top",
    "section_path": [],
    "tokens": 67,
    "source": "scraped"
  },
  {
    "id": "42d0dbb9-6199-49d3-a3d9-c2a684eab482",
    "title": "Quick Steps | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/custom-dialogs/quick-steps.html",
    "content": "Quick Steps | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Quick Steps Follow the wizard from menu New > Example > DVT > DVT Custom Dialog and place the customdialog.swtxml file in your DVT project. The SWT/XML Editor and the SWT/XML Preview View will open. In the editor (bottom side) switch to the Source tab instead of the Design tab. Change the title of the dialog by editing the id attribute of the topmost (first) Composite element Craft the dialog to the desired look by using the provided examples, autocomplete (Ctrl+Space) and the SWT/XML Preview View Create a Run Configuration and specify as command echo ${dvt_dialog_prompt:customdialog.swtxml} and run it to see and verify the output produced by the newly created dialog When you are content with the output, replace the command with your_script.sh ${dvt_dialog_prompt:customdialog.swtxml} Note Please be aware that when using {dvt_dialog_prompt:non-blocking} you should have the Launch in background option (on the Common tab) unset. Custom Dialogs Customizing the Dialog Output Back to top",
    "section_path": [],
    "tokens": 186,
    "source": "scraped"
  },
  {
    "id": "6ac6b883-dde5-4d05-9a57-f68403b0ea08",
    "title": "Search Port in Design Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/search-port-in-design-hierarchy.html",
    "content": "Search Port in Design Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Search Port in Design Hierarchy You can search for a specific port in the design hierarchy by using the Design Hierarchy View . Press the Select Top button and pick one of the available design tops. Make the ports panel visible by pressing the Show/Hide Ports button. In the instances filter text box, type the name of the port you are looking for, preceded by the dot \u00e2\u0080\u0098.\u00e2\u0080\u0099 character. The instances that contain the port are bolded. The ports are also bolded and promoted to the top of the ports pane. Search for Members Search Port in Verification Hierarchy Back to top",
    "section_path": [],
    "tokens": 137,
    "source": "scraped"
  },
  {
    "id": "decafc3d-8f18-49d8-8d1c-89cfa1013acc",
    "title": "Commands | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/command-line-interface/commands.html",
    "content": "Commands | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Commands Create a Project (Mixed-Language Capable) createProject <project_path> [-workingset [-newwindow]] [-force] [-close_others] [-f|-F <file_path>] [-top <top_file_path>] [-test <test_file_path>] [-map <link_name> <target_path>] [-name <project_name>] [-lang <lang>] [-perspective <perspective>] [-clearcase] [-git <repo1:repo2:...:repoN>] [-p4 <connection_parameters>] [-openResourceFilterDialog] [-include auto[:<threshold>]] [-include first_level] [-disable_fs_check] [-exclude|include :ref:`name`][,root=folder1[:sub/folderN]][,applies=f|d|rf|rd]] [-build <name>] [-<name>.build <build configuration directives ...>] Mandatory arguments: <project_path> Absolute path to project (must exist). -lang          Enable support for <lang> language: E, VLOG, VHDL, CPP, CPP_EXT, PSS, SLN, SDL. CPP, CPP_EXT are only valid when DVT CDT Integration feature is installed. At least one language must be specified. Optional arguments: -<name>.build     Create the build configuration file <project>/.dvt/<name>.build with <build configuration directives> as content. All flags up to the end of the command line, or up to the next -<name>.build flag are considered build configuration directives. This flag cannot be used in conjunction with -f, -F, -test, or -top. -build <name>     Set <name> as active build configuration. -clearcase        Share project with ClearCase Eclipse plugin. -include auto[:<threshold>] Automatically create resource filters, based on the active build configuration. Only compilation related directories are included, for example +incdirs, -y libdirs, $ SPECMAN_PATH entries and parent directories of top files. If specified, directories with more than <threshold> files will be excluded; otherwise, all relevant directories containing compiled files will be included. Some configuration resources are always included: .buildpath, .classpath, .cproject, .dvt, .project, .pydevproject, .settings [NOTE]      The -include auto argument can be combined with any further user-specified include or exclude filters -include first_level Automatically create resource filters to include only the files and directories (without their content) located directly under the project root. The directories' content can be brought on demand, level by level, by double clicking on a directory in the Project Explorer View. Some configuration resources are always included: .dvt, .settings For more details see the Lazy Bring-up Resources chapter. -disable_fs_check By default, a filesystem check is performed to determine if the project directory sits on top of a large filesystem tree (more than 50000 children) or if the project directory is located on a slow filesystem (listing all the files takes more than 10 seconds). In such a situation, there is a high risk of running into refresh performance problems. To avoid this, the -include auto and -include first_level options are added automatically to the command. Use this flag to disable the filesystem check and the automatic injection of -include auto and -include first_level. -exclude|include  [name|location|projectRelativePath[_regex]=<pattern>,][root=folder1[:sub/folderN],][applies=f|d|rf|rd] or [symlink=[true|false],][root=folder1[:sub/folderN],][applies=f|d|rf|rd] Create resource filters. Use include to keep files or directories matching <pattern>. Use exclude to filter out files or directories matching <pattern>. Syntax details: [name|location|projectRelativePath[_regex]=]<pattern> If only <pattern> is specified it is equivalent with name=<pattern>. For <name|location|projectRelativePath>=<pattern>, the pattern is case insensitive and allows simple wildcards (* and ?). For <name_regex|location_regex|projectRelativePath_regex>=<pattern>, the pattern is case sensitive and allows regular expressions. symlink=true|false When symlink=true only symlinked resources are matched by the filter. When symlink=false only non-symlinked resources are matched by the filter. root=folder1[:sub/folderN] By default filter applies to project root children, unless you specify one or more roots. applies=f|d|fr|dr By default filter applies recursively to files and directories under root(s), unless you restrict it: f = filter applies only to _f_iles under root(s) d = filter applies only to _d_irectories under root(s) rf = filter applies _r_ecursively to _f_iles under root(s) rd = filter applies _r_ecursively to _d_irectories under root(s) For example, given this project hierarchy: | cli_resource_filters_example |-- .dvt | |-- default.build |-- folder_1 | |-- folder_1_1 | | |-- folder_1_1.log | | |-- some_file.sv | |-- folder_1_2 | | |-- folder_1_2.log | | |-- some_file.sv | |-- folder_1.log | |-- some_file.sv |-- folder_2 | |-- folder_2_1 | | |-- folder_2_1.log | | |-- some_file.sv | |-- folder_2_2 | | |-- folder_2_2.log | | |-- some_file.sv | |-- folder_2.log | |-- some_file.sv |-- .project |-- dvt_build.log * to exclude a sub-directory of the project, including all of its content: dvt_cli.sh -workspace ~/dvt_workspace createProject ~/projects/cli_resource_filters_example/ -lang VLOG -exclude projectRelativePath=folder_2,applies=d | cli_resource_filters_example |-- .dvt | |-- default.build |-- folder_1 | |-- folder_1_1 | | |-- folder_1_1.log | | |-- some_file.sv | |-- folder_1_2 | | |-- folder_1_2.log | | |-- some_file.sv | |-- folder_1.log | |-- some_file.sv |-- .project |-- dvt_build.log * to include only particular sub-directories of the project: dvt_cli.sh -workspace ~/dvt_workspace createProject ~/projects/cli_resource_filters_example/ -lang VLOG -include projectRelativePath=folder_1 -include projectRelativePath=folder_1/folder_1_1 -include projectRelativePath=folder_1/folder_1_1/* | cli_resource_filters_example |-- .dvt | |-- default.build |-- folder_1 | |-- folder_1_1 | | |-- folder_1_1.log | | |-- some_file.sv |-- .project * to exclude all the files which have their names matching a regular expression: dvt_cli.sh -workspace ~/dvt_workspace createProject ~/projects/cli_resource_filters_example/ -lang VLOG -exclude name_regex=.*.log,applies=rf | cli_resource_filters_example |-- .dvt | |-- default.build |-- folder_1 | |-- folder_1_1 | | |-- some_file.sv | |-- folder_1_2 | | |-- some_file.sv | |-- some_file.sv |-- folder_2 | |-- folder_2_1 | | |-- some_file.sv | |-- folder_2_2 | | |-- some_file.sv | |-- some_file.sv |-- .project The root parameter instructs the filter application to a relative point in the project hierarchy. * Suppose the case of removing some log files, but only starting with a certain point in the project hierarchy: dvt_cli.sh -workspace ~/dvt_workspace createProject ~/projects/cli_resource_filters_example/ -lang VLOG -exclude name_regex=.*.log,root=folder_2,applies=rf | cli_resource_filters_example |-- .dvt | |-- default.build |-- folder_1 | |-- folder_1_1 | | |-- folder_1_1.log | | |-- some_file.sv | |-- folder_1_2 | | |-- folder_1_2.log | | |-- some_file.sv | |-- folder_1.log | |-- some_file.sv |-- folder_2 | |-- folder_2_1 | | |-- some_file.sv | |-- folder_2_2 | | |-- some_file.sv | |-- some_file.sv |-- .project |-- dvt_build.log * If the case, you can also specify multiple roots for a filter (for example exclude all the log files in folder_1/folder_1_2 and folder_2): dvt_cli.sh -workspace ~/dvt_workspace createProject ~/projects/cli_resource_filters_example/ -lang VLOG -exclude name_regex=.*.log,root=folder_1/folder_1_2:folder_2,applies=rf | cli_resource_filters_example |-- .dvt | |-- default.build |-- folder_1 | |-- folder_1_1 | | |-- folder_1_1.log | | |-- some_file.sv | |-- folder_1_2 | | |-- some_file.sv | |-- folder_1.log | |-- some_file.sv |-- folder_2 | |-- folder_2_1 | | |-- some_file.sv | |-- folder_2_2 | | |-- some_file.sv | |-- some_file.sv |-- .project |-- dvt_build.log [NOTE]      Resource filters are also applied for linked resources (such as those created by -map) [NOTE]      You can specify any number of include or exclude filters. [NOTE]      Regardless the specified order, all the include filters will be applied before the exclude filters. [NOTE]      Do not use trailing slashes when specifying a directory pattern. [NOTE]      DVT provides a user interface for managing Resource Filters as a simpler and more intuitive alternative to the Eclipse built-in Resource Filters management UI. However, DVT's UI only works for <projectRelativePath> filters that do not contain wildcards or regular expressions. -f|-F             Specify a command file for the project. -f and -F are mutually exclusive. -force            Overwrite existing project. -git              Add the specified repositories to the Git Repositories View. A colon (:) separated list of repository paths must be provided. [NOTE]      Repository paths must include (end with) the /.git segment. -map              Create a linked resource called <link_name> pointing to <link_target>. -name             Use as project name instead of project's directory name. -newwindow        Open a new window with the working set selected. -openResourceFilterDialog Open the project's DVT Resource Filters dialog. -p4               Share project with Perforce Eclipse plugin. The <connection_parameters> argument must be specified as a list of <parameter>=<value> separated by commas. Mandatory parameters: P4PORT=<host:port> (P4PORT=company_server:1666) P4CLIENT=<perforce_workspace_name> (P4CLIENT=perforce-work) P4USER=<username> (P4USER user1) Optional parameters: P4CHARSET=<charset_type> (P4CHARSET=none) P4PASSWD=<password> (P4PASSWD=password123) SAVEPASS=<save_in_secure_storage_or_not> (SAVEPASS=false) OFFLINE=<working_offline_or_not> (OFFLINE=false) -perspective      Switch to <perspective> after creating the project. By default, DVT switches to the DVT Perspective if multiple -lang directives are provided. If a single language is enabled, the corresponding perspective is activated. Valid argument values: DVT, E, VLOG, VHDL, CPP, PSS, SLN, SDL, or a perspective ID. Perspective IDs provided by the additional plugins included in the DVT distro: JDT - org.eclipse.jdt.ui.JavaPerspective LUA - org.eclipse.ldt.ui.luaperspective PERL - org.epic.core.Perspective PYTHON - org.python.pydev.ui.PythonPerspective RUBY - org.eclipse.dltk.ruby.ui.RubyPerspective TCL - org.eclipse.dltk.tcl.ui.TclPerspective CVS - org.eclipse.team.cvs.ui.cvsPerspective GIT - org.eclipse.egit.ui.GitRepositoryExploring SVN - org.eclipse.team.svn.ui.repository.RepositoryPerspective PERFORCE - com.perforce.team.ui.perforcePerspective COLLABORATOR - com.smartbear.collaborator.ui.collabPerspective -svn              Share project with the Subversive SVN Eclipse plugin. The SVN repository URL must be provided. The repository is added to the SVN Repositories View if not existing. -test             Specify a test file for the project. You can specify this option multiple times. -top              Specify a top file for the project. You can specify this option multiple times. -workingset       Add project to a working set. -close_others     Close all projects in the workspace except the newly created one. See also Lazy Bring up Resources How to create resource filters ? Create a Project From an Existing Template createProjectFromTemplate <target_path> -template <template_path> Creates a project into the workspace from an existing project template . < target_path > absolute path to target directory < template_path > absoulute path of the project template Import an Existing Project importProject <project_path> [-workingset [-newwindow]] [-force] [-close_others] [-clearcase] [-git <repo1:repo2:...:repoN>][-p4 <connection_parameters>] Mandatory arguments: <project_path> absolute path to project Optional arguments: -force          Use this flag to overwrite an existing project with the same name but a different location. -clearcase      Share project with ClearCase Eclipse plugin. -git            Add the specified repositories to the Git Repositories View. A colon (:) separated list of repository paths must be provided. [NOTE]       Repository paths must include (end with) the /.git segment. -newwindow      Open a new window with the working set selected. -p4             Share project with Perforce Eclipse plugin. The <connection_parameters> argument must be specified as a list of <parameter>=<value> separated by commas. Mandatory parameters: P4PORT=<host:port> (P4PORT=company_server:1666) P4CLIENT=<perforce_workspace_name> (P4CLIENT=perforce-work) P4USER=<username> (P4USER user1) Optional parameters: P4CHARSET=<charset_type> (P4CHARSET=none) P4PASSWD=<password> (P4PASSWD=password123) SAVEPASS=<save_in_secure_storage_or_not> (SAVEPASS=false) OFFLINE=<working_offline_or_not> (OFFLINE=false) -svn            Share project with the Subversive SVN Eclipse plugin. The SVN repository URL must be provided. The repository is added to the SVN Repositories View if not existing. -workingset     Add project to a working set. -close_others   Close all projects in the workspace except the newly imported one. List Compiled Files listCompiledFiles - project < project_name > [ - unique ][ - dirs ][ - separator < separator > ][ - lang < lang > ] List all the files compiled in the specified project, in compilation order. -project    The project for which you want the list of compiled files. -unique     [Optional] Remove duplicates form the list. -dirs       [Optional] Get a list of parent directories of the compiled files instead of the files themselves. -separator  [Optional] Specify a custom separator for the list elements; default is newline. -lang       [Optional] List only the files compiled in <lang> language(s). You may specify this argument multiple times to select multiple languages. Valid argument values: E, VLOG, VHDL. If not specified, all compiled files are listed, regardless of language. Compare Files compareFiles [ <baseFile> ] <leftFile> <rightFile> [ -base <baseFile> ] [ -blocking ] Compares two or three files. -base       [Optional] Specify the base file for a three-way comparison. -blocking   [Optional] Block the console until the Eclipse Compare Editor is closed Launch a Run Configuration launchRunConfig [-blocking] [-debug] -name <run_config_name> Launch a Run Configuration -blocking   [Optional] return after the Run Configuration has completed -debug      [Optional] launch the Run Configuration in debug mode -name       Name of the Run Configuration to launch Open a File openFile < path_to_file > [ - line < line_number > ][ - project < project_name > ][ - showInNavigator ] Open the file denoted by <path_to_file> in the DVT editor. -line            [Optional] select and reveal the specified line in the editor; lines are counted from 1 -project         [Optional] try to open the file from the specified project If the file does not exist in the given project, it is opened from any other project in the workspace. If the file does not exist in any project, it is opened out of any context (limited DVT capabilities). -showInNavigator [Optional] reveal the specified file in the Eclipse Navigator View Close a File closeFile <path_to_file>[ -forceSave] Close the file denoted by <path_to_file> in the DVT editor. -forceSave  [Optional] save the file before closing the editor. If the file contains any unsaved changes and this option is not used, a save dialog will appear in DVT. Open a Custom Dialog openCustomDialog -file <path_to_swtxml> [-project <project_name>] [-nonblocking] Open a custom dialog and return the values that were filled in. -file         .swtxml file describing the custom dialog. Either an absolute path or a path relative to project root -project      [Optional] specify a project for the Custom Dialog -nonblocking  [Optional] dialog will not block the UI while opened (non-modal) Open a Perspective openPerspective <perspective_name> Open the specified perspective.\nThe perspective name may contain whitespace characters (for example \u00e2\u0080\u009ce Language\u00e2\u0080\u009d).\nNote: Preserves the UI focus across the perspective change. Refresh a Project refreshProject <project_name> [-subpath <subpath>] [-depth <depth>] Refresh a project or a <subpath> in a project. -subpath    [Optional] Only refresh <project_path>/<subpath>. May be a folder or a file. -depth      [Optional] Only refresh to the provided depth. By default the refresh depth is 2, that is full (recursive) refresh. Possible values for <depth> are: 2 the resource and its direct and indirect members at any depth 1 the resource and its direct members 0 the resource, but not any of its members Rebuild a Project rebuildProject <project_name> [-build <name>] Rebuilds the specified project. -build <name>     [Optional] Set <name> as active build configuration. Rebuild All Projects rebuildAllProjects Rebuilds all the projects in the workspace. Print Edited File printActiveEditorFile [-name_only] [-strip_extension] Prints the full path of the file opened in the active editor. -name_only        [Optional] Print only the filename. -strip_extension  [Optional] Strip the file extension, if any. Quit quit Quit DVT Query the running status status Query the running status of DVT. Print version version Print the DVT version number. Run Performance Exploration runXpl -project <project_name> -features <feature1:feature2:...:featureN> [-part <part>] [-filters <filter1:filter2:...:filter3>] [-generate_automatic_waivers -runtime <runtimeValue> -occurrences <occurencesValue>] Run Performance Exploration -project                    The project on which you want to run the Performance Exploration. -features                   The features you want to run the Exploration with (can be one of these three: hyperlink, incremental, content_assist). -part                       [Optional] By default the Performance Exploration will run on the whole project(default value: FULL), but can be set to one of these values: 1/5, 2/5, 3/5, 4/5, 5/5 meaning that it will run on the N-th fifth of the whole project. -filters                    [Optional] Filters you want to apply on the files from the selected project. -generate_automatic_waivers [Optional] This option enables creation of automatically generated waivers, 'runtime' and 'occurrences' options are mandatory when this tag exists -runtime                    [Optional] Set the minimum runtime(in milliseconds) of the current scope's feature execution which will trigger the creation of a generated performance waiver. -occurrences                [Optional] Set the minimum occurrences of the current scope which will trigger the creation of a generated performance waiver. -skip_recompiled_files      [Optional] By default, files compiled multiple times are analyzed on each occurrence. This option enables skipping on said files. Makefile Example Macros Support On this page Create a Project (Mixed-Language Capable) Create a Project From an Existing Template Import an Existing Project List Compiled Files Compare Files Launch a Run Configuration Open a File Close a File Open a Custom Dialog Open a Perspective Refresh a Project Rebuild a Project Rebuild All Projects Print Edited File Quit Query the running status Print version Run Performance Exploration Back to top",
    "section_path": [],
    "tokens": 2522,
    "source": "scraped"
  },
  {
    "id": "1311669d-4cfc-4b33-8389-79c7f202a3f6",
    "title": "Intel(Altera) Quartus Libraries Compilation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/altera-libraries-compilation.html",
    "content": "Intel(Altera) Quartus Libraries Compilation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Intel(Altera) Quartus Libraries Compilation In order to compile Intel(Altera) Quartus libraries: specify the required libraries using the +dvt_init_altera directive specify the Quartus installation path, unless $QUARTUS_ROOTDIR system variable is set For example: + dvt_init_altera + ALTERA + ALTERA_MF + dvt_setenv + QUARTUS_ROOTDIR =/ apps / altera / 13.0 sp1 / quartus The available VHDL libraries are ALTERA_MF, ALTERA, ALTERA_LNSIM, LPM, MAX, MAXII, MAXV, STRATIX, STRATIXII, STRATIXIIGX, HARDCOPYII, HARDCOPYIII, HARDCOPYIV, CYCLONE, CYCLONEII, CYCLONEIII, CYCLONEIIILS, SGATE, STRATIXGX, ALTGXB, STRATIXGX_GXB, STRATIXIIGX_HSSI, ARRIAGX_HSSI, ARRIAII, ARRIAII_HSSI, ARRIAII_PCIE_HIP, ARRIAIIGZ, ARRIAIIGZ_HSSI, ARRIAIIGZ_PCIE_HIP, ARRIAGX, STRATIXIII, STRATIXIV, STRATIXIV_HSSI, STRATIXIV_PCIE_HIP, CYCLONEIV, CYCLONEIV_HSSI, CYCLONEIV_PCIE_HIP, CYCLONEIVE, HARDCOPYIV_HSSI, HARDCOPYIV_PCIE_HIP, STRATIXV, STRATIXV_HSSI, STRATIXV_PCIE_HIP, ARRIAVGZ, ARRIAVGZ_HSSI, ARRIAVGZ_PCIE_HIP, ARRIAV, CYCLONEV. The available Verilog libraries are ALTERA_MF_VER, ALTERA_VER, ALTERA_LNSIM_VER, LPM_VER, MAX_VER, MAXII_VER, MAXV_VER, STRATIX_VER, STRATIXII_VER, STRATIXIIGX_VER, ARRIAGX_VER, HARDCOPYII_VER, HARDCOPYIII_VER, HARDCOPYIV_VER, CYCLONE_VER, CYCLONEII_VER, CYCLONEIII_VER, CYCLONEIIILS_VER, SGATE_VER, STRATIXGX_VER, ALTGXB_VER, STRATIXGX_GXB_VER, STRATIXIIGX_HSSI_VER, ARRIAGX_HSSI_VER, ARRIAII_VER, ARRIAII_HSSI_VER, ARRIAII_PCIE_HIP_VER, ARRIAIIGZ_VER, ARRIAIIGZ_HSSI_VER, ARRIAIIGZ_PCIE_HIP_VER, STRATIXIII_VER, STRATIXIV_VER, STRATIXIV_HSSI_VER, STRATIXIV_PCIE_HIP_VER, STRATIXV_VER, STRATIXV_HSSI_VER, STRATIXV_PCIE_HIP_VER, ARRIAVGZ_VER, ARRIAVGZ_HSSI_VER, ARRIAVGZ_PCIE_HIP_VER, ARRIAV_VER, ARRIAV_HSSI_VER, ARRIAV_PCIE_HIP_VER, CYCLONEV_VER, CYCLONEV_HSSI_VER, CYCLONEV_PCIE_HIP_VER, CYCLONEIV_VER, CYCLONEIV_HSSI_VER, CYCLONEIV_PCIE_HIP_VER, CYCLONEIVE_VER, HARDCOPYIV_HSSI_VER, HARDCOPYIV_PCIE_HIP_VER. Precompilation support for Intel(Altera) Quartus Libraries By default, the Verilog/SystemVerilog Intel(Altera) Quartus Libraries are automatically precompiled in order to speed up the full build of the project. Note To disable the default precompilation of Intel(Altera) Quartus Libraries you can use the +dvt_disable_library_precompilation+ALTERA directive. Xilinx Libraries Compilation Questa Libraries Compilation On this page Precompilation support for Intel(Altera) Quartus Libraries Back to top",
    "section_path": [],
    "tokens": 256,
    "source": "scraped"
  },
  {
    "id": "719d0494-4f7e-482d-b982-d7607f7dad7b",
    "title": "Protecting Code | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/protecting-code.html",
    "content": "Protecting Code | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Protecting Code To avoid sending sensitive information to an LLM, you can use the AI Assistant protect file. Each line in the protect file defines a pattern, specifying which files should or should not be protected. Content from protected files will be omitted from @snippet and #symbol expansion. Attention Content that is pasted or manually entered into the chat will not be safeguarded by this mechanism. AI Assistant looks for the protect file in: <project>/.dvt/ai/protect . Pattern Format Patterns match against either absolute or relative paths. Those beginning with a / on Linux and MacOS, or a drive specifier on Windows, will match agains the absolute path. All other patterns will match agains the project relative path. * Matches zero or more characters without crossing directory boundaries. ** Matches zero or more characters crossing directory boundaries. ? Matches exactly one character. [ ] Matches a single character out of a set of characters. For example, [abc] matches a , b , or c . Hyphen - may be used to specify a range. For example, [a-z] matches from a to z (inclusive). Exclamation mark ! at the beginning of a set may be used for negation. For example, [!a-c] matches any character except a , b , or c . {pattern1,pattern2} Groups patterns separated by comma , . Groups cannot be nested. \\ Escapes one of the following characters: * , ? , \\ , [ , ] , { , } , if a file or directory name contains them. This only applies to paths on Unix-like systems . On Windows, \\ is used as separator in file paths. $VAR or ${VAR} Expands to environment variable value. !pattern Negates the pattern. Any matching path protected by a previous pattern will become unprotected again. #comment Comment lines and empty lines are ignored. Examples Protect files from specific directories and their descendents: # protect all files from a specific directory relative to the project root lib/ip1/rtl/** # protect all files from a specific directory in the filesystem /path/to/ip/store/ip1/rtl/** # protect all files in any directory named 'secret' **/secret/** # protect all files in the user home directory $HOME/** Protect everything except files inside a specific directory and its descendents: # protect all files ** # do not protect files inside 'public' directory !/path/to/public/** Protect all files except those with specific extensions: # protect all files ** # do not protect files with these extensions !**/*.{sv,svh} Code Completion Reference On this page Pattern Format Examples Back to top",
    "section_path": [],
    "tokens": 448,
    "source": "scraped"
  },
  {
    "id": "15c437db-3546-4616-b331-d1023b9307b6",
    "title": "Multiple .build Files | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/multiple-build-files.html",
    "content": "Multiple .build Files | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Multiple .build Files You can have multiple build files inside the .dvt directory, and tell DVT which one to use for compilation by using the Set current build button from the toolbar: The current build name is saved in the .dvt/build.config.xml file. The project state is saved per build file after each build, and this allows you to easily switch between multiple views of the project (see Build Persistence for more information). Use cases Depending on your current focus (browsing the design, writing testbench code, debugging) you only want to load in DVT the relevant code rtl.build contains all directives needed to compile the design testbench.build contains all the directives needed to compile the verification environment default.build includes both the rtl.build and testbench.build Quickly switch between synthesizable and non-synthesizable version of the design hierarchy default.build contains all directives needed to compile all the code synth.build contains +dvt_preprocess_translate_pragmas+synthesis and a -f directive to include default.build You switch often between several versions of the same code base. The paths to the few different files are controlled by the $VERSION environment variable. compile.f contains directives needed to compile all the code version1.build contains +dvt_setenv+VERSION=1 and a -f directive to include compile.f version2.build contains +dvt_setenv+VERSION=2 and a -f directive to include compile.f \u00e2\u0080\u00a6 You want to change the active build before launching DVT, as designers compile just the RTL by rtl.build, while others all.build. Change the build name in .dvt/build.config.xml before launching DVT, for example by a wrapper script run_dvt.sh -rtl . Emulating compiler invocations Compatibility Modes Back to top",
    "section_path": [],
    "tokens": 289,
    "source": "scraped"
  },
  {
    "id": "dc280478-ecbf-4977-9497-49c680a7c644",
    "title": "Compile Waivers | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/compile-waivers.html",
    "content": "Compile Waivers | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Compile Waivers You can use waivers to change the severity (promote/demote) or disable the problems reported by DVT during compilation. Promote Warning -> Error Demote Error -> Warning Disable Hide Restore Restore a waived problem to its default (originally reported) severity Waivers are applied in order.\nMultiple waivers may be applied to the same problem. Waivers are defined per project, in the .dvt/waivers.xml file. For more flexibility, on top of the project level compilation waivers, DVT allows you to use compilation waiver files specific to a build configuration. To do that, simply add in the build configuration file the +dvt_compile_waivers_file+ directive followed by the path to the desired file. To quickly create a waivers file click on the Edit waivers button in the Problems View . The .dvt/waivers.xml is created with a default content and opened. You can easily create your own waivers from the default generated ones. In the waivers editor you can use autocomplete for tags, attributes and attribute values. To quickly create a new waiver, in the Problems View right click on any problem reported by DVT and waive it. DVT proposes some default values for the waiver file, description, path and message. You can easily change them to fine-tune the waiver. Another easy way to create a new waiver right from the editor is by using Waive Compilation Problems . You can include other waiver files using: < include path = \"/path/to/included_waivers.xml\" /> The path can be absolute or relative to the project root, and can use environment variables. Compile Waivers Examples Use Case Solution I want to hide all problems from a library that I do not control. < waiver name = \"Disable all from library folder.\" severity = \"DISABLED\" > < match path = \"/path/to/library/*\" /> </ waiver > I want to hide some errors that I don\u00e2\u0080\u0099t care about. < waiver name = \"Disable all that match a specific message pattern.\" severity = \"DISABLED\" > < match message = \"*some message pattern*\" /> </ waiver > I want to turn NON_STANDARD warnings into errors. < waiver name = \"Promote NON_STANDARD warnings to errors.\" severity = \"ERROR\" > < match message = \"NON_STANDARD*\" /> </ waiver > I want to see only the problems reported on files in a specific directory. Create a waiver to disable all problems: < waiver name = \"Disable all\" severity = \"DISABLED\" > < match path = \"*\" /> </ waiver > After it, create a waiver to restore the severity of the problems inside a specific path: < waiver name = \"Restore my problems\" severity = \"DEFAULT\" > < match path = \"/my/path\" /> </ waiver > I want to hide some DVT false alarms until the issue causing them is fixed. Use a message based and/or path based waiver. Each problem message is in the form: <CHECK_ID>: <Failure Details> or, for Non-top files : _<CHECK_ID>: <Failure Details> See Semantic Checks for a complete list of all checks and their identifiers. This allows you to change the severity by check id using a waiver like: <waiver name=\u00e2\u0080\u009dDisable all <CHECK_ID>\u00e2\u0080\u009d severity=\u00e2\u0080\u009dDISABLED\u00e2\u0080\u009d> Compile Waivers File Syntax (XML) <!-- XML file header; required. --> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE waivers PUBLIC \"-//DVT//waivers\" \"waivers.dtd\" > <!-- Root tag; required. Version attribute is required. The latest syntax version, illustrated by this example, is version 1. --> <waivers version= \"1\" > <!-- You can include waivers from other waiver files. The syntax of the included files is the same as the one presented below. You may use environment variables in the path to the included waiver files. You can use either an absolute path or a relative path. If no file matches the path relative to the project's location, DVT will try to resolve it relative to the folder containing the including file. --> <include path= \"$COMMON/path/to/included_waivers.xml\" /> <!-- The waiver tag must specify the NEW severity of the problems waived by this waiver; it can be one of ERROR, WARNING, DISABLED or DEFAULT. --> <waiver name= \"Optional short name of the waiver\" severity= \"DISABLED\" > <description> An optional verbose description of the waiver. </description> <!-- Each waiver must contain at least one match tag. Each match tag can specify any combination of the following attributes: message pattern, path pattern, default-severity. Any omitted attribute is implicitly matched. A match tag without any attributes will match all problems. A match tag matches a problem if ALL specified patterns and the default-severity match. The waiver will waive a problem if ANY of the match tags matches. NOTE: path pattern is matched against the problem's full path (NOT the project relative path) default-severity is matched against the problem's initial reported severity patterns may contain * or ? wildcards --> <match message= \"pattern to match against the problem's message\" path= \"/pattern/to/match/against/the/problems/absolute/path\" /> <match message= \"*message pattern*\" path= \"/path/pattern*\" /> <match message= \"*only by message*\" /> <match path= \"/only/by/path*\" /> <match path= \"/all/warnings/in/path/*\" default-severity= \"WARNING\" /> </waiver> <!-- Further example waivers --> <waiver name= \"Disable by message\" severity= \"DISABLED\" > <description> This waiver disables all problems containing 'JUST_A_FOO_PROBLEM' inside their message. </description> <match message= \"*JUST_A_FOO_PROBLEM*\" /> </waiver> <waiver name= \"Demote by path\" severity= \"WARNING\" > <description> This waiver turns into warnings all problems reported under '/path/to/foo' </description> <match path= \"/path/to/foo/*\" /> </waiver> <waiver name= \"Promote by path OR message\" severity= \"ERROR\" > <description> This waiver turns into errors all problems that contain 'JUST_A_FOO_PROBLEM' inside their message OR were reported under '/path/to/foo'. </description> <match message= \"*JUST_A_FOO_PROBLEM*\" /> <match path= \"/path/to/foo/*\" /> </waiver> <waiver name= \"Disable by path AND message\" severity= \"DISABLED\" > <description> This waiver disables all problems that contain 'JUST_A_FOO_PROBLEM' inside their message AND were reported under '/path/to/foo'. </description> <match message= \"*JUST_A_FOO_PROBLEM*\" path= \"/path/to/foo/*\" /> </waiver> </waivers> Note Backslashes \\ are always treated as path separators, regardless of the OS. Therefore, you cannot use \\? and \\* to escape wildcards. Compile Checks Semantic Checks On this page Compile Waivers Examples Compile Waivers File Syntax (XML) Back to top",
    "section_path": [],
    "tokens": 1020,
    "source": "scraped"
  },
  {
    "id": "6959b9f7-a91d-4e5b-908b-1a824b461524",
    "title": "Search for Members | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/search-for-members.html",
    "content": "Search for Members | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Search for Members In addition to Hierarchical Search , you can use a member pattern after the dot \u00e2\u0080\u0098.\u00e2\u0080\u0099 character to search for types or instances that contain specific members (for example methods, ports, events, etc). The members that match the member pattern are promoted to the top of the members pane. Search for port example No filter. Filter: .sleep Search by port name. All instances with ports that contain the search pattern are shown. Filter: sec/.sleep Search by hierarchy and port name. Hierarchical searching and port searching can be combined. Search for method example No filter. Filter: .collect Search by member name. All types with members that contain the search pattern are shown. Filter: gpio/.collect Search by hierarchy and member name. Hierarchical searching and member searching can be combined. Hierarchical Search Search Port in Design Hierarchy Back to top",
    "section_path": [],
    "tokens": 173,
    "source": "scraped"
  },
  {
    "id": "f221b89a-5cf3-4c88-8f93-3787e67890b8",
    "title": "Install DVT Using a pre-packed Distribution | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/installation/distribution.html",
    "content": "Install DVT Using a pre-packed Distribution | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Install DVT Using a pre-packed Distribution The recommended way of installing DVT is by using a pre-packed distribution available on the site under the Download page. For Linux distributions you can choose one of the 4 distribution flavors depending on the GTK version installed in your OS: Eclipse 4.22 - requires GTK+ 3.22.0 Eclipse 4.19 - requires GTK+ 3.22.0 Eclipse 4.11 - requires GTK+ 3.10.0 Eclipse 4.7 - requires GTK+ 2.24.0 or GTK+ 3.0.0 Eclipse 4.6 - requires GTK+ 2.18.0 or GTK+ 3.0.0 Installation Checklist Install DVT Using the Update Site Back to top",
    "section_path": [],
    "tokens": 130,
    "source": "scraped"
  },
  {
    "id": "e1088a26-b2f4-4f31-ab6f-2f6c3fc62d8d",
    "title": "Linked Resources | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/getting-started/workspace/linked-resources.html",
    "content": "Linked Resources | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Linked Resources Linked resources are very similar with file system links, except they are registered in the .project file, not created on the disk . To create a linked resource, right click on the project in the Project Explorer view and select from the pop-up menu New \u00e2\u0080\u00a3 Linked Resource . In the wizard you must specify the path the link will point to (for example /apps ) and the linked directory name (for example apps ): Target : the file system path the link will point to; Name : the linked directory\u00e2\u0080\u0099s name; Location : location (inside the selected project) where the link directory will be created. Tip You can also use system variables in the path, for instance: ${DVT_ENV-SYSTEM_VARIABLE_NAME}/work equivalent to $SYSTEM_VARIABLE_NAME/work in a terminal. This way you can share the project with your team and the linked folders will work seamlessly. Note When you press Finish , if the directory the link points to is too big (for example it has more than 3000 children), a Resource Filter dialog will pop-up. You can use it to exclude those children that you don\u00e2\u0080\u0099t need and that may slow down the platform (you can find out more about it at How to create resource filters ? ). Linked resources will appear in the Navigator with a small \u00e2\u0080\u009clink\u00e2\u0080\u009d icon: Tip You can also use drag & drop from a filesystem navigator (like Nautilus in Gnome, Dolphin in KDE or Explorer in Windows): drag the external folder and drop it on the desired target location (Project or Folder) in the Navigator View. In the dialog that pops-up specify that you want to \u00e2\u0080\u009cLink to files and folders\u00e2\u0080\u009d. A linked resource will be automatically created. See also What is a Workspace What is a Project Refresh Backup and Local History Back to top",
    "section_path": [],
    "tokens": 334,
    "source": "scraped"
  },
  {
    "id": "a9800419-240f-4112-811e-a86663313b5a",
    "title": "e Language SPECMAN_PATH | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/e-language-specman_path.html",
    "content": "e Language SPECMAN_PATH | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide e Language SPECMAN_PATH The SPECMAN_PATH environment variable is used by the e Language parser to find imported files.\nIt comprises of a list of search directories, separated by the OS-specific path separator character (\u00e2\u0080\u0098:\u00e2\u0080\u0099 colon on Linux and \u00e2\u0080\u0098;\u00e2\u0080\u0099 semicolon on Windows). It can be defined or altered by using the +dvt_setenv+ directive. When relative paths are provided, they are automatically transformed into paths relative to the compilation root directory. By default the compilation root is the project directory. For more details see Paths . Examples: Action Linux Windows Define/overwrite shell-inherited value +dvt_setenv+SPECMAN_PATH=/my/specman/path1:/my/specman/path1 +dvt_setenv+SPECMAN_PATH=/my/specman/path1;/my/specman/path1 Append to shell-inherited value +dvt_setenv+SPECMAN_PATH=$SPECMAN_PATH:/my/specman/path +dvt_setenv+SPECMAN_PATH=$SPECMAN_PATH;/my/specman/path Prepend to shell-inherited value +dvt_setenv+SPECMAN_PATH=/my/specman/path:$SPECMAN_PATH +dvt_setenv+SPECMAN_PATH=/my/specman/path;$SPECMAN_PATH Append <project_root>/e directory to the SPECMAN_PATH +dvt_setenv+SPECMAN_PATH=$SPECMAN_PATH:e +dvt_setenv+SPECMAN_PATH=$SPECMAN_PATH;e Backward-compatibility note: starting with DVT version 3.2, if a .build file is used to configure the project, the .edt_specman_path file is ignored. Adding VIPs to $SPECMAN_PATH using sn_which.sh You can specify a list of VIPs that should automatically be located by DVT using sn_which.sh and added to the $SPECMAN_PATH (if available in the console where DVT was started). The Specman version defines (e.g define SPECMAN_VERSION_###) are also detected using the same mechanism. By default, the following VIPs are located and added automatically: evc_util, vr_ad, ovm_e, uvm_e e Language Test Files SystemVerilog OVM or UVM Library Compilation On this page Adding VIPs to $SPECMAN_PATH using sn_which.sh Back to top",
    "section_path": [],
    "tokens": 255,
    "source": "scraped"
  },
  {
    "id": "33b5aecf-d860-4cc8-b296-b3d338d90af3",
    "title": "UVM Field Editor | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/uvm-field-editor.html",
    "content": "UVM Field Editor | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Field Editor The UVM Field Editor enables you to inspect and edit UVM field registrations. It allows you to quickly add, remove and edit the registration macros and presents field statistics (total no. of fields, no. of registered fields, no. of warnings/errors). Triggering Triggering the UVM Field Editor for a certain class: place the cursor anywhere inside the class definition, right click and select Source \u00e2\u0080\u00a3 UVM Field Editor from the pop-up menu. If you place the cursor on a field, the UVM Field Editor will show up with the respective field selected. If there are no previously registered macros, the uvm_*_utils_begin and uvm_*_utils_end macros shall be determined based on the class found at the cursor position. For a class that inherits from uvm_sequence , a pop-up dialog will ask you to select the desired sequencer from the available ones. Interface On the left side of the Field Editor Dialog there is a list containing all the fields in the class. You can register/unregister the class by clicking on the checkbox in the Class group. When the class is registered you can register or unregister fields by checking the corresponding checkboxes. When selecting a field you can also find information about the macro used for registration in the UVM Registration Macro group. If it\u00e2\u0080\u0099s not the desired macro you can fix it using the Fix button. On the right side you can see the flag status of the registered fields. Its main features are highlighted and explained below: Summary information regarding registrations: no. of registered fields, total no. of fields in class, no. of errors, no. of warnings. Content Filters matched indication Class checkbox that allows you to toggle the registration state. Field type Field name Field icon. The field icons have the following meanings: Icon Meaning The class is not registered The class is registered The field is a virtual interface The field is instantiated and is a UVM Component The field is instantiated and is a UVM Object The field is a port The field is an array The field is not registered. The field is registered. The field is registered and affected by a warning. The field is registered and affected by an error. Field registration checkbox that allows you to toggle the registration state. Select/Deselect all buttons. Used to register/unregister all the fields in a class. Fix button. Used to fix a macro registration if the right one isn\u00e2\u0080\u0099t used The UVM Registration Macro that is currently used for the selected field. Message area: displays error/warning messages. Field operation checkbox. If checked, the flag will be added to the registration. Field operation controls: allow you to select / clear all of the checkboxes. Print radix radio button. If checked, the radix will be set in the registration. At most one radix can be specified. Tooltip: hover with the mouse pointer any field operation checkbox or print radix radio button to obtain information about the flag. Clear print radix: allows you to unset the print radix (set all radio buttons off). Problems UVM Field Editor reports the following problems: Message Severity This field is registered with <current_macro_name> instead of <macro_determined_by_dvt> Error Radix flag is specified more than once. Error The flags for the field registration are incorrectly specified. They should be OR-ed together using | (pipe character). Error DVT could not determine a registration macro for this field. uvm_field_object will be used. Warning Tips Shortcut You can quickly trigger by using Alt + Shift + G . Fixing problems To fix a problem, press the Fix button if it\u00e2\u0080\u0099s a wrong registration macro or unregister and register the field. Note Registering and unregistering the field will reset the flags/registration macro. Multiple selection You can\u00e2\u0080\u0099t use multiple selection to perform registration/unregistration of more fields. Note If you want you can register/unregister all the fields using the Select/Deselect all buttons. UVM Content Filters UVM Runtime Elaboration On this page Triggering Interface Problems Tips Back to top",
    "section_path": [],
    "tokens": 691,
    "source": "scraped"
  },
  {
    "id": "2ceb6c5d-5e38-4604-b81f-ee2ea70f88df",
    "title": "Examples | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/settings-management/examples.html",
    "content": "Examples | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Examples To understand how settings from all levels are merged we can use the following layout for common, user and project levels: > common_settings/ > waivers.xml > preferences.ini > eclipse.ini > run_sim.launch > user_settings/ > preferences.ini > run_compile.launch > project/ > .dvt/ > \u00e2\u0080\u00a6\u00e2\u0080\u00a6\u00e2\u0080\u00a6.. > waivers.xml DVT is invoked using the following command: dvt . sh - heap_size 4096 m For the above example DVT will start using the flags specified in the common level eclipse.ini but the memory allocation threshold will be the one specified in the command (4096 MB) because the command line arguments have precedence. The DVT session will contain the run_sim run configuration and also the run_compile run configuration because these are accumulated from all levels. Workspace preferences will result from merging the preferences.ini from both common and user levels but if there are any conflicts the user level preferences will have precedence. Non-conflicting preferences are accumulated from both levels. When operating on the opened project, the compilation problems will be waived using the accumulated waivers from common level and project level (project/.dvt/waivers.xml). Use Cases Deprecated Settings Management (before DVT 3.5) Back to top",
    "section_path": [],
    "tokens": 219,
    "source": "scraped"
  },
  {
    "id": "475737e7-0d26-437b-abf0-15c350d06f59",
    "title": "Legal Notices | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/legal/index.html",
    "content": "Legal Notices | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Legal Notices Copyright (C) 2005-2025 AMIQ EDA s.r.l. (AMIQ). All rights reserved. License: This product is licensed under the AMIQ\u00e2\u0080\u0099s End User License Agreement (EULA). Trademarks: The trademarks, logos and service marks contained in this document are the property of AMIQ or other third parties. AMIQ\u00e2\u0084\u00a2, DVT IDE\u00e2\u0084\u00a2, Verissimo Linter\u00e2\u0084\u00a2, Specador Documentation Generator\u00e2\u0084\u00a2 are trademarks of AMIQ. Eclipse\u00e2\u0084\u00a2 and Eclipse Ready\u00e2\u0084\u00a2 are trademarks of Eclipse Foundation, Inc. All other trademarks are the property of their respective holders. Restricted Permission: This publication is protected by copyright law. AMIQ grants permission to print hard copy of this publication subject to the following conditions: The publication may not be modified in any way. Any authorized copy of the publication or portion thereof must include all original copyright, trademark, and other proprietary notices and this permission statement. Disclaimer: This publication is for information and instruction purposes. AMIQ reserves the right to make changes in specifications and other information contained in this publication without prior notice. The information in this publication is provided as is and does not represent a commitment on the part of AMIQ. AMIQ does not make, and expressly disclaims, any representations or warranties as to the completeness, accuracy, or usefulness of the information contained in this document. The terms and conditions governing the sale and licensing of AMIQ products are set forth in written agreements between AMIQ and its customers. No representation or other affirmation or fact contained in this publication shall be deemed to be a warranty or give rise to any liability of AMIQ whatsoever. How to Report an Issue? Third Party Licenses Back to top",
    "section_path": [],
    "tokens": 299,
    "source": "scraped"
  },
  {
    "id": "2e0dd9ac-9bc9-4a2a-a4a0-2e5d01342a90",
    "title": "Debug Specific Configurations | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/debugger-integration/debug-specific-configurations.html",
    "content": "Debug Specific Configurations | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Debug Specific Configurations In Debug Mode two more tabs are available for a launch configuration: Connection where you can control: the Message timeout - when a message to the simulator is dropped, if not answered the Delta Between Messages - the delay between two consecutive messages sent to the simulator. You can tune this parameter depending on your platform performance or network latency. Source where you can control where to search for the source files whenever the debugger stops. Watch Expressions Custom Dialogs Back to top",
    "section_path": [],
    "tokens": 119,
    "source": "scraped"
  },
  {
    "id": "c867a08f-d01c-49e1-81f8-349ddff88c78",
    "title": "Expand .* Port Connections | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/expand--port-connections.html",
    "content": "Expand .* Port Connections | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Expand .* Port Connections You can easily expand .* wildcard named port connections to explicit named port connections. Place the editor cursor either on a module or interface instance declaration and press Ctrl + 1 , select Expand .* port connections from the list of quick assist proposals and press Enter . The .* connections are expanded to named port connections. Note You can customize the look and feel of the explicit named port connections from Window > Preferences > DVT > SystemVerilog > Editor > Content Assist . Tip You can also Right + Click in the editor and go to Refactor > Expand .* Port Connections . Connect Instance Ports by Position Extract to Variable Back to top",
    "section_path": [],
    "tokens": 154,
    "source": "scraped"
  },
  {
    "id": "b6e6ae0d-97e3-4837-9c1e-2c623b3f4557",
    "title": "Settings Management | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/settings-management/index.html",
    "content": "Settings Management | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Settings Management DVT allows you to customize various settings from memory allocation thresholds to run configurations or editor specific preferences like tab width and code templates. Starting with version 3.5, DVT provides an out of the box mechanism that simplifies settings management. Settings are organized in several precedence levels in order to allow a fine-grained control: Project level settings are stored in <project>/.dvt directory User level setting are stored by default in $HOME/.dvt/settings , the location can be customized using $DVT_USER_SETTINGS system variable Common level settings are not stored by default, the location can be customized using $DVT_COMMON_SETTINGS system variable The order of precedence (starting with the higher one) is: Project level User level Common level In order to reuse a specific setting, for example from project level to user level, all you have to do is copy it from the project level specific file to the user level specific file. In similar way you can move settings from user to common level for team or company wide reuse. Managed Settings Unmanaged Settings User and Common Settings Location Use Cases Memory Allocation Thresholds Workspace Preferences Run Configurations Compile Waivers Content Filters External Builders Export HTML Documentation Custom Pragmas Examples Deprecated Settings Management (before DVT 3.5) Workspace Settings Project Settings Other Settings Importing Preferences From a Different Workspace Using Import/Export Wizard Using dvt.sh Script Manually Customizing Default Settings Using dvt.ini Show Changed Preferences Dialog Changing the Default dvt.ini Using a User Customized dvt.ini VMM Templates Managed Settings Back to top",
    "section_path": [],
    "tokens": 281,
    "source": "scraped"
  },
  {
    "id": "5406ad70-a4fa-4e3c-982c-53e6bd33d94c",
    "title": "Custom Dialogs | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/custom-dialogs/index.html",
    "content": "Custom Dialogs | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Custom Dialogs You can easily create your own dialogs or wizards and integrate them with scripts and flows using DVT Custom Dialogs. Create a Dialog A Custom Dialog is defined in a file with the .swtxml extension (see #1 below) using SWT/XML Syntax . To simplify dialog creation, DVT includes: a SWT/XML Editor (highlight, structure, autocomplete by Ctrl+Space \u00e2\u0080\u00a6) (see #2 below) a SWT/XML Preview View for previewing the edited dialog (see #3 below) Open a Dialog A Custom Dialog can be opened from any Run Configuration by using the ${dvt_dialog_prompt:path_to_dialog.swtxml} variable. This variable takes as an argument the dialog descriptor file. The path to the *.swtxml file can be specified, in order of precedence, either as an absolute path, as a path relative to the location of the run configuration file or as a path relative to the project. When the run configuration is executed, the ${dvt_dialog_prompt:path_to_dialog.swtxml} variable is replaced with the string produced by the dialog (i.e. the dialog output ). For example you can use the following command in a DVT Generic run configuration: sh -c \"echo ${dvt_dialog_prompt:path_to_dialog.swtxml}\" By default, the dialog blocks any interaction with the other application windows. To prevent this, for example in order to copy & paste text from an editor into the dialog, use the non-blocking argument, like this: sh -c \"echo ${dvt_dialog_prompt:non-blocking:path_to_dialog.swtxml}\" Note Please be aware that when using {dvt_dialog_prompt:non-blocking} you should have the Launch in background option (on the Common tab) unset. You can also open a dialog using the Command Line Interface . A dialog looks like this: Use the Dialog Output The dialog output is a string composed by concatenating the output of each widget that has an id attribute specified. The output of a widget is its id concatenated with its value. The value differs across widgets, see Widgets . For example a Directory Chooser defined like this: <dvt:DirectoryChooser id= \"+incdir+\" value= \"/path/to/some/dir\" /> will produce: + incdir +/ path / to / some / dir See Customizing the Dialog Output for more customization options. You can find some comprehensive examples in the DVT Predefined Projects shipped with DVT. You can start with an example dialog containing all the available widgets from menu New \u00e2\u0080\u00a3 Example \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 DVT Custom Dialog . Quick Steps Customizing the Dialog Output SWT/XML Reference Layouts Widgets Custom Dialog Snapshots Custom Dialog Snapshots File Syntax (XML) Debug Specific Configurations Quick Steps Back to top",
    "section_path": [],
    "tokens": 435,
    "source": "scraped"
  },
  {
    "id": "954a90ee-ad31-44f2-a2ae-a1264eea5009",
    "title": "Refactoring Scripts | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/refactoring-scripts.html",
    "content": "Refactoring Scripts | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Refactoring Scripts In some situations - like porting code from a library to another, or when dealing with cross-project API refactoring - one has to perform several refactoring operations for many projects. DVT can help you automate such operations by providing scripted refactoring functionality. Refactoring scripts are XML files that describe a set of changes to be performed for a project (into source code, scripts or file/directory names). For instance, such a script can describe all the changes to be applied to a source base for migration between OVM and UVM libraries. Writing a Refactoring Script Below there is a thoroughly commented example script to illustrate the XML syntax used by the scripting engine. XML header and DTD specification on the first lines. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE refactor-script PUBLIC \"-//DVT//refactor-script\" \"refactor-script.dtd\" > Start of refactoring script content. The script name is displayed in visual controls. < refactor - script version = \"1\" name = \"My refactoring script\" > You can specify exceptions , i.e. paths that will not be affected by the refactoring. Paths are absolute or relative to the project root. You can specify both files and folders. For a folder, all files in it and in all its subfolders will be skipped. < exception kind = \"path\" path = \"skipme\" /> It is advised to exclude sensitive project configuration files, for example: < exception kind = \"path\" path = \".project\" /> Actual refactoring directives are called items . There are several kinds of items, differentiated by the action they perform. When writing a script, one must be careful not to have item collisions: situations when the same piece of text is modified by more than one item. Here are examples that illustrate all the actions currently available in DVT. replace-in-text : perform plain textual search & replace for all the text files in the project like source files, scripts etc. Note that the search string is case sensitive. < item action = \"replace-in-text\" search = \"ovm\" replacement = \"uvm\" /> replace-in-file-name and replace-in-dir-name : perform plain textual search & replace in the names of all files/folders within the project. < item action = \"replace-in-file-name\" search = \"ovm\" replacement = \"uvm\" /> < item action = \"replace-in-dir-name\" search = \"ovm\" replacement = \"uvm\" /> rename all occurrences of the specified element (declaration and usages). The element-full-name uniquely identifies a SystemVerilog language element, and should be specified as follows: for macros, the name of the macro preceded by a backtick, just like a macro call < item action = \"rename\" element - full - name = \"`my_macro\" newname = \"`my_macro_new_name\" /> for types, modules, methods, etc., the name of the element, preceded by the names of its enclosing elements, including the package (if it\u00e2\u0080\u0099s the case) < item action = \"rename\" element - full - name = \"my_pkg::my_class\" newname = \"my_class_new_name\" /> Note that the newname is just the name of the element. Here are some more examples: < item action = \"rename\" element - full - name = \"my_library.my_module.my_task\" newname = \"my_task_new_name\" /> < item action = \"rename\" element - full - name = \"outer_class.inner_class.my_function\" newname = \"my_function_new_name\" comment = \"XXX: API change. Function renamed from my_function to my_function_new_name.\" /> In the last example, outer_class is not inside any package (it\u00e2\u0080\u0099s in the global scope). Also, you can optionally specify a comment that will be inserted on the line above the occurence. If the comment contains a Reminders (TODO Markers) (like TODO , FIXME , XXX or a custom defined one), after refactoring is completed you can use the Tasks View to inspect action items or notes automatically added by the refactoring. add-comment : to each occurrence of the specified element. The comment will be inserted on the line above the occurrence. < item action = \"add-comment\" element - full - name = \"my_type.foo\" comment = \"FIXME: function removed from my_type API\" /> You can also specify whether you want to add comments only to the element declaration or only to its usages : < item action = \"add-comment\" apply - to = \"declaration\" comment = \" @deprecated API\" element - full - name = \"my_class.deprecated_function\" /> For add-comment items you can specify a set of elements that shall be affected by the refactoring (instead of specifying a single element via element-full-name ) using a declaration comment pattern matcher and optionally a path matcher: < item action = \"add-comment\" comment = \" FIXME: usage of deprecated ${element-signature}\" apply - to = \"usages\" element - comment - matches = \"*@deprecated*\" element - path - matches = \"*/my_vip/*\" /> You can also use the element-comment-matches-not to invert the logic of the matcher. Both element-comment-matches and element-path-matches perform simple pattern matching, that is * for any character sequence and ? for any character. You can use ${element-signature} in the comment, as shown in the example above: it shall be replaced with the element signature, as seen for example in tooltips. Finally, the script closing tag. </ refactor - script > To see a larger example, you can simply start the OVM to UVM Migration wizard and inspect the script behind it (there is an Inspect button on the right side of the first wizard page). Tip Right-click in the XML editor > Validate to early detect syntax problems (requires the DTD specification line in the xml header). Tip Use Ctrl + Space to invoke autocomplete in the XML editor for tag and attribute names (requires the DTD specification line in the xml header). Applying a Refactoring Script To apply a script, right click on the script.xml file and select Refactor > Apply a refactoring script . The refactoring wizard start automatically.\nYou can also right click on project , select Refactor > Apply a refactoring script , then browse to the script you want to apply. You can either apply the changes straightforward or inspect them in a Preview wizard page, where you can select which of the proposed changes should be performed. Also, on the top-right of the preview wizard you have a Filter button that allows you to filter changes by the type of refactoring action. To apply the refactoring, click Finish Select a file/change to see the source differences produced by the refactoring. Un-check a file/change to prevent those changes from being applied. Filter the displayed changes by type of refactoring item Tip Add +dvt_ref_scripts_debug+true directive to your .dvt/default.build to see debug information about the script execution in the DVT Build Console Add New Parameter to Module Diagrams On this page Writing a Refactoring Script Applying a Refactoring Script Back to top",
    "section_path": [],
    "tokens": 1125,
    "source": "scraped"
  },
  {
    "id": "f0e8658e-d7db-40a5-87fa-1407d776510c",
    "title": "Add New Port to Module | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/add-new-port-to-module.html",
    "content": "Add New Port to Module | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Add New Port to Module To add a new port to a module, place the editor cursor on the module name, Right + Click and select Refactor > Add port . In the Add port wizard you can tune the name, direction, type, and width of the new port. Click Ok to perform the refactoring or Preview to see the changes that are about to be performed in the source code. Note An empty port connection is added to all the instances of the selected module along with a FIXME comment which shows up in the Tasks View. See Track Tasks using TODO Markers Tip In the Preview page you can select what changes should be performed. Add Port to Module from Selected Field Add New Parameter to Module Back to top",
    "section_path": [],
    "tokens": 167,
    "source": "scraped"
  },
  {
    "id": "e8258a1a-230d-4f0f-a923-adef9f377320",
    "title": "Understanding DVT IDE memory usage | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/memory_usage.html",
    "content": "Understanding DVT IDE memory usage | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Understanding DVT IDE memory usage The main goal of this application note is to help you understand the memory usage of DVT. First, two important concepts involved in memory usage analysis need to be clarified: resident and virtual memory. Resident Memory Resident memory usage represents the actual physical memory (RAM) used by an application at a given time. It includes the executable code, the dynamic libraries, and the stack and heap space required by the application during runtime. Resident memory is directly managed by the operating system and is critical for an application\u00e2\u0080\u0099s performance. Usually, resident memory is computed using the allocated heap size and the additional memory an application consumes during execution (such as memory used by the JVM or other off-heap memory allocation performed by various mechanisms). You can specify the maximum amount of resident memory that DVT may use via the -heap_size argument of dvt.sh or dvt_cli.sh. The optimal value depends on the project\u00e2\u0080\u0099s size, and is typically determined by an iterative process. The default is 3G. You can check how much of the heap is used in the Status Bar Heap Indicator. After you trigger a full build of the project, let it finish, and then press the button next to the Heap Indicator (the one that looks like a recycle bin) to force a garbage collection.\nAs a general rule, the heap usage should be around half of the max heap, to allow plenty of headroom for subsequent operations such as incremental builds, diagram generation, refactorings, semantic searches, etc. Virtual Memory Virtual memory is an abstraction provided by the operating system that allows an application to virtually access more memory than is physically available. It provides each application with its own virtual address space, which is typically much larger than the available physical memory. The operating system\u00e2\u0080\u0099s memory manager oversees virtual memory, a combination of RAM and disk space, including various system handles, memory-mapped files, and so on. Since some portions of this memory are allocated but remain untouched, the operating system loads only the necessary portions into physical memory, making the overall size of virtual memory largely irrelevant. For instance, in the following example, a process is using 1.1T of virtual memory, while the total amount of physical memory is less than 38G (Mem+Swp). As a bottom line, since Virtual Memory is not a limited physical resource, it is not a good measurement for resource allocation or memory profiling. Note Virtual memory is responsible for making use of the address space, which is limited to the width of the registers. That limitation is visible on 32-bit processors, as its registers can store up to 2^32 (4GB) of addresses.\nFor that reason, watchdogs were used on 32-bit systems to limit the amount of virtual memory an application can use. This is no longer necessary for current 64-bit  processors, which can hold up to 2^64 addresses. Output and logging UVM Library Compilation Troubleshooting Back to top",
    "section_path": [],
    "tokens": 525,
    "source": "scraped"
  },
  {
    "id": "5464e4c4-1987-4f6e-93b5-1ce95f8f543d",
    "title": "Save could not be completed | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/save-could-not-be-completed.html",
    "content": "Save could not be completed | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Save could not be completed You might encounter the following error message while trying to save a file in the DVT editor: Save could not be completed. Reason: Some characters cannot be mapped using \u00e2\u0080\u009cCHAR_ENCODING\u00e2\u0080\u009d character encoding. Either change the encoding or remove the characters that are not supported by the \u00e2\u0080\u009cCHAR_ENCODING\u00e2\u0080\u009d character encoding. This means there are other characters than \u00e2\u0080\u009cCHAR_ENCODING\u00e2\u0080\u009d (e.g. ASCII) in the edited file, most probably introduced by another tool that was used for editing the same file. In order to locate (and eventually remove) these characters, you can use the following perl command: perl - nwe 'print if /[^[ :ascii: ]]/' filename How to start DVT Eclipse with a different eclipse.ini IBM Clearcase Plugin Back to top",
    "section_path": [],
    "tokens": 157,
    "source": "scraped"
  },
  {
    "id": "93bbbc19-71b8-4107-a65f-04cacb0bf9ac",
    "title": "Trace Connections View | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/trace-connections/trace-connections-view.html",
    "content": "Trace Connections View | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Trace Connections View The Trace Connections View presents a hierarchy similar with the Design Hierarchy View : The connected instances are displayed, the rest are filtered out. You can use Show Root and Show Full Hierarchy options to show the entire design. The connected instances are colored, the rest are grayed-out. Port icons indicate the direction of the signal. Sources and destinations are marked with red/green decorations. You can search for a specific connected instance or signal with Quick Search . The toolbar buttons allow you to change the trace kind : Trace Drive and Load shows the connected instances across the drive and load paths (how is this signal connected in the design?). Trace Drive shows the connected instances across the drive paths (who drives this port?). Trace Load shows the connected instances across the load paths (who does this port drive?). Other buttons: Show Root shows the path to the hierarchy root , even if the signal doesn\u00e2\u0080\u0099t reach it. It provides the enclosing context for deep traces, for example when tracing a signal many levels below the top module. This option is enabled by default. Show Full Hierarchy shows the full hierarchy, whether it is reached by the traced signal or not (how is this signal connected in the whole design context?). Show As List to view only the sources and destinations as a list. Show/Hide Signals shows or hides the ports or internal signals of the currently selected instance. Show Diagram to view a graphical representation of signal traces. At any time you can see the traced signal (the port or internal signal you are currently tracing). It is indicated in the info label.\nThe two connected instances that are bold colored in the tree represent: The instance with the traced signal . The instance with the signal shown in the trace path. More details here . Double-click on an element to go to code: For a connected instance, go to its declaration. For a port, go to where it is connected in the trace path . For a signal, go to where it is declared. When the signals panel is hidden, right-click on an instance in the tree to show the context menu. When visible, right-clicking on a port or internal signal to show the context menu. The options in the context menu are : Trace \u00e2\u0080\u00a3 trace kind Trace signals found on the drive or load paths of the current traced signal . Go to Go to the port connections or signal declarations of the selected instance. The same as double-clicking on a particular signal in the signals panel. Show Path Show the trace path from the traced port to the selected port or internal signal. More details here . Trace Connections from Editor Trace Path Back to top",
    "section_path": [],
    "tokens": 498,
    "source": "scraped"
  },
  {
    "id": "3dbbebea-b7ab-487b-a272-409972706724",
    "title": "Create File From Build Config Editor | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/create-file-from-build-config-editor.html",
    "content": "Create File From Build Config Editor | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Create File From Build Config Editor A build configuration error is triggered when a non-existing file is specified for compilation or included as an argument file (for example using -f). Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Create file \u00e2\u0080\u00a6 in \u00e2\u0080\u00a6 from the list of quick fix proposals and press Enter . The file is created in the chosen location and opened in a new editor. Note A content assist pop up showing code templates is automatically triggered. Note The list may contain several proposals, for the compilation root and for each +incdir. Create Class In New File Create Included File Back to top",
    "section_path": [],
    "tokens": 149,
    "source": "scraped"
  },
  {
    "id": "5a3a26a3-3b7b-4508-b0ec-7a4fb098afea",
    "title": "Incremental Compilation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/incremental-compilation.html",
    "content": "Incremental Compilation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Incremental Compilation When something changes in your code, the DVT compiler updates the project database by analyzing the impact of your specific change across the entire project. This is called incremental compilation. Instead of waiting to recompile the entire project, you get instant feedback about the change.\nAny errors are flagged as you type, for example if you are using the wrong syntax, if you have a typo, or if some data types are mismatched. This way  the compile & fix cycles are significantly cut down. As the project database is properly updated on every change, the DVT functionality is accurate (hyperlinks, auto-compete, refactoring, diagrams, etc.). The DVT incremental compiler is triggered in 3 situations: When you save a file. When the inactivity timeout is reached, by default 5 seconds after you stop typing inside a DVT source code editor. When changes made outside DVT are detected, for example after a revision control system related operation which leads to code updates. Note The Build Automatically inactivity timeout can be modified from the Window > Preferences menu, then DVT > Build Configurations > General . Note The incremental compilation can be disabled if you go to the Project menu and uncheck Build Automatically . However, we strongly recommend not working with the incremental build disabled , since this will lead to an outdated DVT database and unreliable functionality. DVT warns you when you\u00e2\u0080\u0099re working with the Build Automatically preference disabled and keeps track of the changes you\u00e2\u0080\u0099ve made via a notification in the top-right corner of source code editor. Corner Case Considerations You can rely on the DVT incremental compiler to handle the vast majority of your code changes. However, particular types of changes have a substantial impact on the project database and the incremental compiler would take a while to do its job. To prevent potentially disrupting your work, such changes are not processed incrementally. Consequently, the project database is not up-to-date with the code changes. A notification in the top-right corner of the visible source code editors will inform you of such a state. Here are some examples: Changing the build configuration file, for example changing the value of a +define switch: Changing a file which has more than 15000 lines of code, for example editing a huge netlist: You can modify the maximum number of lines threshold by adding the +dvt_incremental_compile_max_lines+<threshold> directive in the build configuration file Changing a file which has less than 15000 lines but takes more than a configurable threshold to be parsed. A pop-up is shown: and the notification is displayed: This could happen for example when preprocessing is heavily used, and the actual amount of code to be analyzed is much bigger than the apparent length of the file. Changing a file which leads to many database modifications, for example commenting the definition of an enum used throughout the entire testbench. After a configurable timeout, a pop-up is shown: If you choose to stop checking, the database remains in an inconsistent state and the notification is displayed. In such cases don\u00e2\u0080\u0099t hesitate to reach out, as we constantly improve the performance of our tools based on user feedback - see the Performance section below. By default, the incremental build timeout is set to 4 seconds. When incremental build is performed on multiple files, the semantic checking timeout is increased proportionally (1 second for every 2 files) You can modify the incremental compilation timeout by adding the +dvt_incremental_compile_timeout+<timeout> directive in the build configuration file Changing a macro used in more than 50 files Changing the design hierarchy structure so that a full elaboration is needed When changing more than 50 files, the tool automatically triggers a full build. Performance Considerations We expect most common edits to be incrementally compiled in less than 500ms. In certain situations it might happen to grow up to a few seconds, for example think about changing a SystemVerilog base class upon which all of a UVM testbench is built. If incremental build feels slow, please report an issue using the following procedure: add the +dvt_profile_incremental directive in the .dvt/default.build project configuration file trigger the incremental build in the problematic context, or continue your work regularly until you feel the slowness again every time an incremental build takes more than 2 seconds, a file named dvt_thread_dump_<timestamp>.zip should be generated under the project root send the generated log file by submitting an How to Report an Issue? Note In case a thread dump file was not generated, it means that the source of slowness is elsewhere, perhaps a slow filesystem. In such a situation, please collect a thread dump and share it with us as described here: How to Report an Issue? Generating External Tool Scripts from the DVT Build Configuration Preprocessed Files Support Back to top",
    "section_path": [],
    "tokens": 828,
    "source": "scraped"
  },
  {
    "id": "00d1dfcd-fa1d-49c8-bcc8-55c1288bebdc",
    "title": "Constraint Code Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-templates/constraint-code-templates.html",
    "content": "Constraint Code Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Constraint Code Templates The following features can be used in DVT to generate new constraints: Quick Fix Constraint Override Autocomplete To customize the way a generated constraint looks you can edit the constraint_implementation or constraint_prototype code templates. ${qualifiers} Can be static or empty. ${identifier} Constraint name. Includes class_name:: qualifier for extern constraint implementations. ${todo_comment} Comment inserted inside the constraint block. ${body} The body of the constraint. ${qualifiers} Extern, static or both. Can be empty. ${identifier} Constraint name. Code Templates in Autocomplete Method Code Templates Back to top",
    "section_path": [],
    "tokens": 120,
    "source": "scraped"
  },
  {
    "id": "2f7b58a1-b8e7-4e37-b818-f1ff4acab2aa",
    "title": "Emulating compiler invocations | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/emulating-compiler-invocations.html",
    "content": "Emulating compiler invocations | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Emulating compiler invocations Sometimes a design is compiled across multiple invocations. For example, environment variables or preprocessing directives may change their values between invocations, or sources may be compiled into different libraries. The +dvt_init+<mode> directive is equivalent with a new compiler invocation, where <mode> represents the compiler compatibility mode . The directive resets the DVT builder to the mode specific default state and clears all the previous directives (preprocessing defines, system variables, libraries, etc.). You may specify any number of +dvt_init directives inside a build file. The compatibility mode is enforced until the next +dvt_init directive. Even if there is no +dvt_init directive specified, there is always an initial reset equivalent to +dvt_init+dvt . Simulator Log-config Multiple .build Files Back to top",
    "section_path": [],
    "tokens": 155,
    "source": "scraped"
  },
  {
    "id": "08f3a133-6195-4adf-bcdf-415639d008ce",
    "title": "Create Interface Class In New File | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/create-interface-class-in-new-file.html",
    "content": "Create Interface Class In New File | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Create Interface Class In New File An error is triggered when trying to implement a non existing interface class. Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Create interface class \u00e2\u0080\u0098\u00e2\u0080\u00a6\u00e2\u0080\u0099 in new file from the list of quick fix proposals and press Enter . A wizard will pop up. Fill in the name and the directory path of the new file. The interface class is created and the new file opens. Note An include statement is added inside the scope of the child class. Note If the implemented interface class is parameterizable, the definition is computed accordingly with its value or type parameters. Create Included File Declare Extern Prototype Back to top",
    "section_path": [],
    "tokens": 156,
    "source": "scraped"
  },
  {
    "id": "699887af-d41e-486b-bf5c-bc7b3790c5fc",
    "title": "Design Diagrams | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/diagrams/design-diagrams.html",
    "content": "Design Diagrams | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Design Diagrams Design Diagrams help you inspect and document the structure of a design element. You can create a design diagram in one of the following ways: Right + Click in the Types View or the Design Hierarchy View and select Show Diagram . Place the cursor over a type, instance or state variable in the editor, Right - Click and select Show > Diagram . Schematic Diagrams By default Show Diagram opens a schematic diagram that presents the internal structure: ports, sub-instances, combinational and sequential logic and connections. You can draw a nested schematic by increasing the depth from the diagram preferences. Flow Diagrams A flow diagram presents a high level view of internal connectivity. Multiple connections from one instance to another are collapsed in a single directional edge. Transform a schematic into a flow diagram using the preferences from the Diagram Toolbar . Block Diagrams A block diagram presents the ports. Transform a schematic into a block diagram using the preferences from the Diagram Toolbar . Finite-State Machine Diagrams Show Diagram on a state variable inside a module or entity will generate a Finite-State Machine (FSM) diagram. States and transitions are automatically detected in the enclosing scope by analyzing all the assignments and conditions in which the state variable is used. Multiple transitions between the same two states are merged into a single one with multiple conditions. Next state variables are supported. The \u00e2\u0080\u009cone-hot\u00e2\u0080\u009d case item pattern is supported. Method call transitions are not supported. The initial state is colored gray. Selecting any state or transition will highlight the previous and next states differently. You can change the look and feel of the diagram using the preferences from the Diagram Toolbar or you can change the default preferences from Windows \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Diagrams \u00e2\u0080\u00a3 FSM Diagrams . Graph Direction The direction of the diagram. Placement Strategy The algorithm used for placing blocks and edges. Opposite In/Out Edges for For which states should incoming and outgoing edges be constrained to opposite sides? The default is All States except Initial . Initial State Position The position of the initial state relative to the graph direction. The default is First . Show Explicit Loopback Edges Show explicit transitions to the same state as a loopback edge. Transition Labels The label displayed on transitions. It can be the Index of the transition or the Condition (merged transitions will have multiple conditions). The default is None . Hide Names in Conditions A list of signal names that will be filtered out of conditions. Strict text matching is used. You can inspect transitions in the diagram table. Select any entry in the table and the transition will be highlighted in the diagram. Any selection in the diagram will highlight the corresponding elements in the table. The conditions for all transitions are presented in the last column. Diagram Filters Note Filters only apply to Schematic and Flow diagrams. You can customize the diagram using the Filters button in the diagram editor toolbar. Use the drop-down menu at the top of the dialog to select from available filters. Use the buttons in the top-right corner of the dialog to create, duplicate, or delete the current filter. Use the checkboxes at the bottom of the dialog to further clean up the diagram. A filter is defined using filter rules (one per line). The general form of a filter rule is: command element_kinds matching regex [ using color_name_or_code ] command is one of hide , show , or color element_kinds is a comma-separated list of kinds. The available kinds are blocks , instances , types , signals , ports , input ports , output ports , and inout ports regex is a regular expression that matches the relevant diagram element labels color_name_or_code is a color specified by name , 6- or 3-digit hexadecimal code , comma-separated decimal RGB code or the keyword random . This is relevant only for color rules. Tip You can use content assist to write the filters ( CTRL + Space ). To apply a filter rule only to elements under a specific instance, you must provide the relevant path in the regex section of the rule: a path must always begin with the name of the top instance (or module) in the diagram (if instance is under top_instance , then top_instance/instance/\u00e2\u0080\u00a6 is valid, while instance/\u00e2\u0080\u00a6 is not) a path consists only of names of instances (with the possible exception of the top module) and \u00e2\u0080\u009c / \u00e2\u0080\u009d (i.e. you can\u00e2\u0080\u0099t use the module name in a path except if the diagram top is a module, and not an instance) each level is separated from the previous using \u00e2\u0080\u009c / \u00e2\u0080\u009d (valid: top_instance/inst1/inst2/\u00e2\u0080\u00a6 ; not valid: top_instance.inst1.inst2\u00e2\u0080\u00a6 ) regular expressions may be used in the path section of a rule (for example, top_instance/.*/some_instance ) if the regex contains \u00e2\u0080\u009c / \u00e2\u0080\u009d, everything before the last \u00e2\u0080\u009c/\u00e2\u0080\u009d is the path , the rest is used to match the relevant diagram elements (in the following example, the bolded text is the path: top_instance/.*/inst1/ .*clk.*) if the regex does not contain \u00e2\u0080\u009c / \u00e2\u0080\u009d, it applies to all elements of the appropriate element_kinds Tip You can hide the hierarchy under an instance with the filter \u00e2\u0080\u009chide blocks matching path/to/instance/.* \u00e2\u0080\u009d. With the predefined filter in the image above, the resulting diagram will be similar to the following: Design Diagram Actions Design Diagram actions are available in the Right - Click context menu. Action Diagram kind Element kind Description Go to Source Block Flow Schematic FSM Supply Network ALL Jump to the selected element source code (instances, state values, ports, power domains, connections, state transitions). Go to Declaration Flow Schematic Instance Jump directly to the module or entity declaration. Step into Flow Schematic Instance Show the diagram for the selected instance. Step out Flow Schematic Instance Show the diagram one level above the current diagram top (if available). Expand Schematic Instance Show the sub-instances of the selected instance, while keeping the initial diagram. Collapse Schematic Instance Hide all the sub-instances and signals from within the selected instance. Show Sources Schematic Instance Logic Gate Port Show the instances that drive the selected port. Note You can press S + Left - Click to trigger this action. Show Destinations Schematic Instance Logic Gate Port Show the instances that load from the selected port. Note You can press D + Left - Click to trigger this action. Delete Flow Schematic Instance Logic Gate Connection Port Delete the selected element. Note You can press DEL to trigger this action. Show Connections Flow Schematic Instance Logic Gate Connection Port Show all connections of the selected instances with other instances; when triggering this operation on a signal, the diagram shows that signal and all the instances it connects; when triggering this operation on a port, the diagram shows that port and all the instances connected through it. Note You can press C + Left + Click to trigger this action. Show Connections Between Flow Schematic Instance Show all connections between the selected instances, passing through logic. Trace Drive/Load/Drive and Load Schematic Connection Start a trace operation for the currently selected signal (see Trace Connections ). Show in Supply Network Diagram Block Flow Schematic Instance Generates the Supply Network Diagram, with focus on the current selected Power Domain Supply Network Diagram . Note When performing an action on an instance, signal or port, a purple highlight contour is added to it. Breadcrumb Navigation Bar The Design Breadcrumb Navigation Bar appears horizontally on top of source code editors and Design Diagrams . For source code editors, it displays the path to the design element (module or entity) under the cursor starting from the design top. For Design Diagrams , it displays the path to the diagram\u00e2\u0080\u0099s design element. The design hierarchy path is automatically tracked by DVT, for example when navigating from the Design Hierarchy View to source code, when using hyperlinks, when generating diagrams and so on. Editor : Click an instance to jump to the design element definition. Diagram : Click an instance to generate the design element diagram. Click the arrow to the side of a design element to see its child instances. Filter the list of child instances using the quick search box. Editor : Click a child instance to jump to the design element definition. Diagram : Click a child instance to generate the design element diagram. Hover an instance to get more information, for example its design element name or power domain information. A design element may have multiple instances with different paths in the design hierarchy. Click the Select Instance Path button to choose from the available paths. Right click on an instance > Open Instance to jump to its definition. Right click on an instance > Show Diagram to generate its design diagram. Right click on an instance > Reveal in Design Hierarchy to focus it in the Design Hierarchy View. Right click on an instance > Copy Hierarchy Path to copy its hierarchical path. Low Power Format Support DVT analyzes power format files (either UPF or CPF) and presents power domain information in: Power Domain View Design Hierarchy View - using labels and/or colors Schematic Diagrams , Flow Diagrams and Block Diagrams - using labels and/or colors Breadcrumb Navigation Bar - using colors and tooltips Tooltips in the Verilog and VHDL Editors Inspect View Power format project nature In order to work with power format files, you have to enable the Power Format nature for your project. In the New DVT Project Wizard check UPF/CPF For an existing project, right-click on it in the Project Explorer View , choose Change DVT Nature then check UPF/CPF The Power Format nature works only in conjunction with at least one of Verilog or VHDL natures. Power format files Use one of the following build configuration directives to specify a power format file to be analyzed: Compatibility mode Directive ANY +dvt_upf+<upf_file> +dvt_cpf+<cpf_file> ius.irun -lps_1801 <upf_file> -lps_cpf <cpf_file> vcs.vloganvcs.vhdlgan -upf <upf_file> questa.vlogquesta.vcom -pa_upf <upf_file> Power format analysis At full build, after elaborating the design, DVT analyzes (interprets) the provided power format file and elaborates the power domains.\nTCL and power domain errors are detected and reported during this phase. All analyzed power format files are decorated with a blue bullet.\nFiles outside the project directory are automatically linked under the DVT Auto-Linked folder. Note By default, the working directory of the TCL interpreter is the DVT project directory.\nTo change it, use +dvt_compilation_root within the invocation where the power format file is specified, for example: + dvt_init + dvt_compilation_root +/ path / to / new / compilation / root + dvt_upf / path / to / file . upf Note Environment variables defined using +dvt_setenv within the invocation where the power format file is specified are available in the TCL $::env array. Tip To print power format analysis debug information in the DVT Build Console add this directive to your build configuration file: +dvt_pf_debug Tip If a file called dvt_pre_interpret.tcl exists in any of the the User and Common Settings Location it will be interpreted before the provided power format file. If several such files exist, they will all be interpreted, in precedence order of the User and Common Settings Locations. This mechanism allows you to define TCL variables or functions for debugging or deployment purposes. Incremental power format analysis Whenever you change a power format file which was analyzed during the full build phase, DVT triggers a power format file analysis and a power domain elaboration. Whenever you change a design file (Verilog or VHDL) which was compiled during the full build phase, DVT triggers a power domain elaboration (analysis of power format files is not performed). The following Common Power Format (CPF) and Unified Power Format (UPF) commands are supported by DVT: CPF up to Version 2.1 create_power_domain -name <power_domain_name> -default -instances <instance_list> -exclude_instances <instance_list> set_hierarchy_separator <separator_character> set_instance <instance> include <cpf_file> UPF (IEEE Std 1801\u00e2\u0084\u00a2) up to Version 3.0 create_power_domain <power_domain_name> -elements <instance_list> -exclude_elements <instance_list> -include_scope -scope <scope> upf_version <version> set_scope <scope> load_upf <upf_file> -scope <scope> -version <version> Supply Network Diagram The Supply Network Diagram shows all the power domains and power switches, and how they are connected via supply nets and ports. To generate the Supply Network Diagram : Click the Generate Diagram toolbar button and choose Supply Network Diagram Right-click on the top instance of your design in the Design Hierarchy View and choose Show Supply Network Diagram Tip To visualize a power domain and all its connections, from the Schematic Diagrams , Flow Diagrams and Block Diagrams right click on an instance included in the extent of the power domain and choose Show in Supply Network Diagram . Tip To quickly jump from the Supply Network Diagram the control signal of a power switch, select the control port, right click and choose Go to Source . Note For readability, the path to control signals is shortened in the diagram labels. Select the control port to see its full path in the Inspect View. Sequences UML Diagrams UVM Components Diagrams On this page Schematic Diagrams Flow Diagrams Block Diagrams Finite-State Machine Diagrams Diagram Filters Design Diagram Actions Breadcrumb Navigation Bar Low Power Format Support Supply Network Diagram Back to top",
    "section_path": [],
    "tokens": 2237,
    "source": "scraped"
  },
  {
    "id": "1db38570-dc5a-410d-a624-ce99cc242bb3",
    "title": "Performance Checks | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/compile-checks/performance-checks.html",
    "content": "Performance Checks | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Performance Checks ID Message ASSIGNMENT_NON_BLOCKING Non-blocking assignment of # in combinational logic (use blocking assignment) ASSIGNMENT_NON_BLOCKING Non-blocking assignment of local variable # (use blocking assignment) SENSITIVITY_UNUSED The process is not sensitive to # Synthesis Checks Dead Code Checks Back to top",
    "section_path": [],
    "tokens": 73,
    "source": "scraped"
  },
  {
    "id": "8c78658b-cf46-42e9-b8cf-6851281ea376",
    "title": "Architecture UML Diagrams | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/diagrams/architecture-uml-diagrams.html",
    "content": "Architecture UML Diagrams | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Architecture UML Diagrams An Architecture UML Diagram presents the associations between all the entities that inherit from a commonly used set of base classes. Typically these are components like monitors, drivers, agents etc. To create an Architecture UML Diagram use the New Diagram toolbar button and select Architecture UML Diagram from the menu. You can tune the default set of base classes and filters from menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Diagrams \u00e2\u0080\u00a3 UML Diagrams \u00e2\u0080\u00a3 Architecture . UML Diagrams Sequences UML Diagrams Back to top",
    "section_path": [],
    "tokens": 120,
    "source": "scraped"
  },
  {
    "id": "9ca88b36-dc01-46ee-940d-89c46a4cdf72",
    "title": "I get errors while installing or updating a plugin from an update site | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/i-get-errors-while-installing-or-updating-a-plugin-from-an-update-site.html",
    "content": "I get errors while installing or updating a plugin from an update site | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide I get errors while installing or updating a plugin from an update site Unable to read repository at \u00e2\u0080\u00a6 sun.security.validator.ValidatorException: PKIX path building failed SSL Handshake: invalid SSL session Most probable causes for the above errors are: Outdated certificate authority truststore in the Java Runtime Environment (JRE). In this case the easiest fix is to download a newer DVT distro containing an up to date JRE. Proxy or firewall filtering / altering secure connections. In this case you can ask your CAD/IT team if any filtering is taking place or you can try to download a zipped update site and install the plugin from that archive. How do I change the name of the xterm opened by a DVT Generic Run Configuration? What is New? Back to top",
    "section_path": [],
    "tokens": 171,
    "source": "scraped"
  },
  {
    "id": "7d6e80fc-9460-4c66-9c51-aeedc3bb31a5",
    "title": "Rename Refactoring | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/rename-refactoring.html",
    "content": "Rename Refactoring | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Rename Refactoring To rename an entity (type, method, macro etc.) in the source code along with all its references, place the cursor on the desired element , then right click and select Refactor \u00e2\u0080\u00a3 Rename (or use the shortcut combination Shift + Alt + R ). You will be prompted for the new name of the entity: Click OK to perform the refactoring, or Preview to see the changes that are about to be performed in the source code. In the Preview page you can select the changes that should be performed. After you click Finish the changes are performed, and the project is rebuilt. Select a file/change to see the source differences produced by the refactoring. Uncheck a file/change to prevent those changes from being applied. Tip Matches hidden inside a macro call cannot be automatically renamed.\nInstead, DVT will insert a FIXME comment above the macro call to indicate that it should be refactored by hand. Hidden matches are those matches found inside a macro call expansion, but not among the macro call parameters. Tip DVT can also rename matches found in JavaDoc-like annotations, such as @link , @param and @see . This feature is disabled by default, to enable it go to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Refactoring and untick the Ignore JavaDoc comments box. Tip You can limit the scope of Rename Refactoring to the current file, see Rename in File . Refactoring Rename Port Across the Design Hierarchy Back to top",
    "section_path": [],
    "tokens": 281,
    "source": "scraped"
  },
  {
    "id": "3cbd39de-faaa-4c16-a273-fdf3bf8e9cd5",
    "title": "Quick Assist Proposals | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/index.html",
    "content": "Quick Assist Proposals | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Quick Assist Proposals Quick assists provide fast access to code refactoring operations. To see the list of available Quick Assist Proposals simply press Ctrl + 1 . Use the Up and Down arrows to select a proposal, then press Enter to apply it. The proposals depend on the editing context. For example, to split a function into \u00e2\u0080\u0098extern\u00e2\u0080\u0099 prototype and implementation, place the editor cursor on the function declaration and press Ctrl + 1 . To extract a block of actions to a new method, select the block and press Ctrl + 1 . Tip Right - Click in the editor and go to the Refactor submenu to see all refactoring operations. Bind Method Call Arguments by Name Bind Method Call Arguments by Position Connect Instance Ports by Name Connect Instance Ports by Position Collapse Macro Expand Macro Expand .* Port Connections Extract to Variable Extract to Method Extract to Module Move Selection to New File Join Extern and Implementation Split into Extern and Implementation Rename in File Waive Compilation Problems Bind Method Call Arguments by Name Back to top",
    "section_path": [],
    "tokens": 213,
    "source": "scraped"
  },
  {
    "id": "569961f2-b09b-4027-b609-145878577691",
    "title": "Reference | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/reference.html",
    "content": "Reference | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Reference List of Commands AI Assistant provides a list of commands that you can quickly invoke using Quick Access ( Ctrl + 3 ) in Eclipse and Command Palette ( Ctrl + Shift + P ) in VS Code. Some of these commands can also be invoked from the editor\u00e2\u0080\u0099s context menu or using the buttons available in the chat view. In general, the commands are filtered based on the context in which the action is possible. Commands for built-in blueprints appear in the list prefixed with DVT AI Blueprint. The rest of the commands are prefixed with DVT AI. Show All Commands Lists all AI Assistant specific commands. Stop Generation Stop LLM reply generation. Set Language Model Set the default LLM that will be used from now on for new sessions. Start a New Session from Blueprint List all the built-in and custom blueprints. The selected blueprint will start a new session. Start a New Chat Session Start an empty chat session. Run Last Session in Chat Rerun the last session only in chat, regardless of where it ran previously. Open Protect File Open the AI protect file. Send File to Prompt Focus the AI chat prompt and insert the current file as a symbol (e.g. #file:<filename>). Send Selected Lines to Prompt as Anchor Focus the AI chat prompt and insert the currently selected lines. The selected lines will be inserted as a symbol (e.g. #file:<filename>:<startLine>-<endLine>). If the file content changes from the command invocation until the prompt is sent to the LLM, the symbol expansion will include the updated content. Send Selected Lines to Prompt as Code Block Focus the AI chat prompt and insert the currently selected lines. The selected lines will be inserted as a code block surrounded by ``` delimiters. Edit Code Completion Blueprint Create a custom Code Completion blueprint, offering the ability to customize the prompt that is sent to the LLM. Edit Predefined Blueprint Customize the behavior of a predefined blueprint. Edit Predefined Snippet Customize the behavior of a predefined snippet. Predefined Blueprints AI Assistant comes with a set of built-in blueprints for common tasks: Explain the selected code (chat) Asks the LLM to explain the selected code in a concise manner. The user request defined by the blueprint and the LLM reply appear in the chat. You can change the request, regenerate the reply or continue the conversation. Add comments to the selected code (editor) Asks the LLM to add comments above the selected code. Changes appear in the editor. You can review and accept or revert the generated code. Suggest improvements for the selected code (editor) Asks the LLM to suggest improvements for the selected code. Improvements should appear as comments above the line that needs to be improved. Changes appear in the editor. You can review and accept or revert the generated code. Analyze and fix the selected code (editor) Asks the LLM to find and fix any problems identified in the selected code Fixes should appear in the editor alongside a comment explaining the bug and the fix. Changes appear in the editor. You can review and accept or revert the generated code. Note All built-in blueprints provide additional context to the LLM (e.g. the whole file containing the selection). Custom Blueprints AI Assistant allows you to define custom blueprints. The easiest way to create a custom blueprint is by: Saving a chat request using the Save Message as Blueprint button Saving a chat session using the Save Chat Session as Blueprint button A blueprint file has the following format: import { SessionBlueprint } from \"../@api/v3\" export default { // API version version : 3 , // Unique name used to identify the blueprint and to overwrite a built-in or custom blueprint name : 'Write a 4-bit counter' , // The assistant's reply to the blueprint's messages will target the specified component // ('chat' | 'editor') target : 'editor' , // Editor action when the assistant's reply targets the editor // ('replace' | 'insert' | 'insert-before-selection' | 'insert-after-selection') action : 'replace' , // The messages (requests and replies) used to create the new session: // - At least one message must be present // - User and assistant messages must alternate // - Sessions started from this blueprint will automatically pull a reply from the LLM when the last message is a user message // - When targeting the editor, the last blueprint message must be a user message to which the LLM will reply in the editor messages : [{ // Roles can be 'user' or 'assistant' role : 'user' , content : `Write a 4-bit counter in @language.` }] } satisfies SessionBlueprint The blueprint must be a valid TypeScript file with the .ts extension. AI Assistant looks for the blueprint files in these locations: $DVT_HOME/config/ai/blueprints/*.ts $DVT_AI_DIR/blueprints/*.ts $HOME/.dvt/ai/blueprints/*.ts <project>/.dvt/ai/blueprints/*.ts Predefined Snippets AI Assistant provides a library of prompt snippets with different intents: Structured information from DVT\u00e2\u0080\u0099s database. Specific code sections from your project. Reusable instructions for the LLM. Snippets are presented with their full syntax and options. Snippet parts starting with a vertical bar \u00e2\u0080\u0098|\u00e2\u0080\u0099 are optional. @language Languages used in the code selection or in the project (e.g.\u00c2\u00a0SystemVerilog, VHDL). @selected <type:\u00e2\u0080\u00a6> | wrap between <prefix:string> <suffix:string> | indicate cursor position Type options: code, file, container, element, action_block, method, port_list, class, module, interface, package, entity, architecture, configuration. Code sections based on the editor selection or cursor position. The selection will be adjusted to represent the specified type (e.g.\u00c2\u00a0the method where the cursor is placed, the entire class or module or the full content of the file). When indicate cursor position is used, a comment ( [[CURSOR IS HERE]] ) is added at the end of the line that contains the cursor. This is only available for @selected file . @usages of selected element | show <lines:number> surrounding lines | limit to <max:number> | separate with <separator:string> | wrap between <prefix:string> <suffix:string> @usages of <sym:symbol> | show <lines:number> surrounding lines | limit to <max:number> | separate with <separator:string> | wrap between <prefix:string> <suffix:string> Usages of the selected element or specified #symbol throughout your project. By default, the entire scope of the usage will be attached. Use show <lines:number> surrounding lines to show the line that contains the usage and lines lines before and after. By default, 5 usages will be collected from your project, use limit to <max:number> to change this number. Wildcards ( * ) can be used in the name of the symbol. @filename of selected file @filename of <symbol:symbol> | separate with <separator:string> The file name (last segment in file path) of the active editor or the file name of the specified #symbol\u00e2\u0080\u0099s definition. Wildcards ( * ) can be used in the name of the symbol. @examples of <type:\u00e2\u0080\u00a6> | limit to <max:number> | separate with <separator:string> | wrap between <prefix:string> <suffix:string> Type options: uvm_agent, uvm_component, uvm_driver, uvm_env, uvm_mem, uvm_monitor, uvm_object, uvm_reg, uvm_reg_adapter, uvm_reg_backdoor, uvm_reg_block, uvm_reg_field, uvm_reg_fifo, uvm_reg_file, uvm_reg_frontdoor, uvm_reg_map, uvm_reg_predictor, uvm_reg_sequence, uvm_scoreboard, uvm_sequence, uvm_sequence_item, uvm_sequencer, uvm_test. Code sections with classes implementing the specified UVM component. By default, 5 examples will be collected from your project, use limit to <max:number> to change this number. @outline of selected <type:\u00e2\u0080\u00a6> | wrap between <prefix:string> <suffix:string> @outline of <symbol:symbol> | wrap between <prefix:string> <suffix:string> | separate with <separator:string> Type options: file, container. Tree structured outline of the selected file/container (based on the editor selection or cursor position) or of the specified #symbol. Wildcards ( * ) can be used in the name of the symbol. Useful for providing summarized information about specific parts of the project without sending the full source code. @symbol <sym:symbol> | limit to <max:number> | separate with <separator:string> | wrap between <prefix:string> <suffix:string> Symbols from the current project that match a specific query. An alternative for #symbols that offers control over the number of results and the way they are wrapped before being sent to the LLM. Wildcards ( * ) can be used in the name of the symbol. @recent code sections | limit to <max:number> | separate with <separator:string> | wrap between <prefix:string> <suffix:string> | exclude active editor @recent code sections from open editors | limit to <max:number> | separate with <separator:string> | wrap between <prefix:string> <suffix:string> | exclude active editor Recently visited code sections from any file or restricted to the currently opened editors. Useful for providing information about the current task based on the code sections recently visited. By default, the last 5 code sections will be provided, use limit to <max:number> to change this number. If exclude active editor is used, code sections from the active editor will not be included in the output of the snippet. @design hierarchy | expand up <up_levels:number> | expand down <down_levels:number> @verification hierarchy | expand up <up_levels:number> | expand down <down_levels:number> Tree structure representation of the design or verification hierarchy starting from the current editor scope. @problems from selected <type:\u00e2\u0080\u00a6> | limit to <max:number> | filter by severity <severity:\u00e2\u0080\u00a6> | exclude problematic code Type options: code, container, file. Severity options: error, warning. Compilation problems reported by DVT inside the selected code, container or file. By default, the problematic code/file will be included as well. To prevent this, use exclude problematic code . @dependencies of selected <type:\u00e2\u0080\u00a6> | show as <show_as:\u00e2\u0080\u00a6> | fit into <max:number> chars | separate with <separator:string> | wrap between <prefix:string> <suffix:string> @dependencies of <sym:symbol> | show as <show_as:\u00e2\u0080\u00a6> | fit into <max:number> chars | separate with <separator:string> | wrap between <prefix:string> <suffix:string> Type options: container, file. Type and macro dependencies used inside the selected container/file or inside the specified #symbol. Only the types of declared elements are collected along with definition of used macros. Wildcards ( * ) can be used in the name of the symbol. fit into <max:number> chars : used to limit the size of the entire snippet expansion. show as <show_as:\u00e2\u0080\u00a6> options: outline, code. @replicate selected pattern <N:number> times Reusable task asking the LLM to replicate the currently selected code pattern N times. Useful for generating repetitive sections of code that follow a pattern (e.g. 1 2 3 \u00e2\u0080\u00a6). @reply only with code Reusable instruction asking the LLM to reply only with valid code in the language of current code selection or project. It also forbids the LLM to use markdown to format its reply. Useful in editor sessions that redirect the replies to the editor. @kind of selected container Kind of the container  (e.g. class, module) within the current editor selection or cursor position. @name of selected container Name of the container within the current editor selection or cursor position. @auto context | extended format Project information and additional code snippets that are relevant for the current task. Custom Snippets AI Assistant allows you to define custom snippets. The easiest way to create a custom snippet is by saving a chat request using the \u00e2\u0080\u009cSave Message as Snippet\u00e2\u0080\u009d button. A snippet file has the following format: import { PromptSnippet } from \"../@api/v3\" ; export default { // API version version : 3 , // Unique name used to identify the snippet and to overwrite a built-in or custom snippet name : 'Intro' , // Snippet signature used to refer to this snippet signature : '@intro' , // Whether to expand snippets and symbols nested in the prompt string expand : true , // The prompt string (snippet expansion) prompt : 'Act as a @language engineer.' } satisfies PromptSnippet The snippet must be a valid TypeScript file with the .ts extension. AI Assistant looks for the snippet files in these locations: $DVT_HOME/config/ai/snippets/*.ts $DVT_AI_DIR/snippets/*.ts $HOME/.dvt/ai/snippets/*.ts <project>/.dvt/ai/snippets/*.ts Protecting Code Advanced LLM Configuration On this page List of Commands Predefined Blueprints Custom Blueprints Predefined Snippets Custom Snippets Back to top",
    "section_path": [],
    "tokens": 1974,
    "source": "scraped"
  },
  {
    "id": "f1fc6a1f-e298-4a01-b369-39ba8e20cab3",
    "title": "How can I see if a file is read-only? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-can-i-see-if-a-file-is-read-only.html",
    "content": "How can I see if a file is read-only? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How can I see if a file is read-only? To enable read-only decorators for Navigator(1), Editor(2) and Refactoring Preview(3) go to: Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT and select the Show read-only decorators checkbox. How to automatically checkout/lock files from the revision control system ? How can I open a file in DVT from the terminal? Back to top",
    "section_path": [],
    "tokens": 97,
    "source": "scraped"
  },
  {
    "id": "31179eaf-c524-4d00-8107-a3fa0604b827",
    "title": "Verification Breadcrumb | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/breadcrumb-navigation-bar/verification-breadcrumb.html",
    "content": "Verification Breadcrumb | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Verification Breadcrumb The Verification Breadcrumb Navigation Bar appears horizontally on top of source code editors and UVM Components Diagrams . It displays the path to the verification element (class or unit layer) starting from the verification top. The verification hierarchy path is automatically tracked by DVT, for example when navigating from the Verification Hierarchy View to source code, when using hyperlinks, when generating diagrams and so on. Editor: Click an instance to jump to the verification element definition. Diagram: Click an instance to generate verification element diagram. Click the arrow to the side of a verification element to see its child instances. Filter the list of child instances using the quick search box. Editor: Click a child instance to jump to verification element definition. Diagram: Click a child instance to generate verification element diagram. Hover an instance to see its type. A verification element may have multiple instances within the project. Click the Select Instance button to choose from available paths. Right click on an instance to open its create call, open its field declaration, show the associated diagram or copy the hierarchy path Note When you open a file from the Project Explorer or Compile Order views and the file contains multiple verification elements, the breadcrumb navigation bar will show the path for the first verification element declared in the file. A pop-up notifies you about this. Note When you open a file from the Project Explorer or Compile Order views and multiple paths are found for the verification element from the file, the breadcrumb navigation bar will show the first path. A pop-up notifies you about this. Design Breadcrumb Scope Breadcrumb Back to top",
    "section_path": [],
    "tokens": 308,
    "source": "scraped"
  },
  {
    "id": "74b4e61c-bb2f-4a79-9978-6b51a73d4d13",
    "title": "Debugger Integration | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/debugger-integration/index.html",
    "content": "Debugger Integration | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Debugger Integration The DVT Debugger Integration allows you to debug your code from within the IDE: add breakpoints, control the simulation (stop, resume, step), inspect variables and so on. You can launch your simulation as usual, or from within DVT using Run Configurations . All you need to do on the simulator side is load a specific DVT debugger library and, depending on the simulator, pass some debug enablement switches. DVT provides a dedicated DVT Debug perspective that helps you perform simulation debug related activities. DVT will prompt you to switch to this perspective whenever you launch or connect to a simulation in debug mode. Simulation Prerequisites Launch a Debug Simulation Connect to an Existing Simulation Breakpoints Threads, Call Stack, Stepping Variables Watch Expressions Debug Specific Configurations External Documentation Simulation Prerequisites Back to top",
    "section_path": [],
    "tokens": 166,
    "source": "scraped"
  },
  {
    "id": "346bfaf8-eeae-4758-adea-9ebb6d6ef507",
    "title": "Content Assist (Autocomplete) | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-assist/index.html",
    "content": "Content Assist (Autocomplete) | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Content Assist (Autocomplete) Content assist (autocomplete) can be triggered explicitly if you press Ctrl + Space in any code context. Some of the contexts when content assist is triggered automatically as you type are: when you type a dot (.) for accessing a struct member (field, method etc) as in bfm.do_write() when you type a compare (==) in an expression as in if (mode == Proposals are presented in a list for you to choose from. Moving through proposals you can quickly see the related documentation. Press Enter or Click to select a proposal or Esc to cancel the assist. Sometimes autocomplete has many proposals that are split in several categories: .  the first one is for things you can access in a scope (wires, regs, functions, tasks etc. depending on the enclosing scope) .  the second one is for code templates .  the third one is for other things, like module instances If you press Ctrl + Space the first time, you\u00e2\u0080\u0099ll see a small indication in the proposals pop-up window at the bottom, something like \u00e2\u0080\u009cPress Ctrl+Space again to see template proposals\u00e2\u0080\u009d. Pressing Ctrl + Space cycles through the categories above. Content assist for CamelCase and Underscore Code Templates Module Automatic Instantiation Override Functions Using Autocomplete Override Constraints Using Autocomplete Implement Extern Functions Using Autocomplete Use Assignment Pattern for Struct Type Variable Non Standard Checks Content assist for CamelCase and Underscore Back to top",
    "section_path": [],
    "tokens": 269,
    "source": "scraped"
  },
  {
    "id": "30af7155-e530-4029-9560-44bd903efb1a",
    "title": "Code Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-assist/code-templates.html",
    "content": "Code Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Code Templates Code templates are presented in content assist. Press the first letters from the template name then click Ctrl + Space twice to get a list of available templates. Content assist for CamelCase and Underscore Module Automatic Instantiation Back to top",
    "section_path": [],
    "tokens": 74,
    "source": "scraped"
  },
  {
    "id": "bfefad25-2d33-46e5-af47-682777981573",
    "title": "Third Party Licenses | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/licenses/index.html",
    "content": "Third Party Licenses | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Third Party Licenses Note Changes to open source projects distributed with DVT can be found in $DVT_HOME/misc/patch . Source code for binaries distributed with DVT  can be found in $DVT_HOME/misc/sources . The following software may be included in this product: ANTLR v2 ( see license ) AnyEdit Tools ( see license ) Apache ANT ( see license ) Apache Batik SVG Toolkit ( see license ) Apache Commons Exec ( see license ) Apache Commons IO ( see license ) Apache POI ( see license ) Bash Editor ( see license ) Bootstrap Treeview ( see license ) Bootstrap ( see license ) Busybox ( see license ) Chosen ( see license ) Clearcase plugin for Eclipse ( see license ) CPython ( see license ) CSV Edit ( see license ) DataTables ( see license ) Eclipse Color Theme ( see license ) Eclipse Platform and Eclipse Plugins ( see license ) Eclipse Solargraph ( see license ) Editor Config ( see license ) Emacs+ ( see license ) EPIC ( see license ) Equo Chromium FreeMarker ( see license ) highlight.js ( see license ) Indent Guide ( see license ) j2v8 ( see license ) Java Development Kit (JDK) ( see license ) java-diff-utils ( see license ) jQuery ( see license ) jsoup ( see license ) jtcl ( see license ) juniversalchardet ( see license ) lz-string ( see license ) morris.js ( see license ) OSVVM ( see license ) P4Eclipse ( see license ) PMD ( see license ) PyDev ( see license ) re2j ( see license ) ReadTheDocs Theme ( see license ) Selectize.js ( see license ) SimpleXML ( see license ) Sphinx ( see license ) SVNKit ( see license ) SWT/XML ( see license ) SystemC ( see license ) Ubuntu Font ( see license ) Underscore.js ( see license ) UVM ( see license ) UVM-ML ( see license ) UVVM ( see license ) viPlugin (DVT includes a version of Michael Bartl\u00e2\u0080\u0099s viPlugin) VMM ( see license ) VSCodium ( see license ) WaveDrom ( see license ) XMLBeans ( see license ) XULRunner ( see license ) YAML Editor ( see license ) Legal Notices Back to top",
    "section_path": [],
    "tokens": 406,
    "source": "scraped"
  },
  {
    "id": "2f3a8bbe-eae9-4d0e-8d06-ede2db19d821",
    "title": "Join Extern and Implementation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/join-extern-and-implementation.html",
    "content": "Join Extern and Implementation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Join Extern and Implementation You can easily merge the \u00e2\u0080\u0098extern\u00e2\u0080\u0099 prototype of a method or constraint with its out-of-block implementation. Place the editor cursor either on the method\u00e2\u0080\u0099s prototype or on the implementation and press Ctrl + 1 , select Join extern \u00e2\u0080\u00a6 prototype and implementation from the list of quick assist proposals and press Enter . The implementation is joined with the prototype: Tip You can change the method signature or constraint block by editing the Method Code Templates or Constraint Code Templates . Tip You can also Right - Click in the editor and go to Refactor > Join extern and implementation . Move Selection to New File Split into Extern and Implementation Back to top",
    "section_path": [],
    "tokens": 152,
    "source": "scraped"
  },
  {
    "id": "62162772-f8b2-4817-aef6-a1caa8df45c6",
    "title": "Correct Spelling In Comments and Strings | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/correct-spelling-in-comments-and-strings.html",
    "content": "Correct Spelling In Comments and Strings | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Correct Spelling In Comments and Strings DVT provides a quick way to fix typos in comments and strings. Place the editor cursor on the underlined word and press Ctrl + 1 , select Change to \u00e2\u0080\u00a6 from the list of quick fix proposals and press Enter . The misspelled word is replaced with a correct word of your choice. Add Virtual Qualifier to Interface Type Create Class In New File Back to top",
    "section_path": [],
    "tokens": 109,
    "source": "scraped"
  },
  {
    "id": "641b32b7-6897-40fc-8e5a-86e7ab7deaab",
    "title": "How does DVT integrate with CVS? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-does-dvt-integrate-with-cvs.html",
    "content": "How does DVT integrate with CVS? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How does DVT integrate with CVS? Get the CVS plugin The simplest way is to install DVT from a prepacked distribution that includes the CVS plugin for Eclipse. For an Eclipse installation that does not include the CVS plugin, go to Help \u00e2\u0080\u00a3 Install New Software , select Work With: All Available Sites then type CVS in the filter text input. After filtering is done, you should select Eclipse CVS Client under Collaboration , and follow the next steps of the wizard. Configure the CVS repository After the plug-in is installed, create a repository connection: go to Window \u00e2\u0080\u00a3 Open Perspective \u00e2\u0080\u00a3 Other , then select CVS Repository Exploring . Now, in the CVS Repositories view on the left side, right-click \u00e2\u0080\u00a3 New \u00e2\u0080\u00a3 Repository Location and fill in the connection information. After this step is completed successfully you can browse your repository and check out projects, or you should find in the Navigator View that the previously checked out projects are now recognized as shared projects. Tip If you right - click on a file/directory in the Navigator View , you should have common operations under the Team menu (Update/Commit/Show history etc). How does DVT integrate with emacs? How to set an environment variable within a Run Configuration? Back to top",
    "section_path": [],
    "tokens": 248,
    "source": "scraped"
  },
  {
    "id": "f2944ec5-2af8-424c-b814-4de7305f8785",
    "title": "Troubleshooting | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/troubleshooting.html",
    "content": "Troubleshooting | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Troubleshooting At its core, an LLM functions as a next-token prediction engine. It predicts the most likely next word in a sequence based on the context provided by the preceding text. The process of generating text usually involves some level of randomness in the choice of the next token. This randomness allows the model to produce varied and creative outputs instead of the same response every time given the same input, making the generation process non-deterministic. Why do I get unexpected replies? There are a couple of things you can do to improve the replies: Prompt engineering To increase the quality of a reply follow this guideline when writing a request to the LLM: Be Specific and Clear: Clearly define your question or task to minimize ambiguity. Specific questions and tasks usually lead to more accurate and relevant responses. Provide Context : Give the model adequate context to work with. This can include relevant code sections and accurate domain specific information. Use Prompt Snippets to easily do this. Use Examples : Include examples in your prompt. This can help the LLM \u00e2\u0080\u009cunderstand\u00e2\u0080\u009d the format or style you\u00e2\u0080\u0099re aiming for in the response. Set Explicit Constraints : If you have specific constraints regarding length, format, or content, make these clear in your prompt. Save the constraints as Custom Snippets and reuse them every time you need. Iterate and Refine : Experiment with different phrasings and structures to find what works best. Small adjustments can often lead to significant improvements in the quality of generated replies. The Chat features are designed to help you refine the prompt. Regenerate the reply Generate a new reply from the LLM by clicking the Regenerate button above the LLM reply in the chat. Due to the LLM\u00e2\u0080\u0099s non-deterministic characteristics, this can lead to different responses that may be more adequate. Alternatively, you can use natural language and request the LLM to generate additional solutions for your problem. Try a different LLM Sometimes, a specific LLM is just not fit for the task you are trying to accomplish. You can easily change the LLM using the Set Default Language Model command or you can regenerate just a specific reply with a different model using the Switch Language Model dropdown above the reply. If you\u00e2\u0080\u0099re using a local Ollama model, try getting a different version of that model with more parameters if your hardware allows, or change it with a completely different model. Why do I get different replies for the same request? The LLM generation process is non-deterministic. Most models can be tuned using different parameters and two commonly used parameters that control the randomness and variability are: Temperature : Higher temperature will make replies more, random, creative and diverse, lower temperature will get you more deterministic, factual and consistent replies. Top P : Lower values reduce diversity and focus on more probable words, higher values lead to a more diverse vocabulary and phrasing. These parameters can be set in the models.json file (see Advanced LLM Configuration ). What to do if I get errors or find a bug? When unexpected things happen, the AI Assistant will notify you with a popup in the bottom right corner. For in depth debug information you can check the AI Assistant log under the DVT AI Output Panel in VS Code or the DVT AI Console View in Eclipse. There are several types of information displayed in the log: debug information warnings and errors configuration information (e.g.\u00c2\u00a0API keys) raw messages exchanged between AI Assistants and the LLM provider Note The log contents contain sensitive information, for example sections of code, so these logs are not collected when you report an issue in DVT IDE. Add Comments to Selected Element Content Filters On this page Why do I get unexpected replies? Why do I get different replies for the same request? What to do if I get errors or find a bug? Back to top",
    "section_path": [],
    "tokens": 686,
    "source": "scraped"
  },
  {
    "id": "606d6e27-7576-47f7-b158-ad3f789f5a9e",
    "title": "Module Automatic Instantiation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/module-automatic-instantiation/index.html",
    "content": "Module Automatic Instantiation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Module Automatic Instantiation Autoinstance Using Autocomplete Autoinstance Using Drag and Drop Generate Getters and Setters Autoinstance Using Autocomplete Back to top",
    "section_path": [],
    "tokens": 54,
    "source": "scraped"
  },
  {
    "id": "94dfea59-864d-4d34-8031-8ca5e6fb4f42",
    "title": "Can I use vi/vim along with DVT? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/can-i-use-vivim-along-with-dvt.html",
    "content": "Can I use vi/vim along with DVT? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Can I use vi/vim along with DVT? DVT contains ViPlugin OEM ( http://www.viplugin.com/viplugin/index.php/viplugin ) for vi emulation.\nTo use it, download a prepacked version of DVT or install viPlugin for DVT feature from DVT Update Site. Below you can find a list with other vi emulation plugins for Eclipse: http://vrapper.sourceforge.net/home free easy install from update site has some basic vi commands that work in editors DVT editors work perfect with it http://eclim.org free hard to install integrates Eclipse in vi or vi in Eclipse (it has many modes) has not been tested extensively with DVT http://vimplugin.org free easy to install from update site, but requires needs JDT (Java Development Tools) installed in eclipse and gvim in os it replaces editor window in eclipse with gvim window, therefore no DVT editor feature is preserved How do I associate a project with both DVT and CDT? Can I perform dos2unix or unix2dos from DVT? Back to top",
    "section_path": [],
    "tokens": 192,
    "source": "scraped"
  },
  {
    "id": "a95c7ef0-4f9f-46fc-8961-69a2146ca6f8",
    "title": "I want to use an alias in a DVT Generic Run Configuration, but it\u00e2\u0080\u0099s not recognized | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/i-want-to-use-an-alias-in-a-dvt-generic-run-configuration-but-its-not-recognized.html",
    "content": "I want to use an alias in a DVT Generic Run Configuration, but it\u00e2\u0080\u0099s not recognized | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide I want to use an alias in a DVT Generic Run Configuration, but it\u00e2\u0080\u0099s not recognized More details here . Rebuild shortcut (Ctrl + Alt + R) does not work How to set multiple paths as sources of predefined projects ? Back to top",
    "section_path": [],
    "tokens": 90,
    "source": "scraped"
  },
  {
    "id": "4cba9ea6-f9d2-4752-b864-1e1d3e80e45e",
    "title": "Custom Dialog Snapshots | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/custom-dialogs/custom-dialog-snapshots.html",
    "content": "Custom Dialog Snapshots | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Custom Dialog Snapshots All the values that you enter in various input fields of a Custom Dialog are automatically saved as a \u00e2\u0080\u009csnapshot\u00e2\u0080\u009d. In other words, the snapshot stores the Custom Dialog state. The next time you open the Custom Dialog, you\u00e2\u0080\u0099ll see the values that you previously entered, as they are restored from the snapshot. At any time you can explicitly save the dialog state as a snapshot with a meaningful name. Both automatically saved and explicitly saved snapshots are stored in the <project_root>/.dvt/<dialog_name>.snapshots.xml file. Besides being a snapshots repository, this file is a mean to share snapshots with colleagues working on the same project. In addition, as another mean to share, you can  \u00e2\u0080\u009ccopy to clipboard\u00e2\u0080\u009d the current dialog inputs and send them, for example by email or instant messaging, to a colleague who will \u00e2\u0080\u009cpaste from clipboard\u00e2\u0080\u009d to fill-in the dialog inputs with your values. If you chose a snapshot and change a few values, to avoid overwriting the original snapshot, a new timestamped version is automatically created. For example, assuming you select snapshot \u00e2\u0080\u009cbug_235\u00e2\u0080\u009d and change the seed input field, you will get a new timestamped snapshot called \u00e2\u0080\u009cbug_235 [2015-02-20 14:02:53]\u00e2\u0080\u009d. This is to avoid breaking the original snapshot. You can explicitly save \u00e2\u0080\u009cbug_235 [2015-02-20 14:02:53]\u00e2\u0080\u009d as \u00e2\u0080\u009cbug_235\u00e2\u0080\u009d to update the original snapshot. You can at any time explicitly save \u00e2\u0080\u009cbug_235\u00e2\u0080\u009d after you change some values. When there are no changes compared with the saved snapshot, a timestamped snapshot will not be created. When there are changes, if a previous timestamped snapshot already exists, it will be deleted and a new timestamped snapshot is created. This is to avoid accumulating many timestamped snapshots. A \u00e2\u0080\u009cdefault\u00e2\u0080\u009d snapshot is always available and it contains the dialog state as specified in the Custom Dialog XML definition. It cannot be overwritten. Actions To load an existing snapshot select the desired one from the combo (see #1). The dropdown menu (see #2) provides the following actions: Save - Save the dialog state into the current snapshot Save as\u00e2\u0080\u00a6 - Save the dialog state as a new snapshot (or overwrite an existing one) Copy To Clipboard - Copies to clipboard the xml dialog state Paste From Clipboard - Loads from clipboard the xml dialog state Custom Dialog Snapshots File Syntax (XML) <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <dialog-snapshots last-snapshot=\"#LAST_RUNNED_SNAPSHOT#\" version=\"1\"> <-- #COMMENT# --> <snapshot name=\"#SNAPSHOT_NAME_1#\" > <element path=\"#ELEMENT_PATH_1#\" value=\"#ELEMENT_VALUE_1\" /> ... <element path=\"#ELEMENT_PATH_N#\" value=\"#ELEMENT_VALUE_N\" /> </snapshot> ... <snapshot name=\"#SNAPSHOT_NAME_N#\" timestamp=\"true\"> <!-- A timestamped snapshot. Timestamped snapshots are maintained by DVT.--> <!-- Avoid defining timestamped snapshots! --> ... </snapshot> </dialog-snapshots> #LAST_RUNNED_SNAPSHOT# Mandatory Name of the last ran snapshot #COMMENT# Any valid XML comment (must not contain --> ) #SNAPSHOT_NAME# Mandatory Uniquely identifies the snapshot #ELEMENT_PATH# Mandatory Uniquely identifies a widget from the custom dialog It is standard XML XPath that has the following structure: \u00e2\u0080\u009c/Composite/Composite[1]/Group[1]/Button[1]\u00e2\u0080\u009d #ELEMENT_VALUE# Mandatory Value of the widget selected by #ELEMENT_PATH# SWT/XML Reference Command Line Interface On this page Custom Dialog Snapshots File Syntax (XML) Back to top",
    "section_path": [],
    "tokens": 529,
    "source": "scraped"
  },
  {
    "id": "6ee0a0e4-81b2-48c5-b259-39ff6fea5806",
    "title": "Where can I find DVT Help? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/where-can-i-find-dvt-help.html",
    "content": "Where can I find DVT Help? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Where can I find DVT Help? You can access it by Help \u00e2\u0080\u00a3 Help Contents and Eclipse Help System is opened. The DVT Help is just another chapter inside Eclipse Help . I am new to Eclipse, where should I start from? How do I see and configure the key shortcuts? Back to top",
    "section_path": [],
    "tokens": 90,
    "source": "scraped"
  },
  {
    "id": "e3553c76-2aa1-4ef3-a51a-ffdda5e2cdc8",
    "title": "Key Terms | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/key-terms.html",
    "content": "Key Terms | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Key Terms Sessions An AI Assistant session represents a task with a clear target. The goal of a session should be focused on a specific work item. Sessions targeting the editor typically have a single request and the reply goes directly to the editor, replacing existing code or inserting new code. Sessions targeting the chat allow you to exchange multiple messages with the LLM. A chat session has one or more message pairs (user request and LLM reply ). Each LLM reply comes as a continuation of the previous messages. Changing a request or regenerating a reply generates a new version of the session. These versions can be navigated using the arrows above the message where the session branched into different versions. Blueprints Besides starting an empty chat session, you can start an editor or chat session from a blueprint. Blueprints contain at least a request, representing a specific task, that the LLM will reply to. It\u00e2\u0080\u0099s also possible to have a list of requests and replies that bring the session to a specific state. When the last blueprint message is a user message, sessions started from blueprints will automatically pull a reply from the LLM. Blueprints also specify the target of the LLM reply. It can be a new chat or the editor. AI Assistant has a set of built-in blueprints for common tasks. You can also define custom blueprints for later use or to share them with the team (see Custom Blueprints ) Prompting Requests are written in a chat prompt or stored in a blueprint. Symbols and Snippets facilitate request writing, especially when you want to provide more context to the LLM. Before a request is sent, the symbols and snippets are expanded. When using the chat, the expanded request can be inspected before or after they are sent. Symbols Symbols (#symbol) expand to the definition of a type, macro, \u00e2\u0080\u00a6, or the contents of a file. They are a convenient and quick method to provide additional context to the LLM. Examples: #i2c_transfer - expands to the declaration of i2c_transfer class #module:spi_top - expands to the declaration of spi_top module #class:ahb* - expands to the declarations of all classes with names that start with \u00e2\u0080\u009cahb\u00e2\u0080\u009d #file:i2c_driver.sv - expands to the contents of the compiled file i2c_driver.sv #file:spi* - expands to the contents of all compiled files with names that start with \u00e2\u0080\u009cspi\u00e2\u0080\u009d #file:relative/path - expands to the contents of a file relative to the project root directory #file:/absolute/path/*.sv - expands to the contents of all files with the \u00e2\u0080\u009csv\u00e2\u0080\u009d extension inside the directory with the given absolute path #file:/absolute/path:10-20 - expands to lines 10-20 from the file with the given absolute path Snippets Snippets (@snippet \u00e2\u0080\u00a6) expand to different text pieces depending on their purpose. They are a convenient and quick method to provide additional context. AI Assistant provides a library of prompt snippets. Some of them make use of the information collected by DVT during compilation, others are just reusable instructions you can use in your requests. In addition to these snippets, you can also define your custom snippets for later use or to share them with the team (see Custom Snippets ). Getting Started Working in Chat On this page Sessions Blueprints Prompting Symbols Snippets Back to top",
    "section_path": [],
    "tokens": 575,
    "source": "scraped"
  },
  {
    "id": "674ef899-9240-4275-8d33-0740f6276b64",
    "title": "Smart Log | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/external-tools-integration/smart-log.html",
    "content": "Smart Log | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Smart Log For any invocation you can either use predefined filter sets for specific tools, or define your own filters and style maps in order to view the simulation output like the one below. See also Smart Log - Filters Smart Log - Hyperlinks Smart Log - Styles Run Configurations Smart Log - Filters To define a new filter for a DVT Generic run configuration go to the Filters Tab, click New\u00e2\u0080\u00a6 and specify filter parameters. The main filter parameters are: Name - The name of the filter Severity - The severity of the filter. Pattern - The filter pattern.  Use ${file} to indicate a file hyper-link, and ${line} to indicate the line to jump to.  Use (?<TAG_NAME>) to tag a group that will be used to randomly or explicitly assign a style (green bold for example - see Smart Log - Styles ). In the Filters Tab you can also set other parameters such as: The maximum number of characters per line ( 1 ) The maximum number of consecutive lines ( 2 ) Whether links should jump to resources from the current working set ( 5 ) You can browse through predefined filters to see more examples ( 3 ). You can also add a filter pattern for your console title ( 4 ). This should contain capturing groups whose contents will be appended to the console title. For example the pattern in the image above: \u00e2\u0080\u009cDVT_CONSOLE_TITLEs+(w+)\u00e2\u0080\u009d will append  to the console title when it will match a text like \u00e2\u0080\u009cDVT_CONSOLE_TITLE my_title\u00e2\u0080\u009d in the console output. Smart Log - Hyperlinks Using the predefined filters enables you access to hyperlinks for files and also for some error codes of certain simulators. By clicking on a hyperlinked error code a dialog pops-up with the explanation of that error provided by the simulator help tool. DVT supports verror for Questa and nchelp for IUS. You can customize the name of these tools by setting the following environment variables: DVT_VERROR_TOOL_NAME and DVT_NCHELP_TOOL_NAME You can further customize this feature by creating your own regular expression for a custom hyperlink that launches a defined launch configuration. Use ${cmd:run_configuration:regular_expression} to define these custom hyperlinks in your filter pattern, where run_configuration is the name of the launch configuration that is going to be launched when clicking on the hyperlink and regular_expression is the regular expression whose matched result will be hyperlinked. For example when running a launch configuration that outputs the location of a log file like this one: in order to hyperlink the location of the file a pattern needs to be defined: To summarize the content of the log file and display just the number of errors, warnings and infos in a new console: the \u00e2\u0080\u009cSummarize_log\u00e2\u0080\u009d launch configuration is defined with the $DVT_HYPERLINK_COMMAND_CAPTURING_GROUP_0 environment variable Smart Log - Styles Assuming the filter MyTrace has a pattern Trace  (?<AGENT_KIND>[a-zA-Z_0-9]+) (?<INSTANCE>[a-zA-Z_0-9]+).* that contains 2 groups tagged <AGENT_KIND> and <INSTANCE>, DVT will randomly assign a color for each unique combination (AGENT_KIND_match, INSTANCE_match). You\u00e2\u0080\u0099ll get different colors for: Master M1 (<AGENT_KIND> group matched \u00e2\u0080\u009cMaster\u00e2\u0080\u009d and <INSTANCE> matched \u00e2\u0080\u009cM1\u00e2\u0080\u009d) Master M2 (<AGENT_KIND> group matched \u00e2\u0080\u009cMaster\u00e2\u0080\u009d and <INSTANCE> matched \u00e2\u0080\u009cM2\u00e2\u0080\u009d) Slave S1 (<AGENT_KIND> group matched \u00e2\u0080\u009cSlave\u00e2\u0080\u009d and <INSTANCE> matched \u00e2\u0080\u009cS1\u00e2\u0080\u009d) Slave S2 (<AGENT_KIND> group matched \u00e2\u0080\u009cSlave\u00e2\u0080\u009d and <INSTANCE> matched \u00e2\u0080\u009cS2\u00e2\u0080\u009d) You can manually assign colors by editing the .dvt/log_styles.xml file: You can easily share log styles using Managed Settings . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <section name=\"attributes\"> <item key=\"version\" value=\"1\"/> <list key=\"log_styles\"> <item value=\"PATTERN_NAME=MyTrace, AGENT_KIND=Master, INSTANCE=M1, COLOR=#FF8000, FONT_STYLE=BOLD, BORDER_STYLE=NONE\"/> <item value=\"PATTERN_NAME=MyTrace, AGENT_KIND=Master, INSTANCE=M2, COLOR=#008000, FONT_STYLE=BOLD, BORDER_STYLE=NONE\"/> <item value=\"PATTERN_NAME=MyTrace, AGENT_KIND=Slave, INSTANCE=S1, COLOR=#800080, FONT_STYLE=BOLD, BORDER_STYLE=NONE\"/> <item value=\"PATTERN_NAME=MyTrace, AGENT_KIND=Slave, INSTANCE=S2, COLOR=#8080FF, FONT_STYLE=BOLD, BORDER_STYLE=NONE\"/> </list> </section> For example the first line means \u00e2\u0080\u009cIf pattern MyTrace matched and AGENT_KIND is \u00e2\u0080\u0098Master\u00e2\u0080\u0099 and INSTANCE is \u00e2\u0080\u0098M1\u00e2\u0080\u0099 set color to \u00e2\u0080\u00a6\u00e2\u0080\u009d. You can use regular expressions, for example AGENT_KIND=M*. You can specify the COLOR , the FONT_STYLE (BOLD or ITALIC), and the BORDER_STYLE (DOT or SOLID or NONE). Note If you want to also use the random color palette available for the predefined filters, you should add the following item in the .dvt/log_styles.xml file: Run Configurations External Builders On this page Smart Log - Filters Smart Log - Hyperlinks Smart Log - Styles Back to top",
    "section_path": [],
    "tokens": 729,
    "source": "scraped"
  },
  {
    "id": "97d011a9-2c5e-4bac-a6b2-94eca66a3079",
    "title": "Bind Method Call Arguments by Name | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/bind-method-call-arguments-by-name.html",
    "content": "Bind Method Call Arguments by Name | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Bind Method Call Arguments by Name You can easily convert the argument bindings of a method call from positional to named. Place the cursor on a method call and press Ctrl + 1 , select Bind method call arguments by name from the list of quick assist proposals and press Enter . The argument bindings of the method call are converted to named. Tip You can also Right + Click in the editor and go to Refactor > Bind Method Call Arguments by Name . Rename File Bind Method Call Arguments by Position Back to top",
    "section_path": [],
    "tokens": 132,
    "source": "scraped"
  },
  {
    "id": "f31c2cae-8e45-4389-9669-c7b27f24b7a2",
    "title": "How do I associate a project with both DVT and CDT? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-do-i-associate-a-project-with-both-dvt-and-cdt.html",
    "content": "How do I associate a project with both DVT and CDT? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How do I associate a project with both DVT and CDT? To associate a project or remove the association of a project with DVT or CDT, just right - click on the project and choose Change DVT Nature . The dialog allows you to associate or remove the association with SystemVerilog, VHDL, e Language and C/C++. The C/C++ language appears only when CDT and DVT CDT Integration features are installed. Alternatively, C/C++ association can be achieved using File \u00e2\u0080\u00a3 New \u00e2\u0080\u00a3 Other and select C/C++ \u00e2\u0080\u00a3 Convert to a C/C++ project . Subversive vs Subclipse Can I use vi/vim along with DVT? Back to top",
    "section_path": [],
    "tokens": 146,
    "source": "scraped"
  },
  {
    "id": "df226583-cd4f-409b-8d8b-98c205ec6760",
    "title": "UVM Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/index.html",
    "content": "UVM Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Support Runtime UVM Configuration Queries Static UVM Configuration Queries UVM Browser UVM Compliance Review UVM Content Filters UVM Field Editor Triggering Interface Problems Tips UVM Runtime Elaboration UVM Sequence Tree UVM Smart Log UVM Templates UVM Verification Hierarchy OVM to UVM Migration Triggering Preferences Review changes OVM Templates Runtime UVM Configuration Queries Back to top",
    "section_path": [],
    "tokens": 88,
    "source": "scraped"
  },
  {
    "id": "cffe7d80-fd3f-432d-8bfa-ecd88cfe0329",
    "title": "Basic Tutorial | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/getting-started/basic-tutorial.html",
    "content": "Basic Tutorial | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Basic Tutorial This tutorial provides a step by step walk-through of the SystemVerilog development environment. Switch to the DVT Perspective The DVT Perspective provides a workbench layout with many useful views and shortcuts at hand for developing SystemVerilog code, for example the type browser, class hierarchy browser etc. From menu Window \u00e2\u0080\u00a3 Open Perspective \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 choose DVT You can customize and save a perspective. In order to further speed-up the development, at any time you can switch between various perspectives with different tool (views) layouts. For example you can use one perspective for writing code (the editor will take most of the real estate) and another perspective for code navigation (type browser will be a significant component). The default DVT perspective looks like this: Open a Project A project corresponds to a specific directory on the disk. The project is presented in the Navigator View - a file browser component that helps you browse the project directory contents. See also What is a Project Create a New Project Invoke the New Project Wizard: choose menu File \u00e2\u0080\u00a3 New \u00e2\u0080\u00a3 DVT Project . Specify the Project Directory It can be a directory that already contains sources or a new directory that will be created. Specify the Project Name By default, the project\u00e2\u0080\u0099s name is the last segment of the project\u00e2\u0080\u0099s directory path (e.g. /tmp/path1/path2/p_name > p_name ). You can change this name by selecting Custom . Note If Project Directory points to an existing project, you cannot change its name. Open a Predefined Project You may open one of the predefined projects that DVT ships with and continue to explore the DVT features. For more details see Predefined Projects . Specify the Project Nature . If the project does not exist or it does not contain any nature, you must select at least one nature. This way DVT will compile the respective sources. Configure the Build In order to provide advanced functionality (like hyperlinks, autocomplete, design and class hierarchy, error signaling, etc.) DVT analyzes the source code files in your project. This analysis process is called build. In order to build, DVT uses the arguments that you specify in one of the <name>.build files located in the .dvt folder of your project. The default build configuration is .dvt/default.build. Here you list compilation directives in a similar way you would pass arguments to any simulator. When a project is created using the New DVT Project Wizard, the default build configuration file contains the +dvt_init_auto directive, that triggers the DVT auto-config mechanism. For more details, see Auto-config . The DVT auto-configuration algorithm automatically detects and analyses existing Intel(Altera) Quartus or Xilinx ISE/Vivado projects in the project root directory to generate a build configuration. For more details, see FPGA Support . If no source code files are found for compilation, you\u00e2\u0080\u0099ll be notified there is nothing to build. To configure the build follow the link in the build notification dialog or open the .dvt/default.build file. See also Build Configurations . Build the Project Once you specified the files you want to compile, the incdirs to be used for `include and so on, you should rebuild the project. In general, every time you change the .build configuration, you should rebuild. In order to rebuild you click the Rebuild button . While editing source files, a project is incrementally compiled as soon as you save, unless the menu option Project \u00e2\u0080\u00a3 Build Automatically is un-checked. The building progress is reported in the Progress View . Depending on your configuration, you may also see detailed information in the Console View . Inspect the Compilation Errors Syntax errors are detected as you type. They are indicated in the vertical bars of the editor (right - for the visible code, left - for the full file). If you keep the mouse over the marker on the left you\u00e2\u0080\u0099ll see more details about the error. Same tooltip will appear if you keep the mouse over the marker on the editor right bar. You can also click on the marker to jump to the error. If a project contains errors, for example syntax errors, it will be indicated using decorators : You can use the Problems View to inspect the errors. You can show the Problems View from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Problems . Double clicking on some error will jump to the source location. See Comments in Tooltips When you position the mouse over a type, method, field etc., a tooltip will pop-up showing information on corresponding declaration. Some examples are presented below. In a similar way you\u00e2\u0080\u0099ll see information on fields, events, variables etc., predefined or not. Type Info Macro Info Task Info The information presented in the tooltip is created using the comment on top of the declaration. For example, given the following declaration of a field: the corresponding tooltip will look like this: Use Hyperlinks to Move Around in the Code If you place the mouse over a type, method, field etc. and press the Ctrl key, a hyperlink will be presented. Click on the hyperlink to jump to definition.\nYou can also jump to a definition if you put the cursor on the relevant name and press F3 . You can hyperlink and jump to an imported file. You can hyperlink and jump to a macro. Quickly Open a Type (Class, Module, Interface) You can quickly open a specific type definition. Press Ctrl + Shift + T . The Quick Types View will pop-up and you can enter any regular expression to locate a type. Select and press Enter or Click to jump to its definition. Quickly Inspect the Class Hierarchy You can quickly see inheritance tree for a class, task, function etc. Put the cursor over the entity name and press Ctrl + T . For example for functions you can also see the implementations along the hierarchy (icons are not grayed). Quickly Open a File You can quickly open a file that is included via the top files. Just press Ctrl + I .The Quick Compile Order View will pop-up and you can enter any regular expression to locate a file. Select and press Enter or click to open the file. You can also see the include tree of the files in your project in the Compile Order View . Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Compile Order . This is the Compile Order View. Quickly Move Inside the Editor Press Ctrl + O to open the Quick Outline for an overview of your file. You can enter any regular expression to locate an entity to jump to the current file. You can also see the outline in the Outline View . Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Outline . Inspect the Class Hierarchy and Class Members Position the cursor on the relevant name and press F4 or right click and choose Show \u00e2\u0080\u00a3 Type Hierarchy from the menu. The Type Hierarchy View will present: the inheritance tree (for example parents and children of a class) members Inspect the Design Hierarchy Position the cursor on a module name and press Shift + F4 or right click and choose Show \u00e2\u0080\u00a3 Design Hierarchy from the menu. The Design Hierarchy View opens with the chosen element set as the top of the hierarchy. Inspect the Verification Hierarchy Position the cursor on a UVM class name and press Shift + F6 or right click and choose Show \u00e2\u0080\u00a3 Verification Hierarchy from the menu. The Verification Hierarchy View opens with the chosen class set as the top of the hierarchy. Browse Through All the Available Types (Classes, Modules, Interfaces) You can explore all the types like classes, modules, interfaces or structs\u00e2\u0080\u00a6 that are defined in your project using the Types View . Go to menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Types to open the Types View . Look for the Implementation of an Extern Function or Task Position the cursor on the relevant name and press Shift + F3 or right click and choose Show \u00e2\u0080\u00a3 Layers from the menu. Search for Entities You can search for a specific type, method etc. in the current project or whole workspace. Press Ctrl + H to pop-up the search dialog. The results are presented in the Search View . Use Content Assist (Autocomplete) Content assist provides you with a list of suggested completions for partially entered text. Proposals are context dependent and include accessible fields, methods, variables, OVM macros etc. as well as templates for various constructs. Press Ctrl + Space to trigger content assist. Content assist is triggered automatically in some contexts, for example when you type in a . (dot) in the editor after a class type field name. Proposals are presented in a list for you to choose from. Moving through proposals you can quickly see the related documentation. Press Enter or click to select a proposal or Esc to cancel the assist. Use Code Templates When you trigger autocomplete using Ctrl + Space , template suggestions may appear in the proposal list. To define templates go to the DVT \u00e2\u0080\u00a3 Code Templates preference page (via menu Window \u00e2\u0080\u00a3 Preferences ) and select SystemVerilog from Select Nature . Click the New button to define a new template. The template name is important for proposal filtering based on already typed text. Use Module Auto Instance You need to type the first letters of the module name, then press Ctrl + Space three (3) times. You can recognize module instances by their icon, it looks like a chip with ports ready to be glued in. You can customize what gets generated from menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Editor \u00e2\u0080\u00a3 Content Assist in the Auto-instantiation section. Expand Macros (Apply Preprocessing) You can apply preprocessing over a selected section of code in order to see how macros are expanded. You have multiple options in the right click context menu Macros . To expand them in the source file, choose Expand One Level Inline or Expand All Levels Inline . To expand them in a temporary file, choose Expand One Level or Expand All Levels . Note You can also expand all macros in the current file by selecting either Expand All Macros Inline , for expansion in the source file, or Expand All Macros , for expansion in a temporary file. Trace Macro Errors To debug macro usage errors (especially if macros in macros are used) you can see how the error is propagated from macro to macro (the error trace) either by: going with the mouse over the error marker on the left and right click or selecting the error in the Problems View, right click and choosing Macro Trace The macro error trace will be presented in the Console View with hyperlinks to source. Track Tasks using TODO Markers If you place TODO markers in your code they are recognized and presented in the Tasks View . This is a mean to insert reminders, preserve, track and share them with your team. You can use TODO markers inside comments. FIXME (high priority), TODO and XXX (low priority) are recognized. Go to menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Tasks to open the Tasks View . Double click on a task to jump to the marker definition. Quickly See the Current Scope in the Status Bar The scope at cursor (current function/class/module\u00e2\u0080\u00a6) is always presented in the status bar . Fold Code Regions in Order to Improve Readability Use the Expand All button or the Collapse All button from the toolbar or from right click menu Source \u00e2\u0080\u00a3 Folding to unfold/fold the current file. Access the Context Sensitive Help A focused set of help topics that is related to the current context can be shown to users on demand using context-sensitive help. This form of user assistance is delivered to users when a platform-specific trigger is activated (e.g. F1 key on Windows, Ctrl + F1 on GTK, Help key on Carbon): Backup and Local History Build Configurations On this page Switch to the DVT Perspective Open a Project Create a New Project Configure the Build Build the Project Inspect the Compilation Errors See Comments in Tooltips Use Hyperlinks to Move Around in the Code Quickly Open a Type (Class, Module, Interface) Quickly Inspect the Class Hierarchy Quickly Open a File Quickly Move Inside the Editor Inspect the Class Hierarchy and Class Members Inspect the Design Hierarchy Inspect the Verification Hierarchy Browse Through All the Available Types (Classes, Modules, Interfaces) Look for the Implementation of an Extern Function or Task Search for Entities Use Content Assist (Autocomplete) Use Code Templates Use Module Auto Instance Expand Macros (Apply Preprocessing) Trace Macro Errors Track Tasks using TODO Markers Quickly See the Current Scope in the Status Bar Fold Code Regions in Order to Improve Readability Access the Context Sensitive Help Back to top",
    "section_path": [],
    "tokens": 2196,
    "source": "scraped"
  },
  {
    "id": "712d3514-6e22-4dd6-9ac2-3ad035dbc101",
    "title": "Makefile Example | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/command-line-interface/makefile-example.html",
    "content": "Makefile Example | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Makefile Example If you plan to integrate DVT in a flow which uses Make, you can find an example\nMakefile inside the uvm-1.2_ubus predefined project: cd $DVT_HOME /predefined_projects/uvm-1.2_ubus/examples/ # default target prints the usage make -f Makefile.dvt # Target dvt_gen creates the project directory # and generates the project configuration files make -f Makefile.dvt dvt_gen # Target dvt calls dvt_gen, starts DVT and creates the project make -f Makefile.dvt dvt # target dvt con Examples Commands Back to top",
    "section_path": [],
    "tokens": 111,
    "source": "scraped"
  },
  {
    "id": "7d63e90e-bd2d-4665-8689-d126b8f74fb2",
    "title": "OVM to UVM Migration | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/ovm-to-uvm-migration.html",
    "content": "OVM to UVM Migration | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide OVM to UVM Migration DVT provides an OVM to UVM migration wizard that automatically performs all the necessary changes within an existing OVM project. The changes may also be reviewed and customized. Triggering Right click on a project in the Navigator View, then select Refactor > Migrate OVM to UVM . Preferences In the first page of the wizard you can configure: Refactor Script : the Refactoring Scripts to use for performing the migration. DVT is shipped with predefined scripts (e.g. OVM 2.1.1 to UVM 1.0 EA), but you can also use custom scripts tailored to your needs (just click Browse to point to a script file on your disk). You can see the content of the selected script by clicking Inspect . Skip Linked Resources : in general, linked resources are files located outside of the DVT project (like, for instance, the OVM library source files) so you might want the migration to skip them. Disable OVM Project : in case your project is configured with DVT as an OVM project, the wizard removes this configuration. Enable UVM Project : in case your project is not configured with DVT as an UVM project, the wizard adds this configuration. UVM Library Path : if you enable UVM, the UVM library is compiled up-front, and you must specify its location. You can may use system variables ($UVM_HOME in the snapshot below). Create UVM Linked Resource : for quick navigation in the library code, you may link (logical link, nothing is created on disk) the library files to your project. This way, although outside your project, the UVM sources will not be shown with gray icons and limited functionality. Name of the linked folder At this step you can either click OK to finish or Preview to inspect the changes that are about to be made. Review changes In the review page you can inspect the changes that will be performed, and filter out (uncheck) the changes you don\u00e2\u0080\u0099t want to perform. Select a file/change to see the source differences produced by the refacotring. Uncheck a file/change to prevent those changes from being applied. Click OK to apply the changes. UVM Verification Hierarchy VMM Support On this page Triggering Preferences Review changes Back to top",
    "section_path": [],
    "tokens": 407,
    "source": "scraped"
  },
  {
    "id": "1c3d72cc-f9d8-4030-9721-eb4f57e4b3c8",
    "title": "Waive Compilation Problems | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/waive-compilation-problems.html",
    "content": "Waive Compilation Problems | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Waive Compilation Problems DVT provides a quick and easy way to waive compilation problems from the editor. Place the editor cursor inside the problem highlight range (squiggle underline) and press Ctrl + 1 , select Waive \u00e2\u0080\u00a6 from the list of proposals and press Enter . You can change the default waiver severity, description, path and message in the pop-up dialog. Press Enter when done. The new waiver is automatically added to the .dvt/waivers.xml file and applied. Update Virtual Method Signature Quick Assist Proposals Back to top",
    "section_path": [],
    "tokens": 120,
    "source": "scraped"
  },
  {
    "id": "c0b70c14-df80-4b06-af37-7716e2ff6d22",
    "title": "Predefined Projects | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/predefined-projects/index.html",
    "content": "Predefined Projects | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Predefined Projects The predefined projects capability allows you to quickly access pre-configured project repositories. For example training labs or golden reference projects or projects that you commonly use. DVT searches for predefined projects in the directory indicated by the $DVT_PREDEFINED_PROJECTS system variable. In order to support directories spread on the disk, DVT also scans all directories indicated by any other system variable whose name starts with $DVT_PREDEFINED_PROJECTS_EXT_ . Hint For example, if you installed DVT from a distribution, by default $DVT_PREDEFINED_PROJECTS points to $DVT_HOME/predefined_projects . This is a project repository that you can use to explore the DVT features without the initial effort of configuring a project. At any time, if you wish to change the default location, you just need to point $DVT_PREDEFINED_PROJECTS to another location. Or add another pre-configured projects repository by pointing $DVT_PREDEFINED_PROJECTS_EXT_MY_NEW_REPOSITORY to it. Hint For example if you installed DVT as a plug-in on top of an existing Eclipse installation, $DVT_PREDEFINED_PROJECTS is unset. But you can download the predefined projects separately, and point the system variable to the folder where you extracted the predefined projects. Opening a Predefined Project To open a predefined project use the Predefined Project Wizard by selecting File \u00e2\u0080\u00a3 New \u00e2\u0080\u00a3 Example\u00e2\u0080\u00a6 then DVT Examples \u00e2\u0080\u00a3 DVT Predefined Project . You can also open the wizard from the DVT Project Wizard by clicking on the Predefined Projects link: Preferences In the wizard\u00e2\u0080\u0099s main window you can select the predefined project and the target directory . A copy of the selected project will be placed in the target directory. Keep in mind that: The target directory must not be a parent of or inside of the eclipse workspace path The target directory must be writable The selected project must not exist in the current workspace Quick filter - by project name; Available predefined projects; A short description of the selected project; If you want to change the default target directory (by default is the $HOME/dvt_predefined_projects_target ); Override target directory (if it already exists); A message dialog will pop up, with info about all $DVT_PREDEFINED_PROJECTS & $DVT_PREDEFINED_PROJECTS_EXT_* environment variables (indicates the directories where DVT scans for predefined projects); See the picture below: If all the settings are correct, click Finish . Set the License Getting Started On this page Opening a Predefined Project Preferences Back to top",
    "section_path": [],
    "tokens": 416,
    "source": "scraped"
  },
  {
    "id": "b128a034-25a9-491a-be45-42cfa9c17042",
    "title": "Runtime UVM Configuration Queries | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/runtime-uvm-configuration-queries.html",
    "content": "Runtime UVM Configuration Queries | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Runtime UVM Configuration Queries After setting a runtime elaborated Verification top, the following views are automatically populated to help you browse and debug the testbench structure and configuration: Verification Hierarchy View Registers View Factory Overrides View Config DB View UVM Support Static UVM Configuration Queries Back to top",
    "section_path": [],
    "tokens": 82,
    "source": "scraped"
  },
  {
    "id": "764bcea4-f6c9-44ad-8f25-94d20694a91d",
    "title": "Deprecated Settings Management (before DVT 3.5) | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/settings-management/deprecated-settings-management-before-dvt-35.html",
    "content": "Deprecated Settings Management (before DVT 3.5) | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Deprecated Settings Management (before DVT 3.5) DVT settings use the Eclipse Platform settings mechanism. By settings we refer to every option that can be configured by users and are restored between different invocations of DVT. There are 3 types of settings: Workspace Settings Project Settings Other Settings Workspace Settings Workspace settings are mainly those that can be set in Window \u00e2\u0080\u00a3 Preferences dialog.\nThese settings are persisted in the <workspace>/.metadata/.plugins/org.eclipse.core.runtime/.settings/ There are also other settings that can be stored under <workspace>/.metadata/ directory and can be considered workspace settings.\nSome of them are: The paths of the imported workspace projects The last position of different dialogs The settings of different views (e.g. column order) Project Settings These settings are always correlated to the project and are saved under the project directory.\nIt is very important to understand that every Eclipse plugin can create and maintain its own set of files with settings related to that plugin. .project file By default, the Eclipse Platform creates in every project directory a .project file that can contain the following information: Project name Project Natures (what kind of project is that and what are the plugins that should handle this project) Linked resources information (files or directories from outside the project that are linked into the project\u00e2\u0080\u0099s tree) .dvt directory This directory is used to keep all the settings needed for a DVT project. Some of the files stored in this directory are: *_top_files or default.build used for compilation configuration. (See Build Configurations ) *_linter_waivers.xml and *_linter_ruleset.xml used for linter configuration Other Settings There are another two places where DVT can store information. $HOME/.dvt.gtkrc file is used to store GTK Theme settings on linux platforms. Since Eclipse Platform 3.x doesn\u00e2\u0080\u0099t support themes, the feature uses this file to store the information about the colors. This file exists because the GTK hooks are done in the scripts before the platform is up. Be aware that GTK Theme settings are common between all DVT instances of that user. $HOME/.eclipse directory can hold two things: The Eclipse key ring settings, in case that any passwords are saved in DVT (e.g. CVS, SVN,\u00e2\u0080\u00a6 plugins can use passwords that can be protected with a master password). User installed plugins when it uses a global installation (DVT directory is read only) Importing Preferences From a Different Workspace Workspace Settings can be migrated between workspaces using different methods Using Import/Export Wizard Using dvt.sh Script Manually Using Import/Export Wizard The recommended way to migrate workspace settings is through the Preferences Import/Export Wizard. To export the settings, start DVT in the workspace containing the settings, go to File \u00e2\u0080\u00a3 Export \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Preferences , select Export All and choose the name of the file. To import the preferences, start DVT in the new workspace, go to File \u00e2\u0080\u00a3 Import \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Preferences , select Import All and choose the name of the file. Using dvt.sh Script Another way to import the settings from an old workspace into a new one is to use the dvt.sh script to start DVT. Argument Description workspace <dir> Path to the workspace directory. import_workspace_settings <dir> Path to the workspace from where the settings will be imported. force_import_workspace_settings <dir> Same as -import_workspace_settings, but it will overwrite target workspace settings. Manually To import workspace settings from an old workspace to a new one can be done just by copying the settings directory mkdir - p < new_workspace >/. metadata /. plugins / org . eclipse . core . runtime / cp - r < old_workspace >/. metadata /. plugins / org . eclipse . core . runtime /. settings / < new_workspace >/. metadata /. plugins / org . eclipse . core . runtime / Customizing Default Settings Using dvt.ini Eclipse Platform supports setting the default preferences for every new workspace. This option is useful in many situations: The user wants to use the same preferences in every new workspace, and using the export/import is an overhead The DVT application administrator wants to put a set of default settings for company wide deployment. The easiest way to customize the default settings is to set them in clean workspace and save them using the Show Changed Preferences Dialog in the distribution\u00e2\u0080\u0099s dvt.ini file. The required steps to do this are: Open DVT in a new workspace Change the preferences Use the Window \u00e2\u0080\u00a3 Show Changed Preferences dialog to identify the changed preferences Add those in the dvt_eclipse/misc/dvt.ini file Now every new workspace will have those preferences. Show Changed Preferences Dialog To open the Show Changed Preferences Dialog go to Window \u00e2\u0080\u00a3 Show Changed Preferences The dialog allows the user to inspect the modified preferences and save them in a file. Changing the Default dvt.ini To add new settings to the default settings provided with the distribution and to make them available by default for everyone who starts in a new workspace, the settings saved in the Show Changed Preferences Dialog should be added in the dvt_eclipse/misc/dvt.ini file. The dvt.ini file already contains some settings as distribution default. The user\u00e2\u0080\u0099s settings should be appended to this file. Some of the default settings already present in the dvt.ini file are: Name Description org.eclipse.ui/SHOW_MEMORY_MONITOR=true Enables the JVM memory monitor. org.eclipse.ui/ENABLE_ANIMATIONS=false Disables the minimize/maximize animations. org.eclipse.ui.editors/lineNumberRuler=true Shows line numbers by default in editors. org.eclipse.debug.ui/org.eclipse.debug.ui.UseContextualLaunch=false Activates \u00e2\u0080\u009cAlways launch previously launched application. ro.amiq.dvt/spelling_user_dictionary=$DVT_HOME/misc/dvt_dictionary.txt Sets the path to the distribution dictionary for DVT editors. Using a User Customized dvt.ini After creating a preferences file the user can replace the distribution\u00e2\u0080\u0099s dvt.ini file to make them  widely deployed or he or she can start DVT with a different file for default settings using the dvt.sh script: dvt . sh [ any other argument ] - eclipse_args - pluginCustomization < path_to_settings_file > Examples Reference On this page Workspace Settings Project Settings Other Settings Importing Preferences From a Different Workspace Using Import/Export Wizard Using dvt.sh Script Manually Customizing Default Settings Using dvt.ini Show Changed Preferences Dialog Changing the Default dvt.ini Using a User Customized dvt.ini Back to top",
    "section_path": [],
    "tokens": 1034,
    "source": "scraped"
  },
  {
    "id": "2ee6b327-3c0d-4e67-8d1f-d39a801c7c16",
    "title": "OVM Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ovm-support/ovm-templates.html",
    "content": "OVM Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide OVM Templates DVT offers autocomplete templates for OVM components. Just type in the editor ovm then hit Ctrl + Space twice and a drop-down list will offer you the available templates. After you pick the desired template, you can fill in the template parameters (e.g. company prefix, component name etc.). Quick OVM Documentation Access UVM Support Back to top",
    "section_path": [],
    "tokens": 91,
    "source": "scraped"
  },
  {
    "id": "70ecf6a6-f0d8-42be-8544-6a30306a8c3d",
    "title": "default.build | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/default-build.html",
    "content": "default.build | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide default.build .dvt/default.build is an argument file that configures DVT\u00e2\u0080\u0099s internal builder. By default, whenever a full build is performed, DVT starts by reading this file. It may contain: comments directives in two forms: +directive+arg1[+arg2+\u00e2\u0080\u00a6] -directive arg1[ arg2 \u00e2\u0080\u00a6] top files. Anything that is not a directive or comment is regarded as path to a top file . Note Unknown directives are ignored. In general, DVT-specific directives start with +dvt_ . Unknown directives that start with this prefix are flagged with a warning. The internal builder parses each top file, following includes/imports as specified by the language. Some directives ( parsing directives ) allow you to control how files are compiled based on their extension, for example using System Verilog 1800-2012 for *.sv, Verilog 2001 for *.v, VHDL 1076-2008 for *.vhdl and e Language 1647-2011 parser for *.e. The parsing directives are either generic or mode specific. Note A project is built by analyzing source code with one or more of DVT\u00e2\u0080\u0099s parsers depending on the Project Natures . Even if build configuration files in the .dvt folder specify certain files to be compiled with a specific language syntax, they will not be analyzed unless the corresponding nature is enabled for the project. The language syntax to project nature mapping is: e Language e Nature Verilog, SystemVerilog vlog Nature VHDL vhdl Nature C/C++ c/cpp Nature UPF/CPF upf/cpf Nature PSS pss Nature SLN sln Nature SDL sdl Nature DVT for VS Code has currently support only for Verilog / SystemVerilog and VHDL. In general, the directives are similar with the arguments (or flags) that you would pass to any compiler/simulator. A build file may include other argument files and so on. The internal builder follows the included files as it encounters them (as if part of a continuous stream). Note that the way a file is included (for example with -f or -F ) has an influence on how paths inside the included files are interpreted. For more details see Including Other Argument Files . To simplify the flow integration, DVT supports several Compatibility Modes . This capability allows you to reuse existing arguments or argument files that you already use for a particular simulator invocation. Non-top files Auto-config Back to top",
    "section_path": [],
    "tokens": 401,
    "source": "scraped"
  },
  {
    "id": "8b9ad30e-841a-4c94-b3af-be44350fcdea",
    "title": "Compatibility Modes | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/compatibility-modes.html",
    "content": "Compatibility Modes | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Compatibility Modes A compatibility mode defines how DVT decides what top files to parse and with what language syntax to parse them. File Extension to Language Syntax Mapping File extensions can be mapped either to a specific language syntax or skipped (that is they will not be parsed) . Each mode has a default file extension to syntax mapping. You control the extensions mapping by using various directives, like for example +verilog2001ext in vcs.vlogan Compatibility Mode . The +dvt_ext_unmap_all directive clears the syntax mapping, including skipped. This means that all top files will be parsed using the Language Syntax for Unmapped Extensions . Note that the syntax for unmapped extensions can be Skip , for example in the Default DVT Compatibility Mode , as a result nothing will be compiled. Language Syntax for Unmapped Extensions An unmapped top file will be parsed using this syntax or skipped, depending on the compatibility mode.\nCan be controlled by various directives, like for example +dvt_ext_unmapped_syntax+<syntax> in the Default DVT Compatibility Mode or +v2k in vcs.vlogan Compatibility Mode . Language Syntax for Included Files Where relevant, for example for Verilog/SystemVerilog, the included files are parsed either with the same syntax as the including file, or as specified by the extension mapping. See also each compatibility mode documentation. Note A compatibility mode might also introduce specific predefined API, like for example Verilog preprocessing macros. List of Compatibility Modes The following compatibility modes are supported: dvt - This is the default mode. vcs.vlogan vcs.vhdlan ius.irun xcelium.xrun questa.vlog questa.vcom questa.qrun How to Specify the Compatibility Mode The +dvt_init+<mode> directive changes the compatibility mode, where <mode> can be any of the above modes. A +dvt_init+<mode> directive: Resets the dvt builder to the mode specific default state. Clears all the previous directives (preprocessing defines, system variables, libraries, etc.). You can see it as the equivalent of a new tool invocation. You may specify any number of +dvt_init directives inside a build file. The compatibility mode is enforced until the next +dvt_init directive. Default DVT Compatibility Mode The +dvt_init+dvt directive resets the builder to the dvt default state. File Extension to Language Syntax Mapping Syntax Extensions Verilog 2001 .v, .vh System Verilog 1800-2012 .vp, .vs, .vsh, .v95, .v95p, .sv, .svh, .svp, .svi, .sva VHDL 1076-2008 .vhd, .vhdl e Language 1647-2011 .e PSS DSL .pss C/C++ .c, .h, .cpp, .cc, .cxx Shared objects (C/C++ libraries) .so, .a, .o Language Syntax for Unmapped Extensions: Skip unmapped extensions. Language Syntax for Included Files: Included files are parsed as specified by the extension mapping. Mode Specific Directives Directive Description +dvt_ext_map+<syntax>+<ext> Files with <ext> extension are parsed using the specified <syntax>. See the list below for more details regarding <syntax>. +dvt_ext_unmap+<ext> Files with <ext> extension are parsed using the Language Syntax for Unmapped Extensions . +dvt_ext_unmapped_syntax+<syntax> Set the Language Syntax for Unmapped Extensions . See the list below for more details regarding <syntax>. +dvt_ext_unmap_all All files are parsed using the Language Syntax for Unmapped Extensions . +dvt_ext_included+by_ext +dvt_ext_included+by_parent by_ext: The included files are parsed using the syntax as specified by directives, that is using by ext syntax (if explicit) or the syntax for unmapped extensions by_parent: Included files are parsed using the syntax that was used for parsing the including file Specifying a <syntax> To specify the <syntax> for the directives above, one should use any of the following strings, case-insensitive: 1364-1995, Verilog_95 1364-2001-noconfig, Verilog_2001_noconfig 1364-2001, Verilog_2001 1364-2005, Verilog_2005 VAMS-2.3, Verilog_AMS_23 1800-2005, SystemVerilog_2005 1800-2009, SystemVerilog_2009 1800-2012, SystemVerilog_2012, SystemVerilog 1800-2023, SystemVerilog_2023 SVAMS, SystemVerilog_AMS 1647-2011, e_2011, e 1076-1987, VHDL_87 1076-1993, VHDL_93 1076.1-1999, VHDL_AMS_99 1076-2000, VHDL_2000 1076-2002, VHDL_2002 1076.1-2007, VHDL_AMS_2007 1076-2008, VHDL_2008, VHDL PSS SKIP The dot (.) for specifying <ext> is optional. For example +dvt_ext_map+verilog_1364_1995+.svh and +dvt_ext_map+verilog_1364_1995+svh are equivalent. You can specify more extensions at once, for example +dvt_ext_map+verilog_1364_1995+.svh+svp . When several directives change the syntax of a specific <ext>, the last one wins. Examples I want to parse .c and .v files as SystemVerilog + dvt_init + dvt // By default . c are skipped and . v are parsed with Verilog 2001 syntax + dvt_ext_map + SystemVerilog_2012 +. v +. c // Now . c and . v are parsed with SystemVerilog 2012 Note Every time you re-map an already mapped extension, DVT will warn you. For the example above, you get the following warnings: .v was previously mapped to Verilog_2001 .c was previously mapped to Skip I want the .vp files to be parsed with the Language Syntax for Unmapped Extensions + dvt_init + dvt // By default . vp is parsed with SystemVerilog 2012. + dvt_ext_unmap +. vp // Because by default the unmapped extensions are skipped , . vp files will be skipped I want to change the Language Syntax for Unmapped Extensions + dvt_init + dvt // By default the unmapped extensions are skipped + dvt_ext_unmapped_syntax + Verilog_95 // Now unmapped extensions , for example . foo , will be parsed as Verilog 95 I want to configure everything from scratch + dvt_init + dvt + dvt_ext_unmap_all // All files are skipped + dvt_ext_unmapped_syntax + Verilog_95 // Compile all files with unmapped extensions as Verilog 95 + dvt_ext_map + skip +. cpp // Skip . cpp files + dvt_ext_map + SystemVerilog_95 +. sv // Compile . sv as SystemVerilog + dvt_ext_map + VHDL_1076_1_1999 +. vhd // Compile . vhd as VHDL - AMS I want to parse everything as SystemVerilog + dvt_init + dvt + dvt_ext_unmap_all // All files are skipped + dvt_ext_unmapped_syntax + SystemVerilog // All files are parsed as SystemVerilog gcc Compatibility Mode The +dvt_init+gcc directive resets the builder to the gcc default state. File Extension to Language Syntax Mapping Syntax Extensions C/C++ .c, .i, .ii, .h, .cc, .cp, .cxx, .cpp, .CPP, .c++, .C, .hh, .H, .hp, .hxx, .hpp, .HPP, .h++, .tcc Language Syntax for Unmapped Extensions: Skip unmapped extensions. When you compile C/C++ code using gcc rather than the simulator, for each gcc invocation it is recommended to use a +dvt_init+gcc directive followed by the gcc command line arguments. ius.irun Compatibility Mode The +dvt_init+ius.irun directive resets the builder to the ius.irun default state. File Extension to Language Syntax Mapping Syntax Extensions Verilog 1995 .v95, .v95p Verilog AMS 2.3 .vams Verilog 2001 .v, .vp, .vs System Verilog 1800-2012 .sv, .svp, .svi, .svh, .vlib, .vcfg System Verilog AMS .svams VHDL 1987 .vhd, .vhdl, .vhdp, .vhdlp, .vhcfg VHDL AMS 1999 .vha, .vhams, .vhms VHDL 2008 .pslvhdl e Language 1647-2011 .e C/C++ .c, .h, .cc, .cpp, .cxx, .pslsc Shared objects (C/C++ libraries) .o, .a, .so, .sl Skipped Files .pslvlog, .s, .scs, .sp Language Syntax for Unmapped Extensions: Skip Language Syntax for Included Files: Included files are parsed using the syntax that was used for parsing the including file. Note In IUS compatibility mode all directives are case-insensitive except for -f / -F . Note In IUS compatibility mode, top and test files specified using relative paths are solved, in order, as relative to the compilation root, then $SPECMAN_PATH entries. Mode Specific Directives Directive Description -ams All files that would be parsed with a Verilog / VHDL syntax flavor will be parsed with Verilog AMS 2.3 / VHDL AMS 1999 instead. Has precedence over other syntax specifications. -amscompilefile file:<file_path>[ \u00e2\u0080\u00a6] Equivalent with specifying <file_path> as a top file. -asext <ext>[,<ext>] Equivalent to -as_ext +<ext>[,<ext>] -ccext <ext> Equivalent to -c_ext +<ext>[,<ext>] -cxxext <ext> Equivalent to -cpp_ext +<ext>[,<ext>] -default_ext <syntax> Set the Language Syntax for Unmapped Extensions . See the list below for more details regarding the <syntax> argument. -lps_1801 <upf_file> Specify a Unified Power Format file to be analyzed. -lps_cpf <cpf_file> Specify a Common Power Format file to be analyzed. -makelib <lib_name> \u00e2\u0080\u00a6 -endlib -makelib /path/to/ <lib_name> \u00e2\u0080\u00a6 -endlib -makelib /some/path: <lib_name> \u00e2\u0080\u00a6 -endlib Compiles files specified inside a -makelib ... -endlib section into the <lib_name> library. Files in makelib sections are compiled before files in the enclosing invocation. Directives in the makelib section only apply to the makelib section files. Directives in the enclosing invocation apply to all files in the invocation. The -work directive is ignored within a makelib section. -objext <ext> Equivalent to -o_ext +<ext>[,<ext>] -ovm -uvm Load the OVM / UVM library from the IUS installation location. For OVM: `ncroot`/tools/methodology/OVM/CDNS-2.1.2 or `ncroot`/tools/ovm if the first does not exist. For UVM: `ncroot`/tools/methodology/UVM/CDNS-1.1d/sv or `ncroot`/tools/uvm/uvm_lib/uvm_sv if the first does not exist. Note If the path to OVM/UVM cannot be located within the IUS installation, the tool tries to load the library from $OVM_HOME or $DVT_OVM_HOME (resp. $UVM_HOME or $DVT_UVM_HOME ).\nIf $DVT_OVM_HOME is not defined, it falls back to $DVT_HOME/predefined_projects/libs/ovm-2.1.2.\nIf $DVT_UVM_HOME is not defined, it falls back to $DVT_HOME/predefined_projects/libs/uvm-1.2. -ovmhome <path> -uvmhome <path> If <path> is: - the word \"default\" : equivalent with -ovm / -uvm - an existing absolute path or relative path : load the OVM / UVM library from the specified <path> - an existing subpath of `ncroot`/tools/methodology/OVM/ : load the OVM library from ncroot /tools/methodology/OVM/<path> - an existing subpath of `ncroot`/tools/methodology/UVM/ : load the UVM library from ncroot /tools/methodology/UVM/<path>/sv. Has precedence over -ovm / -uvm. -ml_uvm Load the UVM_ML library from the IUS installation location.\nFor uvm: `ncroot`/tools/methodology/UVM/CDNS-1.1d/ml . Note If the path to UVM_ML cannot be located within the IUS installation, the tool tries to load the library from $UVM_HOME or $DVT_UVM_HOME . -uvmexthome <path> If <path> is an existing absolute path or relative path : load the UVM extension files from the specified <path>. Should be used in conjunction with -uvmhome . -pkgsearch <lib> Specify the library search order for Verilog packages. You can specify multiple libraries by using this option multiple times. -snpath <path> Equivalent to +dvt_setenv+SPECMAN_PATH=$SPECMAN_PATH:<path> -sndefine <arg> Equivalent to +define+<arg> -sv All files that would be parsed according to the File Extension to Language Syntax Mapping or Language Syntax for Unmapped Extensions with a Verilog syntax flavor will be parsed with SystemVerilog 2012 instead. Has precedence over -v1995 . -svams_2019 All Verilog/SystemVerilog files will be parsed with SystemVerilog AMS. Has precedence over other syntax specifications. -<syntax>_ext [+]<ext>[,<ext>] Files with <ext> extension will be parsed using the specified <syntax>. If the optional + is specified, the mapping will be added to the default File Extension to Language Syntax Mapping . Otherwise, the default mapping of the specified <syntax> is overridden. If you specify the override directive multiple times for the same <syntax>, the default File Extension to Language Syntax Mapping will be overridden only the first time. You can specify more extensions at once, comma-separated, for example - \u00e2\u0080\u0098\u00e2\u0080\u0099vlog_ext .svh,.svp\u00e2\u0080\u0099\u00e2\u0080\u0099. The dot (.) for specifying <ext> is mandatory. The following directives are supported: -a_ext, -amsvhdl_ext, -amsvlog_ext, -as_ext, -c_ext, -cpp_ext, -dynlib_ext, -e_ext, -o_ext, -spice_ext, -sysv_ext, -vhcfg_ext, -vhdl_ext. See the list below for more details regarding <syntax>. -v1995 -v95 All files that would be parsed according to the File Extension to Language Syntax Mapping or Language Syntax for Unmapped Extensions with Verilog 2001 will be parsed instead with a reduced keywordset variant of Verilog 2001. The reduced keywordset does not contain the keywords automatic , localparam , generate , endgenerate , and genvar . -v200x All files that would be parsed according to the File Extension to Language Syntax Mapping or Language Syntax for Unmapped Extensions with a VHDL syntax flavor (but not VHDL AMS) will be parsed with VHDL 2008 instead. Has precedence over -v93 . -v93 All files that would be parsed according to the File Extension to Language Syntax Mapping or Language Syntax for Unmapped Extensions with a VHDL syntax flavor (but not VHDL AMS) will be parsed with VHDL 93 instead. -vhdlext <ext> Equivalent to -vhdl_ext +<ext>[,<ext>] -vlogext <ext> Equivalent to -vlog_ext +<ext>[,<ext>] How to specify syntax directives Language Syntax -default_ext <syntax> -<syntax>_ext Verilog 2001 -default_ext verilog -vlog_ext Verilog 1995 -default_ext verilog95 N/A SystemVerilog 2012 -default_ext systemverilog, -default_ext vcnf -sysv_ext VHDL 1987 -default_ext vhdl, -default_ext vhcfg -vhdl_ext e Language -default_ext e -e_ext VHDL AMS 1999 -default_ext vhdl-ams -amsvhdl_ext SKIP -default_ext verilog-ams, -default_ext psl_vlog, -default_ext psl_vhdl, -default_ext psl_sc, -default_ext c, -default_ext cpp, -default_ext assembly, -default_ext o, -default_ext a, -default_ext so, -default_ext scs -a_ext, -amsvhdl_ext, -amsvlog_ext, -as_ext, -c_ext, -cpp_ext, -dynlib_ext, -e_ext, -o_ext, -spice_ext, -sysv_ext, -vhcfg_ext, -vhdl_ext Predefined API INCA Defined as preprocessing macro without value. Examples I want to parse .sv , .c and .v files as SystemVerilog + dvt_init + ius . irun // By default . c are skipped and . v are parsed with Verilog 2001 syntax - sysv_ext +. v , . c // Now . c and . v are parsed with SystemVerilog 2012 ; however , the default extensions mapped to SystemVerilog 2012 still stand , including . sv Note Every time you re-map an already mapped extension, DVT will warn you. For the example above, you get the following warnings: .v was previously mapped to Verilog_2001 .c was previously mapped to Skip I want the .vp files to be parsed with the Language Syntax for Unmapped Extensions + dvt_init + ius . irun // By default . vp , . v , . vs are parsed with Verilog 2001 - vlog_ext . v , . vs // We override the mapping for Verilog 2001 with only the other two extensions . // Now . vp is not mapped to any Language Syntax . // Because by default the unmapped extensions are skipped , . vp files will be skipped I want to change the Language Syntax for Unmapped Extensions + dvt_init + ius . irun // By default the unmapped extensions are skipped - default_ext verilog95 // Now unmapped extensions , for example . foo , will be parsed as Verilog 95 I want to parse all Verilog source files and all files with unmapped extensions as SystemVerilog, and all VHDL files as VHDL 2000 + dvt_init + ius . irun - default_ext systemverilog // All files with unmapped extensions are parsed as SystemVerilog - sv // All Verilog source files are parsed with SystemVerilog - v200x // All VHDL source files are parsed with VHDL 2008 ius.perspec Compatibility Mode The +dvt_init+ius.perspec directive resets the builder to the ius.perspec default state. File Extension to Language Syntax Mapping Syntax Extensions SLN .sln PSS .pss e Language 1647-2011 .e Language Syntax for Unmapped Extensions: Skip unmapped extensions. questa.vcom Compatibility Mode The +dvt_init+questa.vcom directive resets the builder to the questa.vcom default state. Language Syntax for Unmapped Extensions: VHDL 1076-2002 Mode Specific Directives Directive Description -2002 Enable support for VHDL 2002 -2008 Enable support for VHDL 2008 -87 Enable support for VHDL 87 -93 Enable support for VHDL 93 -G <path/to/param>=<value> Overrides the parameter at the given hierarchy path with \u00e2\u0080\u0098value\u00e2\u0080\u0099. Works similar to SystemVerilog defparam statement. -pa_upf <upf_file> Specify a Unified Power Format file to be analyzed. Predefined API QUESTA Defined as preprocessing macro without value. MODEL_TECH Defined as preprocessing macro without value. questa.vlog Compatibility Mode The +dvt_init+questa.vlog directive resets the builder to the questa.vlog default state. File Extension to Language Syntax Mapping Syntax Extensions System Verilog 1800-2012 .sv, .svp, .svh C/C++ .c, .cpp, .cc, .cxx Language Syntax for Unmapped Extensions: Verilog 1995 Language Syntax for Included Files: Included files are parsed using the syntax that was used for parsing the including file. Mode Specific Directives Directive Description -G <path/to/param>=<value> Overrides the parameter at the given hierarchy path with \u00e2\u0080\u0098value\u00e2\u0080\u0099. Works similar to SystemVerilog defparam statement, but has a higher priority and can also override localparams. -ovm DVT tries to load the OVM library, in order of precedence from: $OVM_HOME , $DVT_OVM_HOME -pa_upf <upf_file> Specify a Unified Power Format file to be analyzed. -sv Parse files with unmapped extensions as SystemVerilog -sv05compat Use SystemVerilog 2005 syntax flavor -sv09compat Use SystemVerilog 2009 syntax flavor -sv12compat Use SystemVerilog 2012 syntax flavor -svfilesuffix=<ext1>[,<ext2>\u00e2\u0080\u00a6] All files with <ext1>, <ext2>, \u00e2\u0080\u00a6 extensions are parsed as SystemVerilog -uvm DVT compiles the UVM library, in order of precedence, from: $UVM_HOME , $MTI_HOME/verilog_src/uvm-1.1d , $DVT_UVM_HOME , $DVT_HOME/predefined_projects/libs/uvm-1.2 If $MTI_HOME is not defined, it is inferred from the location of the vlog executable If -L $MTI_HOME/<uvm_lib> is specified anywhere within the current invocation, then UVM is compiled from $MTI_HOME/verilog_src/<uvm_lib> Whenever compiling UVM from $MTI_HOME , the $MTI_HOME/verilog_src/questa_uvm_pkg-1.2/ is also compiled -vlog01compat USe Verilog 2001 syntax flavor -vlog95compat Use Verilog 1995 syntax flavor Predefined API QUESTA Defined as preprocessing macro without value. MODEL_TECH Defined as preprocessing macro without value. questa.qrun Compatibility Mode The +dvt_init+questa.qrun directive resets the builder to the questa.qrun default state. Syntax Extensions Verilog 1995 .v95, .v95p Verilog 2001 .v, .vp, .vs System Verilog 1800-2012 .sv, .svp, .svi, .svh, .vlib, .vcfg, .pslvlog VHDL 1987 .vhd, .vhdl, .vhdp, .vhdlp VHDL 2008 .pslvhdl, .vhcfg C/c++ .c, .h, .cc, .cpp, .cxx Language Syntax for Unmapped Extensions: Skip Language Syntax for Included Files: Included files are parsed using the syntax that was used for parsing the including file. Mode Specific Directives Directive Description -2002 Enable support for VHDL 2002 -2008 Enable support for VHDL 2008 -87 Enable support for VHDL 87 -93 Enable support for VHDL 93 -cuname <compilation_unit_name> Compile under <compilation_unit_name> package; the directive is enforced until: another -cuname directive is encountered +dvt_init directive is encountered end of default.build is encountered -defaultHDLCompiler=<vlog/vcom> All files that would be parsed according to the Language Syntax for Unmapped Extensions will be parsed with Verilog 2001 if vlog option is selected or VHDL 87 for vcom option. -defineall <DEFINE_NAME>=<replacement> Define a preprocessing symbol for SystemVerilog and C/C++. The replacement is optional. You may quote the replacement with ticks (\u00e2\u0080\u0099) or quotes (\u00e2\u0080\u009c). If defined, environment variables are expanded. -f <filename> Specify a <filename> containing command line arguments -makelib <lib_name> -makelib /path/to/ <lib_name> -makelib /some/path: <lib_name> \u00e2\u0080\u00a6 -endlib Compiles files specified inside a -makelib ... -endlib section into the <lib_name> library. Files in makelib sections are compiled before files in the enclosing invocation. Directives in the makelib section only apply to the makelib section files. Directives in the enclosing invocation apply to all files in the invocation. The -work directive is ignored within a makelib section. -pa_upf <upf_file> Specify a Unified Power Format file to be analyzed. -reflib <lib> Specify the library search order for Verilog packages. You can specify multiple libraries by using this option multiple times. -sv Parse files with unmapped extensions as SystemVerilog -sv05compat Use SystemVerilog 2005 syntax flavor -sv09compat Use SystemVerilog 2009 syntax flavor -sv12compat Use SystemVerilog 2012 syntax flavor -svfilesuffix=<ext1>[,<ext2>\u00e2\u0080\u00a6] All files with <ext1>, <ext2>, \u00e2\u0080\u00a6 extensions are parsed as SystemVerilog -sysc <c/c++ source files and options> -end Add $SYSTEMC_HOME/src as C include dir. Falls back to $DVT_SYSTEMC_HOME if $SYSTEMC_HOME is not defined. -top <design_unit> Specify a design top module or configuration name. You can specify multiple tops either by using the directive multiple times or by specifying multiple top names separated by the \u00e2\u0080\u0098+\u00e2\u0080\u0099 character or a combination thereof. -uvm DVT compiles the UVM library, in order of precedence, from: $UVM_HOME , $MTI_HOME/verilog_src/uvm-1.1d , $DVT_UVM_HOME , $DVT_HOME/predefined_projects/libs/uvm-1.2 If $MTI_HOME is not defined, it is inferred from the location of the vlog executable If -L $MTI_HOME/<uvm_lib> is specified anywhere within the current invocation, then UVM is compiled from $MTI_HOME/verilog_src/<uvm_lib> Whenever compiling UVM from $MTI_HOME , the $MTI_HOME/verilog_src/questa_uvm_pkg-1.2/ is also compiled -uvmhome <path> If <path> is: the word \u00e2\u0080\u009cdefault\u00e2\u0080\u009d : equivalent with -uvm an existing absolute path or relative path : load the UVM library from the specified <path> Has precedence over -uvm. -uvmexthome <path> If <path> is an existing absolute path or relative path : load the UVM extension files from the specified <path>. Should be used in conjunction with -uvmhome . -vlog01compat Use Verilog 2001 syntax flavor -vlog95compat Use Verilog 1995 syntax flavor -vlog.ext=[+]<ext> Files with <ext> extension will be parsed using the Verilog 2001 syntax flavor. If the optional + is specified, the mapping will be added to the default File Extension to Language Syntax Mapping . Otherwise, the default mapping of the specified <syntax> is overridden. If you specify the override directive multiple times for the same <syntax>, the default File Extension to Language Syntax Mapping will be overridden only the first time. You can specify more extensions at once, comma-separated, for example - \u00e2\u0080\u0098\u00e2\u0080\u0099vlog.ext=+.svh,.svp\u00e2\u0080\u0099\u00e2\u0080\u0099. The dot (.) for specifying <ext> is mandatory. -vcom.ext=[+]<ext> Files with <ext> extension will be parsed using the VHDL 87 syntax flavor. If the optional + is specified, the mapping will be added to the default File Extension to Language Syntax Mapping . Otherwise, the default mapping of the specified <syntax> is overridden. If you specify the override directive multiple times for the same <syntax>, the default File Extension to Language Syntax Mapping will be overridden only the first time. You can specify more extensions at once, comma-separated, for example - \u00e2\u0080\u0098\u00e2\u0080\u0099vcom.ext=+.svh,.svp\u00e2\u0080\u0099\u00e2\u0080\u0099. The dot (.) for specifying <ext> is mandatory. -work <lib> Compile into library <lib>. +UVM_TESTNAME=<testname> The name of the UVM test which will be automatically created under uvm_root. Predefined API QUESTA Defined as preprocessing macro without value. MODEL_TECH Defined as preprocessing macro without value. vcs.vhdlan Compatibility Mode The +dvt_init+vcs.vhdlan directive resets the builder to the vcs.vhdlan default state. File Extension to Language Syntax Mapping Syntax Extensions C/C++ .c, .h, .cpp, .cc, .cxx Shared objects (C/C++ libraries) .so, .a, .o Language Syntax for Unmapped Extensions: VHDL 1076-1993 Mode Specific Directives Directive Description -pvalue+<path.to.param>=<value> Overrides the parameter at the given hierarchy path with \u00e2\u0080\u0098value\u00e2\u0080\u0099. Works similar to SystemVerilog defparam statement. -upf <upf_file> Specify a Unified Power Format file to be analyzed. -vhdl87 Sets the syntax for unmapped extensions to VHDL 1076-1987 -w <lib> -work <lib> Compile intro library <lib> vcs.vlogan Compatibility Mode The +dvt_init+vcs.vlogan directive resets the builder to the vcs.vlogan default state. File Extension to Language Syntax Mapping Syntax Extensions C/C++ .c, .cpp, .cc, .cxx Shared objects (C/C++ libraries) .so, .a, .o Language Syntax for Unmapped Extensions: Verilog 1995 Language Syntax for Included Files: Included files are parsed using the syntax that was used for parsing the including file. Mode Specific Directives Directive Description -extinclude The included files are parsed using the syntax as specified by directives, that is using by ext syntax (if explicit) or the syntax for unmapped extensions. It overrides the default behavior. -liblist <lib1>[+<lib2>+\u00e2\u0080\u00a6] Specify the library search order for Verilog packages. -ntb_opts [ rvm / vmm ] If $VCS_HOME is defined, equivalent with: +incdir+$VCS_HOME/etc/[ rvm / vmm ] $VCS_HOME/etc/[ rvm / vmm ]/vmm.sv If $VCS_HOME is not defined, equivalent with: +incdir+$DVT_VMM_HOME/sv/ $DVT_VMM_HOME/sv/vmm.sv If $DVT_VMM_HOME is not defined, falls back to $DVT_HOME/predefined_projects/libs/vmm-1.2.2b -ntb_opts [ uvm / uvm-1.0 / uvm-1.1 / uvm-1.2 ] Compiles or references the UVM library. See more details below. -pvalue+<path.to.param>=<value> Overrides the parameter at the given hierarchy path with \u00e2\u0080\u0098value\u00e2\u0080\u0099. Works similar to SystemVerilog defparam statement, but has a higher priority and can also override localparams. -sverilog Sets the syntax for unmapped extensions to SystemVerilog. This directive has precedence over +v2k. +systemverilogext+<ext> All files with <ext> extension are parsed using the SystemVerilog syntax. -upf <upf_file> Specify a Unified Power Format file to be analyzed. +v2k Sets the syntax for unmapped extensions to Verilog 2001. +verilog1995ext+<ext> All files with <ext> extension are parsed using the Verilog 1995 syntax. +verilog2001ext+<ext> All files with <ext> extension are parsed using the Verilog 2001 syntax. The dot (.) for specifying <ext> is optional. For example +verilog1995ext+.svh and +verilog1995ext+svh are equivalent. You can specify more extensions at once, for example +verilog1995ext+.svh+svp . When several directives change the syntax of a specific <ext>, the last one wins. ntb_opts [ uvm / uvm-1.0 / uvm-1.1 / uvm-1.2 ] Typical use-case #1 - single vcs command Command: vcs -ntb_opts uvm top1.sv top2.sv [other compilation directives] Build config: // The UVM library is compiled from $VCS_UVM_HOME or $VCS_HOME/etc/uvm or $DVT_UVM_HOME // (in this order of precedence, depending on which environment variables are defined). +dvt_init+vcs.vlogan -ntb_opts uvm top_file1.sv top_file2.sv [other compilation directives] Typical use-case #2 - multiple vlogan commands Commands: vlogan -ntb_opts uvm vlogan -ntb_opts uvm top1.sv top2.sv [other compilation directives] vlogan -ntb_opts uvm top3.sv top4.sv [other compilation directives] Build config: // The UVM library is compiled from $VCS_UVM_HOME or $VCS_HOME/etc/uvm or $DVT_UVM_HOME // (in this order of precedence, depending on which environment variables are defined). +dvt_init+vcs.vlogan -ntb_opts uvm // The UVM library is not recompiled. It is \"referenced\" by adding the relevant incdirs. +dvt_init+vcs.vlogan -ntb_opts uvm top1.sv top2.sv [other compilation directives] // The UVM library is not recompiled. It is \"referenced\" by adding the relevant incdirs. +dvt_init+vcs.vlogan -ntb_opts uvm top3.sv top4.sv [other compilation directives] Note In the invocations which \u00e2\u0080\u009creferences\u00e2\u0080\u009d the UVM library (rows 7-10 in the table below) - ntb_opts uvm is equivalent with: + incdir +< VCS >/ wrap + incdir +< UVM >/ src and any `include uvm_pkg.sv will solve to <VCS>/wrap/uvm_pkg.sv which contains the following code: `ifndef WRAP_UVM_PKG_SV `define WRAP_UVM_PKG_SV `include \"uvm_macros.svh\" import uvm_pkg::*; `endif Note The second, third, \u00e2\u0080\u00a6 ntb_opts uvm invocations without top files (rows 4-6 in the table below) will take into account the dvt_disable_uvm_reuse directive. Details The effect of this directive in a particular invocation depends on the following factors: if it\u00e2\u0080\u0099s the first invocation which specifies -ntb_opts uvm if the invocation specifies source files to be compiled ( top files ) in addition to the -ntb_opts uvm flag if $VCS_UVM_HOME / $VCS_HOME environment variables are set # First Top files $VCS_UVM_HOME $VCS_HOME Equivalent incdir(s) Equivalent top file 1 Y \u00e2\u0080\u0094 Y \u00e2\u0080\u0094 $VCS_UVM_HOME $VCS_UVM_HOME/uvm_pkg.sv 2 Y \u00e2\u0080\u0094 N Y $VCS_HOME/etc/uvm[ -version ]/src $VCS_HOME/etc/uvm[ -version ]/src/uvm_pkg.sv 3 Y \u00e2\u0080\u0094 N N $DVT_UVM_HOME/src $DVT_UVM_HOME/src/uvm_pkg.sv 4 N N Y \u00e2\u0080\u0094 $VCS_UVM_HOME $VCS_UVM_HOME/uvm_pkg.sv 5 N N N Y $VCS_HOME/etc/uvm[ -version ]/src $VCS_HOME/etc/uvm[ -version ]/src/uvm_pkg.sv 6 N N N N $DVT_UVM_HOME/src $DVT_UVM_HOME/src/uvm_pkg.sv 7 N Y Y Y $VCS_HOME/etc/uvm/vcs/wrap $VCS_UVM_HOME 8 N Y Y N $DVT_HOME/predefined_projects/libs/uvm/vcs/wrap $VCS_UVM_HOME 9 N Y N Y $VCS_HOME/etc/uvm/vcs/wrap $VCS_HOME/etc/uvm[ -version ]/src 10 N Y N N $DVT_HOME/predefined_projects/libs/uvm/vcs/wrap $DVT_UVM_HOME/src Note If $DVT_UVM_HOME is not defined, falls back to $DVT_HOME/predefined_projects/libs/uvm-1.2 . Predefined API VCS Defined as preprocessing macro without value. xcelium.xrun Compatibility Mode The +dvt_init+xcelium.xrun directive resets the builder to the xcelium.xrun default state. File Extension to Language Syntax Mapping Syntax Extensions Verilog 1995 .v95, .v95p Verilog AMS 2.3 .vams Verilog 2001 .v, .vp, .vs System Verilog 1800-2012 .sv, .svp, .svi, .svh, .vlib, .vcfg System Verilog AMS .svams VHDL 1987 .vhd, .vhdl, .vhdp, .vhdlp, .vhcfg VHDL AMS 1999 .vha, .vhams, .vhms VHDL 2008 .pslvhdl e Language 1647-2011 .e C/c++ .c, .h, .cc, .cpp, .cxx, .pslsc Shared objects (C/C++ libraries) .o, .a, .so, .sl Skipped Files .pslvlog, .s, .scs, .sp Language Syntax for Unmapped Extensions: Skip Language Syntax for Included Files: Included files are parsed using the syntax that was used for parsing the including file. Note In XCELIUM compatibility mode all directives are case-insensitive except for -f / -F . Note In XCELIUM compatibility mode, top and test files specified using relative paths are solved, in order, as relative to the compilation root, then $SPECMAN_PATH entries. Mode Specific Directives Directive Description -ams All files that would be parsed with a Verilog / VHDL syntax flavor will be parsed with Verilog AMS 2.3 / VHDL AMS 1999 instead. Has precedence over other syntax specifications. -amscompilefile \u00e2\u0080\u009cfile:<file_path>[ \u00e2\u0080\u00a6]\u00e2\u0080\u009d Equivalent with specifying <file_path> as a top file. -asext <ext>[,<ext>] Equivalent to -as_ext +<ext>[,<ext>] -ccext <ext> Equivalent to -c_ext +<ext>[,<ext>] -cxxext <ext> Equivalent to -cpp_ext +<ext>[,<ext>] -default_ext <syntax> Set the Language Syntax for Unmapped Extensions . See the list below for more details regarding the <syntax> argument. -defparam <path.to.param>=<value> Overrides the parameter at the given hierarchy path with \u00e2\u0080\u0098value\u00e2\u0080\u0099. Works similar to SystemVerilog defparam statement, but has a higher priority and can also override localparams. -lps_1801 <upf_file> Specify a Unified Power Format file to be analyzed. -lps_cpf <cpf_file> Specify a Common Power Format file to be analyzed. -makelib <lib_name> \u00e2\u0080\u00a6 -endlib -makelib /path/to/ <lib_name> \u00e2\u0080\u00a6 -endlib -makelib /some/path: <lib_name> \u00e2\u0080\u00a6 -endlib Compiles files specified inside a -makelib ... -endlib section into the <lib_name> library. Files in makelib sections are compiled before files in the enclosing invocation. Directives in the makelib section only apply to the makelib section files. Directives in the enclosing invocation apply to all files in the invocation. The -work directive is ignored within a makelib section. -objext <ext> Equivalent to -o_ext +<ext>[,<ext>] -uvm Load the UVM library from the XCELIUM installation location. For uvm: `ncroot`/tools/methodology/UVM/CDNS-1.1d/sv or `ncroot`/tools/uvm/uvm_lib/uvm_sv if the first does not exist. Note If the path to UVM cannot be located within the XCELIUM installation, the tool tries to load the library from $UVM_HOME or $DVT_UVM_HOME . If $DVT_UVM_HOME is not defined, falls back to $DVT_HOME/predefined_projects/libs/uvm-1.2 . -uvmhome <path> If <path> is: the word \u00e2\u0080\u009cdefault\u00e2\u0080\u009d : equivalent with -uvm an existing absolute path or relative path : load the UVM library from the specified <path> an existing subpath of `ncroot`/tools/methodology/UVM/ : load the UVM library from ncroot /tools/methodology/UVM/<path>/sv Has precedence over -uvm. -ml_uvm Load the UVM_ML library from the XCELIUM installation location. For uvm: `ncroot`/tools/methodology/UVM/CDNS-1.1d/ml . Note If the path to UVM_ML cannot be located within the XCELIUM installation, the tool tries to load the library from $UVM_HOME or $DVT_UVM_HOME . -uvmexthome <path> If <path> is an existing absolute path or relative path : load the UVM extension files from the specified <path>. Should be used in conjunction with -uvmhome . -pkgsearch <lib> Specify the library search order for Verilog packages. You can specify multiple libraries by using this option multiple times. -snpath <path> Equivalent to +dvt_setenv+SPECMAN_PATH=$SPECMAN_PATH:<path> -sndefine <arg> Equivalent to +define+<arg> -sv All files that would be parsed according to the File Extension to Language Syntax Mapping or Language Syntax for Unmapped Extensions with a Verilog syntax flavor will be parsed with SystemVerilog 2012 instead. Has precedence over -v1995 . -svams_2019 All Verilog/SystemVerilog files will be parsed with SystemVerilog AMS. Has precedence over other syntax specifications. -<syntax>_ext [+]<ext>[,<ext>] Files with <ext> extension will be parsed using the specified <syntax>. If the optional + is specified, the mapping will be added to the default File Extension to Language Syntax Mapping . Otherwise, the default mapping of the specified <syntax> is overridden. If you specify the override directive multiple times for the same <syntax>, the default File Extension to Language Syntax Mapping will be overridden only the first time. You can specify more extensions at once, comma-separated, for example - \u00e2\u0080\u0098\u00e2\u0080\u0099vlog_ext .svh,.svp\u00e2\u0080\u0099\u00e2\u0080\u0099. The dot (.) for specifying <ext> is mandatory. The following directives are supported: -a_ext, -amsvhdl_ext, -amsvlog_ext, -as_ext, -c_ext, -cpp_ext, -dynlib_ext, -e_ext, -o_ext, -spice_ext, -sysv_ext, -vhcfg_ext, -vhdl_ext. See the list below for more details regarding <syntax>. -v1995 -v95 All files that would be parsed according to the File Extension to Language Syntax Mapping or Language Syntax for Unmapped Extensions with Verilog 2001 will be parsed instead with a reduced keywordset variant of Verilog 2001. The reduced keywordset does not contain the keywords automatic , localparam , generate , endgenerate , and genvar . -v200x All files that would be parsed according to the File Extension to Language Syntax Mapping or Language Syntax for Unmapped Extensions with a VHDL syntax flavor (but not VHDL AMS) will be parsed with VHDL 2008 instead. Has precedence over -v93. -v93 All files that would be parsed according to the File Extension to Language Syntax Mapping or Language Syntax for Unmapped Extensions with a VHDL syntax flavor (but not VHDL AMS) will be parsed with VHDL 93 instead. -vhdlext <ext> Equivalent to -vhdl_ext +<ext>[,<ext>] -vlogext <ext> Equivalent to -vlog_ext +<ext>[,<ext>] How to specify <syntax> for - default_ext <syntax> and - <syntax>_ext directives Language Syntax - default_ext <syntax> - <syntax>_ext Verilog 2001 -default_ext verilog -vlog_ext Verilog 1995 -default_ext verilog95 N/A SystemVerilog 2012 -default_ext systemverilog, -default_ext vcnf -sysv_ext VHDL 1987 -default_ext vhdl, -default_ext vhcfg -vhdl_ext e Language -default_ext e -e_ext VHDL AMS 1999 -default_ext vhdl-ams -amsvhdl_ext SKIP -default_ext verilog-ams, -default_ext psl_vlog, -default_ext psl_vhdl, -default_ext psl_sc, -default_ext c, -default_ext cpp, -default_ext assembly, -default_ext o, -default_ext a, -default_ext so, -default_ext scs -a_ext, -amsvhdl_ext, -amsvlog_ext, -as_ext, -c_ext, -cpp_ext, -dynlib_ext, -e_ext, -o_ext, -spice_ext, -sysv_ext, -vhcfg_ext, -vhdl_ext Predefined API INCA Defined as preprocessing macro without value. XCELIUM Defined as preprocessing macro without value. Examples I want to parse .sv , .c and .v files as SystemVerilog: + dvt_init + xcelium . xrun // By default . c are skipped and . v are parsed with Verilog 2001 syntax - sysv_ext +. v , . c // Now . c and . v are parsed with SystemVerilog 2012 ; however , the default extensions mapped to SystemVerilog 2012 still stand , including . sv Note Every time you re-map an already mapped extension, DVT will warn you. For the example above, you get the following warnings: .v was previously mapped to Verilog_2001 .c was previously mapped to Skip I want the .vp files to be parsed with the Language Syntax for Unmapped Extensions + dvt_init + xcelium . xrun // By default . vp , . v , . vs are parsed with Verilog 2001 - vlog_ext . v , . vs // We override the mapping for Verilog 2001 with only the other two extensions . // Now . vp is not mapped to any Language Syntax . // Because by default the unmapped extensions are skipped , . vp files will be skipped I want to change the Language Syntax for Unmapped Extensions + dvt_init + xcelium . xrun // By default the unmapped extensions are skipped - default_ext verilog95 // Now unmapped extensions , for example . foo , will be parsed as Verilog 95 I want to parse all Verilog source files and all files with unmapped extensions as SystemVerilog, and all VHDL files as VHDL 2000 + dvt_init + xcelium . xrun - default_ext systemverilog // All files with unmapped extensions are parsed as SystemVerilog - sv // All Verilog source files are parsed with SystemVerilog - v200x // All VHDL source files are parsed with VHDL 2008 Multiple .build Files Paths On this page List of Compatibility Modes How to Specify the Compatibility Mode Default DVT Compatibility Mode Specifying a <syntax> Examples gcc Compatibility Mode ius.irun Compatibility Mode Examples ius.perspec Compatibility Mode questa.vcom Compatibility Mode questa.vlog Compatibility Mode questa.qrun Compatibility Mode vcs.vhdlan Compatibility Mode vcs.vlogan Compatibility Mode xcelium.xrun Compatibility Mode How to specify <syntax> for - default_ext <syntax> and - <syntax>_ext directives Examples Back to top",
    "section_path": [],
    "tokens": 5643,
    "source": "scraped"
  },
  {
    "id": "92e4b2c2-7da2-4884-b33b-3746ba4496d1",
    "title": "How to handle Simulator and Command Line Macros | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/how-to-handle-simulator-and-command-line-macros.html",
    "content": "How to handle Simulator and Command Line Macros | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to handle Simulator and Command Line Macros Some simulators define proprietary pre-processing that might have some implications on the actual simulated code (see for example in OVM lib ifdef INCA occurrences). Also, many times, compilation/run scripts take as arguments macro definitions. See Build Configurations for enhanced support of simulator commands files. Until we\u00e2\u0080\u0099ll fully integrate with all simulators and/or we provide preferences for specifying macros and means for easily turning them on/off, we recommend to create a dummy *.sv file that you set first in the top files project property as follows: Create a separate dummy *.sv file ( eclipse_simulator_macros.sv ) where you\u00e2\u0080\u0099ll define simulator macros guarded by ifndefs . Put the dummy macros file in your project. Configure the Project Top Files so that the dummy macros file will be the first one. Rebuild. Dummy macros might look like: How to use Working Sets for filtering Problems/Task/Search views? How do I Access Files Outside Project Dir - Working with Linked Resources Back to top",
    "section_path": [],
    "tokens": 204,
    "source": "scraped"
  },
  {
    "id": "7cf67d60-07d3-4836-8c7e-f137702297ed",
    "title": "Tooltips | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/tooltips.html",
    "content": "Tooltips | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Tooltips A tooltip is a brief, informative message that appears when a user interacts with an element in a graphical user interface (GUI). In DVT tooltips are initiated through a mouse-hover gesture. The below table highlights all the available areas from where tooltips can be triggered: Code Place the mouse cursor over an identifier in the editor. The tooltip will display information about the element under cursor including:\nthe comment associated with the element\u00e2\u0080\u0099s declaration (written above or inline), or the LRM documentation for predefined API the scoping information for types (enclosing package) the full signature of methods the direction of ports Tooltips are available for all the types, methods, fields, macros, etc. from the source code files that DVT analyzes in your project. Folded regions Place the mouse cursor over the + sign of a folded code region. The tooltip will display the folded region contents: Macros Values Parameter Values Override indications Place the mouse cursor over an override annotation on the left vertical ruler. The tooltip will display the overridden method signature. Problems Place the mouse cursor over an error or warning annotation on the left vertical ruler of the editor. The tooltip will display the error or warning message: If multiple problems are reported on the same line, an annotation list is displayed: WaveDrom Diagrams Place the mouse cursor over a JSON waveform description written inside a comment. The tooltip will display WaveDrom Timing Diagrams , if the descriptions are compliant with the WaveDrom library standard: UVM Register Bit Field Diagrams Place the mouse cursor over an UVM register class. The tooltip will display bit field diagrams, by parsing the UVM configuration methods: Method Call Arguments Mapping Macro Call Arguments Mapping Ordered Parameter Mapping Ordered Port Connection Mapping Place the editor cursor on a method call argument and press Ctrl + Shift + Space . The tooltip will list all the method declaration arguments along with their name, type, direction and default value. Move the editor cursor using the arrow keys to inspect argument mapping - the argument under cursor is always highlighted in boldface: The same functionality is available for macro calls, instance parameter connections and instance port connections: Toolbar Actions Views Back to top",
    "section_path": [],
    "tokens": 400,
    "source": "scraped"
  },
  {
    "id": "9c29f417-8129-488e-8b60-35a45d0078e4",
    "title": "Generating External Tool Scripts from the DVT Build Configuration | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/compile_script.html",
    "content": "Generating External Tool Scripts from the DVT Build Configuration | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Generating External Tool Scripts from the DVT Build Configuration You can integrate DVT with external tools like compilers, simulators or linters via Run Configurations and External Builders . Sometimes a good portion of the DVT build configuration file (.dvt/default.build) can be reused by the external tools.\nFor example, an external compiler invocation is very similar to the content of each +dvt_init section from the default.build file,\nas it contains the same set of top files and compiler directives.\nHowever, most of the time there are tool, scripting or OS specific differences that do not allow a direct reuse. For such situations, DVT provides the ${dvt_compile_script:<script_template.ftl>:<script.sh>} variable. It takes two mandatory arguments, provided as absolute paths or relative to the project root: script_template.ftl - a FreeMarker template of the script script.sh - the filename where DVT will generate the resulting script In the script template you can access structured data describing the active build configuration.\nFor example, the list of all +dvt_init sections and for each section the library name or list of all directives.\nWhen the external tool command gets executed, the template is processed and the script is generated.\nThe variable itself is resolved to the full path of the generated script file, which can be used in the external tool command line. The following API is accessible in the FreeMarker template: isIncremental() Returns true if the script generation was triggered through an external builder\u00e2\u0080\u0099s incremental build command. getIncrementalFile() Returns the path to the incrementally compiled file - see isIncremental(). getInvocations() A list of invocation objects. Each +dvt_init section from the build configuration file is modeled by an invocation object. In the case of an external builder\u00e2\u0080\u0099s incremental command, only the invocations in which the incrementally compiled file is specified. invocation.getToolCompat() The compatiblity mode, one of DVT, IUS_IRUN, QUESTA_VCOM, QUESTA_VLOG, VCS_VHDLAN, VCS_VLOGAN invocation.getCompilationRoot() The compilation root if specified by +dvt_compilation_root or the DVT project\u00e2\u0080\u0099s location otherwise. invocation.getDirectives() A list of directives specified in the corresponding +dvt_init section. A directive is comprised of its name and arguments, if any, separated by space. The content of -f included files is not available in the model. The -f directives are returned as-they-are. invocation.replaceEnv(String input) A utility method to perform environment variable substitution in the scope of the current +dvt_init section. Any +dvt_setenv directives specified within the invocation are taken into account. invocation.getLibName() The library name if specified by -work or \u00e2\u0080\u009cwork\u00e2\u0080\u009d otherwise. invocation.getIndex() The index of the invocation, where the first implicit invocation is #0. getLibPathSet() A set of unique library name and path pairs. libPath.getPath() Returns the library path. libPath.getLib() Returns the library name. Tip An Eclipse plugin provides IDE functionality (syntax highlight, errors as you type, etc) for working with FreeMarker templates. Note Template processing errors prevent the execution of the external tool. They are reported in a pop-up dialog, and more details can be found in the FreeMarker page of the Console View. Example: External Builder for QuestaSim on Windows OS This example illustrates how to use the ${dvt_compile_script} variable to configure QuestaSim as an external compiler on Windows OS. Click the drop-down arrow to the side of the Rebuild Project (External Builders) toolbar button and choose Configure\u00e2\u0080\u00a6 . Create a New\u00e2\u0080\u00a6 > External Builder (Generic) and fill in the full, incremental and clean commands. On the Filters tab, enable the Questa filter category, and any other filters that may be relevant for you. Tip The external builder configuration is saved in the .dvt/external_builders.xml file,\nyou can skip the steps above and simply create the file with the content listed below. Create the script templates for full, incremental and clean commands.\nListings of the files used in this example are provided below. Note The bin directory of the QuestaSim installation should be included in the %PATH% variable. Note The ${env_var:DVT_HOME}binutilsbusybox program which is included in the DVT distribution allows scripts to be written in bash. .dvt/external_builders.xml <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <configurations> <configuration ATTR_AUTO_COMMAND= \"${env_var:DVT_HOME}\\bin\\utils\\busybox sh ${dvt_compile_script:.dvt/qw_incr.ftl:.dvt/qw_incr.sh}\" ATTR_BUILDER_ENABLED= \"false\" ATTR_BUILDER_NAME= \"questa_compile\" ATTR_CLEAN_COMMAND= \"${env_var:DVT_HOME}\\bin\\utils\\busybox sh ${dvt_compile_script:.dvt/qw_clean.ftl:.dvt/qw_clean.sh}\" ATTR_FILTERS_KIND= \"Questa,\" ATTR_FULL_COMMAND= \"${env_var:DVT_HOME}\\bin\\utils\\busybox sh ${dvt_compile_script:.dvt/qw_full.ftl:.dvt/qw_full.sh}\" ATTR_WORKING_DIRECTORY= \"\" > <patterns/> <environment_variables ATTR_APPEND_ENVIRONMENT_VARIABLES= \"true\" /> </configuration> </configurations> .dvt/qw_compile_full.ftl #!/bin/bash < #list getInvocations() as invocation> echo \"Invocation no ${ invocation .getIndex() } \" < #assign compilationRoot = invocation.getCompilationRoot()> cd \" ${ compilationRoot } \" < #assign libName = invocation.getLibName()> vmake ${ libName } & >/dev/null || vlib ${ libName } < #if (invocation.getToolCompat() == \"questa.vcom\")> vcom.exe \\ < #elseif (invocation.getToolCompat() == \"questa.vlog\")> vlog.exe \\ </#if> < #list invocation.getDirectives() as directive> < #if (!directive?matches(\"\\\\+dvt_.*\"))> < #if (directive?contains(\"\\\\\"))> \" ${ invocation .replaceEnv(directive) } \" < #sep>\\</#sep> < #else> ${ invocation .replaceEnv(directive) } < #sep>\\</#sep> </#if> </#if> </#list> </#list> .dvt/qw_compile_incr.ftl #!/bin/bash < #list getInvocations() as invocation> echo \"Invocation no ${ invocation .getIndex() } \" < #assign compilationRoot = invocation.getCompilationRoot()> cd \" ${ compilationRoot } \" < #assign libName = invocation.getLibName()> vmake ${ libName } & >/dev/null || vlib ${ libName } < #if (invocation.getToolCompat() == \"questa.vcom\")> vcom.exe \\ < #elseif (invocation.getToolCompat() == \"questa.vlog\")> vlog.exe -incr \\ </#if> < #list invocation.getDirectives() as directive> < #if (!directive?matches(\"\\\\+dvt_.*\") && (directive?starts_with(\"+\") || directive?starts_with(\"-\")))> ${ directive } < #sep>\\</#sep> </#if> </#list> \" ${ getIncrementalFile () } \" \\ </#list> .dvt/qw_compile_clean.ftl #!/bin/bash <#list getLibPathSet() as libPath> cd \"${libPath.getPath()}\" vdel -lib ${libPath.getLib()} -all > /dev/null </#list> FPGA Support Incremental Compilation Back to top",
    "section_path": [],
    "tokens": 915,
    "source": "scraped"
  },
  {
    "id": "f1814a7e-5e1d-407f-9ff5-6f99bb30fb9b",
    "title": "Managed Settings | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/settings-management/managed-setting.html",
    "content": "Managed Settings | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Managed Settings Not all settings are used in the same way. Some of the settings might be used only when the platform starts and others only when a specific operation is invoked. The following list presents the type of settings, the file where they are stored by default and order of precedence: Eclipse Launcher Configuration file name : eclipse.ini description : settings used by the Eclipse launcher (executable) to start the process, for example memory allocation thresholds precedence : dvt.sh arguments user common $DVT_HOME/eclipse/eclipse.ini handling : merged by precedence order; flags that have a key-value nature will be overwritten by the higher precedence value and all other flags will be accumulated relevant settings : memory allocation thresholds (-Xms, -Xmx, -Xss) flags used by Eclipse compiler exclude options GTK RC File file name : theme.gtkrc description : settings used by GTK window manager under linux operating system to determine the window colors for buttons, text, etc. precedence : user common $HOME/.dvt.gtkrc handling : replaced by precedence order; the file with higher precedence will be used Workspace Preferences file name : preferences.ini description : any changes done through Window \u00e2\u0080\u00a3 Preferences dialog will be automatically reflected in the preferences.ini file at user level; precedence : user common handling : merged by precedence order; preferences will be overwritten by the higher precedence value relevant settings : key bindings global code templates editor customizations task tags DVT Generic Run Configurations file name : *.launch description : run configurations are used to run external programs and can be serialized in *.launch files handling : accumulated from all opened projects (including user and common locations automatically linked in DVT-Settings project) Verissimo Linter Configurations file name : *.launch description : linter configurations are used to set the linter configuration files (*_lint_ruleset.xml, *_lint_waivers.xml, *_lint_user_notes.xml, *_lint_manual_checks_status.xml) and can be serialized in *.launch files handling : accumulated from all opened projects (including user and common locations automatically linked in DVT-Settings project) Compile Waivers file name : waivers.xml description : used to change the severity (promote/demote) or disable the problems reported by DVT during compilation (see Compile Waivers ) precedence : project user commonunmanaged handling : accumulated from all levels in precedence order default location : <project>/.dvt/waivers.xml Content Filters file name : content_filters.xml description : used to eliminate the unnecessary clutter introduced by 3rd party libraries like UVM (automatically hiding their API, TODO reminders, problems, \u00e2\u0080\u00a6) precedence : project user common handling : accumulated from all levels in precedence order default location : <project>/.dvt/content_filters.xml External Builders file name : external_builders.xml description : used to invoke any 3rd party script or tool and back-annotate its output (errors, warnings etc.) to the source code (see External Builders ) precedence : there can\u00e2\u0080\u0099t be two configurations with the same name, if it happens there is no guarantee on the precedence order handling : accumulated from all levels default location : <project>/.dvt/external_builders.xml Export HTML Documentation file name : dvt_export_html.xml description : settings used by the Export HTML Documentation Wizard (see Export HTML/PDF Documentation ) precedence : project\n-  user\n-  common handling : flags that have a key-value nature will be overwritten by the higher precedence value and all other flags will be accumulated default location : <project>/.dvt/dvt_export_html.xml Smart Log Styles file name : log_styles.xml description : Smart Log - Styles customization precedence : project user common handling : accumulated from all levels in precedence order default location : <project>/.dvt/log_styles.xml Custom Pragmas file name : custom_pragmas.xml description : used to create Custom Pragmas precedence : project user common handling : accumulated from all levels in precedence order default location : <project>/.dvt/custom_pragmas.xml Settings Management Unmanaged Settings Back to top",
    "section_path": [],
    "tokens": 635,
    "source": "scraped"
  },
  {
    "id": "897b2911-9d23-412f-9402-0589f33ce794",
    "title": "Override Constraints | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/override-constraints/index.html",
    "content": "Override Constraints | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Override Constraints Override Annotation Inspect Overrides in the Quick Type Hierarchy View Inspect Overrides in the Layers View Override Using the Dialog Override Using Autocomplete Proposals Override Using the Type Hierarchy View Override Annotation Back to top",
    "section_path": [],
    "tokens": 69,
    "source": "scraped"
  },
  {
    "id": "71c75bf3-aa22-4f3a-9975-b152abb5bb1e",
    "title": "Non Standard Checks | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/compile-checks/non-standard-checks.html",
    "content": "Non Standard Checks | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Non Standard Checks ID Message Notes/Examples ASSERTION_IN_CUNIT_SCOPE Deferred immediate assertion not allowed in compilation-unit scope assert #0 (0 == 0); EXTERN_DECLARATION_IN_CUNIT_SCOPE Extern function not allowed in compilation-unit scope extern int foo(); FATAL_SYSTEM_TASK_FIRST_ARGUMENT Expecting 0, 1 or 2 as first argument to \u00e2\u0080\u0098$fatal\u00e2\u0080\u0099 system task $fatal(4, \"Sorry\"); BEGIN_END_OUTSIDE_GENERATE \u00e2\u0080\u0098begin/end\u00e2\u0080\u0099 generate block not allowed CONFIGURATION_RULE Unexpected configuration rule MISSING_CONFIGURATION_RULE_SEMI Expecting \u00e2\u0080\u0098;\u00e2\u0080\u0099 after configuration rule instance top.sub.u1 liblist gateLib TIMEUNIT_IN_CLASS_SCOPE # declaration not allowed in class scope class foo ; timeunit 100 ps ; timeprecision 10 fs ; endclass FUNCTION_PROTOTYPE Expecting \u00e2\u0080\u0098function\u00e2\u0080\u0099 keyword in prototype declaration extern void foo(); PURE_QUALIFIER_POSITION \u00e2\u0080\u0098pure\u00e2\u0080\u0099 qualifier not allowed before # qualifier protected pure local virtual function void wrong_order(); CONSTRUCTOR_LIFETIME \u00e2\u0080\u0098automatic\u00e2\u0080\u0099 lifetime for class constructor not allowed class foo ; function automatic new (); endfunction endclass CLASS_VARIABLE_LIFETIME \u00e2\u0080\u0098automatic\u00e2\u0080\u0099 lifetime for class variable # not allowed class foo ; \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 automatic int bar ; endclass CONSTRAINT_DEFAULT_QUALIFIER \u00e2\u0080\u0098default\u00e2\u0080\u0099 qualifier for constraint not allowed default constraint a_cons { \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 x == 0 ; \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 y <= 0 ; } HARD_SOLVE_BEFORE \u00e2\u0080\u0098hard\u00e2\u0080\u0099 qualifier not allowed constraint c_cons { \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 x == 0 ; \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 y <= 0 ; \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 solve x before y hard ; } SOFT_AFTER_EXPRESSION \u00e2\u0080\u0098soft\u00e2\u0080\u0099 must be placed before the expression constraint c_cons { \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 x dist { 0 , 1 } soft ; } SOFT_BEFORE_SOFT \u00e2\u0080\u0098soft\u00e2\u0080\u0099 not allowed before \u00e2\u0080\u0098soft\u00e2\u0080\u0099 constraint c_cons { \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 soft soft x ; } SOFT_BEFORE_UNIQUE \u00e2\u0080\u0098soft\u00e2\u0080\u0099 not allowed before \u00e2\u0080\u0098unique\u00e2\u0080\u0099 constraint c_cons { \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 soft unique {} } SOFT_BEFORE_IF \u00e2\u0080\u0098soft\u00e2\u0080\u0099 not allowed before \u00e2\u0080\u0098if\u00e2\u0080\u0099 constraint c_cons { \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 soft if ( condition ) {} } SOFT_BEFORE_FOREACH \u00e2\u0080\u0098soft\u00e2\u0080\u0099 not allowed before \u00e2\u0080\u0098foreach\u00e2\u0080\u0099 constraint c_cons { \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 soft foreach ( array [ i ]) {} } SOFT_BEFORE_DISABLE \u00e2\u0080\u0098soft\u00e2\u0080\u0099 not allowed before \u00e2\u0080\u0098disable\u00e2\u0080\u0099 constraint c_cons { \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 soft disable soft x ; } PARENTHESES_DIST_EXPRESSION Enclosing parentheses not allowed for dist expression constraint c_cons { \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 ( x dist { 0 , 1 }); \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 ( foreach ( array [ i ]) { }); \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 ( x -> 2 ); } SPACE_DIST_WEIGHT Unexpected space between : and # in dist weight rand int x ; constraint c_cons { \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 x dist { 0 : = 3 }; } DYNAMICPARAM Unexpected keyword \u00e2\u0080\u0098dynamicparam\u00e2\u0080\u0099 dynamicparam p = 3; CONST_AFTER_STATIC \u00e2\u0080\u0098const\u00e2\u0080\u0099 qualifier not allowed after \u00e2\u0080\u0098static\u00e2\u0080\u0099 static const int x = 0; LIFETIME_QUALIFIER_BEFORE_VAR # qualifier not allowed before \u00e2\u0080\u0098var\u00e2\u0080\u0099 automatic var int x = 0; TYPEDEF_COVERGROUP Typedef of covergroup not allowed typedef covergroup cg; TYPEDEF_DATATYPE Explicit data type required (implicit \u00e2\u0080\u0098logic\u00e2\u0080\u0099 is assumed) typedef [3:0] new_type; IMPLICIT_DATA_TYPE_IN_DECLARATION Expecting net type (e.g. wire) or \u00e2\u0080\u0098var\u00e2\u0080\u0099 keyword before implicit data type [3:0] var_or_net; PACKED_DIMENSION_INTEGER_TYPE Unexpected packed dimension for integer type function integer [ 3 : 0 ] foo (); endfunction PACKED_STRUCT_WITH_SIGNING Expecting \u00e2\u0080\u0098packed\u00e2\u0080\u0099 before signing typedef struct signed { \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 int x ; \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 int y ;} packed_with_sign ; TYPEOF_SYSTEM_FUNCTION \u00e2\u0080\u0098$typeof\u00e2\u0080\u0099 system function not allowed bit[3:0] field; typedef $typeof(field) new_type; PACKAGE_SCOPE_IN_ENUM_BASE_TYPE Package scope before enum base type not allowed package package_name ; typedef int id ; endpackage typedef enum package_name :: id { R , G , B } new_enum ; ENUM_IMPLICIT_DATATYPE Explicit data type required (implicit # is assumed) typedef enum [1:0] {R,G,B} new_enum; DELAY_VALUE_EXPRESSION Expecting parentheses around bit-select and part-select always ... #del[0] ok = 1; PARAMETER_DYNAMIC_ARRAY Fixed size required for parameter dimension parameter logic flag1 [] = ' {2} ; localparam logic flag2 [] = ' {2} ; CONST_EXPR_PACKED_DIMENSION Expecting constant range instead of constant expression for packed dimension enum bit[1] { A, B } foo; QUALIFIER_BEFORE_METHOD # qualifier not allowed before method keyword static function foo (); ... endfunction CLASS_SCOPE_END_LABEL Class scope #:: before end label not allowed ... endfunction : class_scope::func_name HIERARCHICAL_INTERFACE_IDENTIFIER Hierarchical interface identifier #.# not allowed task id1.id2.id3(); PROTOTYPE_RETURN_DATA_TYPE Expecting return data type or void for function prototype extern function doCheck(); DPI_DECLARATION_STRING Expecting \u00e2\u0080\u009cDPI\u00e2\u0080\u009d or \u00e2\u0080\u009cDPI-C\u00e2\u0080\u009d import \"DPI_C\" init_1 = function void moo(); EMPTY_ARGUMENTS_LIST Empty arguments list \u00e2\u0080\u0098()\u00e2\u0080\u0099 not allowed when arguments are declared inside function / task body function void foo (); \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 output integer x ; endfunction DYNAMIC_ARRAY_INITIALIZATION Unexpected \u00e2\u0080\u0098new\u00e2\u0080\u0099 initialization for dynamic array task foo ( input int a [] = new [ 1 ]); endtask CLASS_INSTANCE_INITIALIZATION Unexpected \u00e2\u0080\u0098new\u00e2\u0080\u0099 initialization for class instance function void foo ( cls i = new ()); endfunction MODPORT_PORTS_DECLARATION Unexpected empty modport ports declaration modport mp_name(); MODPORT_PORT_DIRECTION Explicit direction required for port # modport mp_name(x, input y); MODPORT_HIERARCHICAL_PORT Hierarchical identifier not allowed in modport port declaration modport master (output sb.gnt); MODPORT_IMPORT_EXPORT Unexpected .* used in modport import / export declaration modport master (import sb.\\*); REPETITION_IN_SEQUENCE Goto repeat \u00e2\u0080\u0098[->\u00e2\u0080\u0099 and non-consecutive repeat \u00e2\u0080\u0098[=\u00e2\u0080\u0099 operators not allowed COVERPOINT_IFF_EXPRESSION Expecting parentheses around coverpoint \u00e2\u0080\u0098iff\u00e2\u0080\u0099 expression coverpoint a iff test; BINS_IFF_EXPRESSION Expecting parentheses around bins \u00e2\u0080\u0098iff\u00e2\u0080\u0099 expression bins a = { [0:63],65 } iff ana; COVERCROSS_IFF_EXPRESSION Expecting parentheses around covercross \u00e2\u0080\u0098iff\u00e2\u0080\u0099 expression BINS_SELECTION_IFF_EXPRESSION Expecting parentheses around bins selection \u00e2\u0080\u0098iff\u00e2\u0080\u0099 expression WILDCARD_BINS_SELECTION \u00e2\u0080\u0098wildcard\u00e2\u0080\u0099 not allowed for bins selection covergroup cov @ ( posedge clk ); aXb : cross a , b { wildcard bins i_zero = binsof ( a ) intersect { 0 }; } endgroup HIERARCHICAL_ACCESS_IN_BINS_EXPRESSION Cover point hierarchical identifier not allowed in bins expression binsof(x.cover_point_id.bin_id); SELECT_IN_BINS_EXPRESSION Select not allowed in bins expression binsof(cover_point_id.bin_id[3]); COVERPOINT_EXPRESSION_TYPE Coverpoint expression should be of an integral data type COVERGROUP_EXPRESSION Expecting constant expression or non-ref covergroup argument, found # int field ; covergroup cg () with function sample ( int unsigned foo ); coverpoint foo { ignore_bins ignore = foo with ( field > 2 ); } endgroup CONCATENATION_MULTIPLIER Expecting constant expression as concatenation multiplier, found # int field = 8 ; logic [ 7 : 0 & #93 x = { field {1'b1}} PULL_GATE_INSTANCE Multiple terminals to a pull gate instance not allowed pullup p (t1, t2, t3); IMPLICIT_INSTANCE_NAME Implicit name not allowed for instance of # module top ( input i , output o ); m1 ( . i ( i ), . o ( o )); endmodule PARENTHESES_GATE_TERMINAL Enclosing parentheses around gate terminal not allowed tranif0 ti0 (x, (y), z); PARAMETER_OVERRIDE Expecting parentheses around parameter override module m #(P1=1)(); endmodule module top (); m # 3 u_m(); endmodule EMPTY_ORDERED_PARAMETER_OVERRIDE Empty parameter override in ordered list not allowed xmm_atomic_gen #(transaction, ,\"Atomic Gen\") msg_rx_gen; MULTIPLE_DOT_STAR_CONNECTIONS Dot start port connection \u00e2\u0080\u0098.*\u00e2\u0080\u0099 cannot appear more than once in the port list m u_m(.*, .\\*); INITIAL_BLOCK_SCOPE Unexpected initial block construct package p1 ; \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 initial begin end ; endpackage FINAL_BLOCK_SCOPE Unexpected final block construct package p1 ; \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 final begin end ; endpackage SELECT_IN_EVENT_CONTROL Select in event control not allowed @u_m3_1.a[1]; EVENT_TRIGGER \u00e2\u0080\u0098class_name::\u00e2\u0080\u0099 not allowed in event trigger construct '->' a_class::a; DISABLE_STATEMENT \u00e2\u0080\u0098class_name::\u00e2\u0080\u0099 not allowed in disable statement disable a_class::a; EMPTY_CASE_STATEMENT Empty case statement not allowed case ( x ) endcase EMPTY_ASSIGNMENT_PATTERN Empty assignment pattern \u00e2\u0080\u0098{} not allowed x = '{}; MISSING_FOR_LOOP_INITIALIZATION \u00e2\u0080\u0098for\u00e2\u0080\u0099 loop variable initialization required Note Not applicable in IEEE 1800-2012 standard syntax or newer. for ( ; i < 10; i++) ... MISSING_FOR_LOOP_CONDITION \u00e2\u0080\u0098for\u00e2\u0080\u0099 loop conditional expression required Note Not applicable in IEEE 1800-2012 standard syntax or newer. for (i = 0; ; i++) ... MISSING_FOR_LOOP_STEP \u00e2\u0080\u0098for\u00e2\u0080\u0099 loop step required Note Not applicable in IEEE 1800-2012 standard syntax or newer. for (i = 0; i < 10; ) ... FOREACH_LOOP_CONDITION Multidimensional array select not allowed in foreach loop condition Note Strict only check. See +dvt_strict_non_standard_checks build directive on how to activate it. foreach (array[val][i]) ... FOR_LOOP_INITIALIZATION Expecting assignment in \u00e2\u0080\u0098for\u00e2\u0080\u0099 loop variable initialization for (++i;i<10; i++) begin end SELECT_IN_WEIGHT Select in weight specification not allowed randsequence() ... first : add := array[0]; endsequence PARALLEL_PATH_DESCRIPTION List of inputs in parallel path description not allowed (in1,in2 => q[1]) = 1; RANGE_IN_MULTIPLE_CONCATENATION Range in multiple concatenation not allowed x = {0:3{1}}; ASSIGNMENT_PATTERN Expecting assignment pattern \u00e2\u0080\u0098{\u00e2\u0080\u00a6} instead of concatenation x = {a : '0, b : '1}; ASSIGNMENT_PATTERN_CONTEXT Assignment pattern not allowed outside assignment-like context (could not determine data type) if (struct_signal == '{ a, b }) ... SCALAR_ASSIGNMENT_PATTERN Variable of 1-bit scalar type # not allowed as target of assignment pattern bit x = '{ '0 }; TARGET_UNPACKED_ARRAY_CONCATENATION Unpacked array concatenation not allowed as target expression .out({ a, b }) STREAM_CONCATENATION_TYPE Packed dimension on stream concatenation type not allowed result = { >> bit [7:0] { variable_name } }; RANDOMIZE_ARGUMENT Range selection of randomize argument # not allowed std::randomize(rand_var[7:0]) with {...}; INSIDE_OPERATOR \u00e2\u0080\u0098inside\u00e2\u0080\u0099 operator in constant expression not allowed int y[a inside {b, c} ? 10 : 2]; INSIDE_OPERATOR_RANGE Expecting curly braces {} around \u00e2\u0080\u0098inside\u00e2\u0080\u0099 operator range if ( a inside x ) ... TYPE_CASTING Expecting tick before type casting expression int(some_var) NULL_CONSTANT_EXPRESSION Expecting constant expression instead of \u00e2\u0080\u0098null\u00e2\u0080\u0099 class my_class #(parameter string x = null TIME_VALUE Unexpected white space between number and time value timeunit 10 ps; HIERARCHICAL_CLASS_ACCESS Class scope resolution access \u00e2\u0080\u0098::\u00e2\u0080\u0099 not allowed a.b.c::enum_value SELECT_IN_CROSS_ITEMS_LIST Select in cross items list not allowed covergroup g2 @ ( posedge clk ); \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 AxC : cross color [ 2 ], pixel_adr ; endgroup HIERARCHICAL_ROOT_ACCESS Unexpected \u00e2\u0080\u0098$root\u00e2\u0080\u0099 name before package or class scope access $root.my_pkg::my_signal COMMA_AFTER_ATTRIBUTE_INSTANCE Attribute instance followed by \u00e2\u0080\u0098;\u00e2\u0080\u0099 not allowed (\\* full_case, parallel_case; \\*) CONST_ATTRIBUTE_INSTANCE \u00e2\u0080\u0098const\u00e2\u0080\u0099 for attribute instance not allowed (\\* const int full_case=1, parallel_case \\*) ATTRIBUTE_INSTANCE_DATA_TYPE Attribute instance data type not allowed (\\* integer library_binding = 1, something = 1 \\*) SELECT_IN_ATTRIBUTE_INSTANCE Select in attribute instance not allowed (\\* cds_net_set[0:2] = {\"a\", \"b\", \"c\"} \\*) TYPEOF_SYSTEM_TASK Unexpected \u00e2\u0080\u0098$typeof\u00e2\u0080\u0099 system task $typeof(a) b; KEYWORD_AS_IDENTIFIER Reserved keyword # not allowed as identifier instance, restrict, checker, table, cell, config, design MULTIPLE_BINS Specification of multiple bins dimension not allowed wildcard bins trans 2 = ({1'bx} => {1'bx}); ASSERTION_STATEMENT_ATTRIBUTE_INSTANCE Expecting attribute instance after block identifier # for procedural assertion statement (\\* cover_attribute \\*) block_identifier : cover property ... SYSTEM_FUNCTION_ARGUMENTS Maximum number of arguments for # system function is # $typename(x, 39); PARENTHESES_PATTERN Enclosing parentheses around pattern not allowed matches (tagged VAL .c) WILDCARD_EQUALITY_OPERATOR Expecting wildcard operator \u00e2\u0080\u0098==?\u00e2\u0080\u0099 instead of \u00e2\u0080\u0098=?=\u00e2\u0080\u0099 WILDCARD_INEQUALITY_OPERATOR Expecting wildcard operator \u00e2\u0080\u0098!=?\u00e2\u0080\u0099 instead of \u00e2\u0080\u0098!?=\u00e2\u0080\u0099 STRING_CONTINUATION Expecting \u00e2\u0080\u0098\\\u00e2\u0080\u0099 to continue the string on the next line string str = \"string is splittedon multiple lines \"; STRING_CONTINUATION_WS White-space not allowed after \u00e2\u0080\u0098\\\u00e2\u0080\u0099 line continuation string str = \"string is splitted \\\\ [white-space] \\\\ [ white - space ] on multiple lines \"; COMPILER_GUARD Expecting identifier after `ifdef, `ifndef, `elsif instead of `# USELIB_DIRECTIVE Unexpected Verilog-XL directive `uselib, use -y, -v, and +libext command line flags instead LIBRARY_PATH Quotes for library path specification not allowed library rtlLib \"top.v\"; MACRO_TEXT Macro text string must terminate with `\u00e2\u0080\u009d instead of \u00e2\u0080\u009c $sformat(errStr, \\`\"ID``_``SUFFIX SIGNAL is %b\",SIGNAL); MACRO_MULTILINE_DELIMITER Unexpected whitespace character(s) after macro multiline delimiter \\`define my_macro int i; \\\\ int j; EXPONENT_FORMAT_TIME_VALUE Unexpected exponent format for time value #(1.0e9ns) API Unexpected method / field # Note Strict only check for some API. See +dvt_strict_non_standard_checks build directive on how to activate all. NOF_PARAMETER_OVERRIDES Expected # parameter overrides, found # module mod ; endmodule ... mod #(2) field; MISSING_FUNCTION_IMPLEMENTATION # extern function is not implemented MISSING_TASK_IMPLEMENTATION # extern task is not implemented FUNCTION_IMPLEMENTATION_SCOPE Function implementation of # must be in the same scope as class # TASK_IMPLEMENTATION_SCOPE Task implementation of # must be in the same scope as class # CONSTRAINT_IMPLEMENTATION_SCOPE Constraint implementation # must be in the same scope as class # MODPORT_IMPORT_EXPORT_PORT Expecting method name instead of interface signal name # class foo ; endclass interface bar ( input clk ); foo field ; modport mp1 ( export field ); endinterface SELECT_METHOD_CALL Select not allowed after # method call m4.foo()[0] EVENT_CONTROL_EXPRESSION Expecting singular data type for event control expression instead of type # initial begin \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2\u00a0@(cif_enable) $display(\"list_of_arguments\"); end METHOD_OVERRIDE_ARGUMENT_NAME Argument name # of method # does not match # of override # class foo1 ; \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 virtual function bar ( int base_name ); \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 endfunction endclass class foo2 extends foo1 ; \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 virtual function bar ( int child_name ); \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 endfunction endclass FUNCTION_IMPLEMENTATION_RETURN_TYPE Return type # of function # must be the same as prototype return type (non-standard use of type alias) typedef bit my_type ; class foo ; \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 extern function bit boo (); endclass function my_type foo :: boo (); endfunction FUNCTION_IMPLEMENTATION_INTERNAL_RETURN_TYPE Internal return type # for the implementation of extern method # requires scope resolution function cls_internal_type cls::foo(); ... METHOD_IMPLEMENTATION_ARGUMENT_TYPE Argument type # of method # must be the same as prototype argument type (non-standard use of type alias) typedef bit my_type ; class foo ; \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 extern function bit boo ( bit arg ); \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 extern function bit goo ( bit arg ); endclass function bit foo :: boo ( my_type arg ); endfunction VOID_CAST_OF_VOID_FUNCTION Void cast of void function # not allowed void'(void_return_function()) LOGICAL_NEGATION Operand of type # not allowed with logical negation # (use == null instead) if (!class_obj) ... BINARY_LOGICAL_OPERATOR Operand of type # not allowed with binary logical operator # (use != null instead) if (class_obj && class_obj.field == 0) ... DYNAMIC_ARRAY_NULL_OPERATION # operator is undefined for dynamic array # and \u00e2\u0080\u0098null\u00e2\u0080\u0099 if (array == null) ... NUMERIC_NULL_OPERATION # operator is undefined for numeric type # and \u00e2\u0080\u0098null\u00e2\u0080\u0099 if (sig == null) ... STRING_OPERATION Explicit \u00e2\u0080\u0098string\u00e2\u0080\u0099 cast required of # operand of type # string a ; int b ; if ( a == b ) ... ENUM_ASSIGNMENT Explicit cast required when assigning # to variable # of enum type # enum_type a ; a += 1 ; ENUM_COMPARISON Explicit cast required when comparing # to variable # of enum type # enum_type a ; if ( a < 1 ) ... ENUM_RETURN Explicit cast to enum type # required when returning # function enum_type foo (); return 1 ; endfunction DIFFERENT_ENUMS_ASSIGNMENT Explicit cast required when assigning to enum type # from enum type # enum_type a ; a = other_enum_literal ; DIFFERENT_ENUMS_COMPARISON Explicit cast required when comparing enum type # to enum type # enum_type a ; if ( a < other_enum_literal ) ... EVENT_CONTROL The following events must be of a singular data type:# always @ ( a or b ) begin \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 c = a [ 0 ] & b ; end IMPORT_TYPE_WITHOUT_EXPORT Package # must export type # import pkg::not_exported_type; TYPE_SPECIALIZATION Type # is already a specialization of # typedef cls #(.T(int)) type_alias; type_alias #(.T(int)) field; REPEAT_CONDITION_UNPACKED_ARRAY Unpacked array # not allowed as repeat condition int array [ 2 ]; repeat ( array ) ... REPEAT_CONDITION_STRING String variable # not allowed as repeat condition string str ; repeat ( str ) ... REPEAT_CONDITION_UNPACKED_STRUCT Unpacked struct / union # not allowed as repeat condition struct { int x ; } val ; repeat ( val ) ... INTERFACE_NAME_SELF_REFERENCE Interface type name # not allowed as self reference virtual interface_name var = interface_name; INVALID_VIRTUAL_INTERFACE Interface # containing interface ports cannot be used as a virtual interface interface intf(interface port) INVALID_RAND_MODE_CALL \u00e2\u0080\u0098rand_mode\u00e2\u0080\u0099 call not allowed for non-random variable # int x ; function foo (); \u00c2\u00a0\u00c2\u00a0\u00c2\u00a0\u00c2 x . rand_mode ( 0 ); endfunction PORT_DEFAULT_VALUE Ouput / Inout / Ref port # cannot have a default value ANSI_ARGUMENT_REDECLARATION Redeclaration of ANSI argument # is not allowed function foo ( input ansi_arg ); logic ansi_arg ; endfunction ANSI_PORT_REDECLARATION Redeclaration of ANSI port # is not allowed module foo ( input ansi_port ); logic ansi_port ; endmodule REDUNDANT_NON_ANSI_PORT_DIRECTION Declaration of port # has redundant input / output / inout direction module foo ( arg ); input arg ; input wire arg ; endmodule Dead Code Checks Content Assist (Autocomplete) Back to top",
    "section_path": [],
    "tokens": 2659,
    "source": "scraped"
  },
  {
    "id": "00d6cf5a-3ff3-4c8f-ba40-3b44d8529e93",
    "title": "Show Constraints | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/show-constraints/index.html",
    "content": "Show Constraints | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Show Constraints To see where a variable is constrained, right click on it\u00e2\u0080\u0099s name > Show > Constraints . The results are presented in the Search View . The results include: Constraint blocks involving the variable In-line constraints of the variable inside randomize() with { \u00e2\u0080\u00a6 } Calls to rand_mode() and constraint_mode() which affect the variable randomization Tip For rand or randc class variables you can also hold down the Ctrl key while hovering the name of the variable with the mouse cursor, and pick Show Constraints from the pop-up list. Tip You can also trigger this functionality from a view\u00e2\u0080\u0099s context menu , for example from the Types View or Type Hierarchy View . Tip You can choose to hide constraint_mode() and rand_mode() calls using the toolbar Filters\u00e2\u0080\u00a6 button: Favorite Searches Show Instances Back to top",
    "section_path": [],
    "tokens": 169,
    "source": "scraped"
  },
  {
    "id": "e5e0bbc7-7ec8-45f8-812a-669ff094815e",
    "title": "Breadcrumb Navigation Bar | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/breadcrumb-navigation-bar/index.html",
    "content": "Breadcrumb Navigation Bar | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Breadcrumb Navigation Bar The breadcrumb navigation bars appear horizontally on top or at the bottom of source code and diagram editors. You can show/hide the breadcrumb navigation bars using the Set Enabled Breadcrumbs toolbar button. Note You can at any time use keyboard shortcuts to easily navigate in the Breadcrumb Navigation Bars. To do so, simply go to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Keys , search for the associated commands and choose some convenient key binding for the desired breadcrumb navigation. To navigate between the breadcrumb elements, use the TAB and SHIFT + TAB keyboard shortcuts. To inspect elements on the same level of the hierarchy, use the ARROW DOWN key. To expand a particular level in the hierarchy, use the ARROW RIGHT key. Design Breadcrumb Verification Breadcrumb Scope Breadcrumb Filesystem Breadcrumb Trace Path Design Breadcrumb Back to top",
    "section_path": [],
    "tokens": 173,
    "source": "scraped"
  },
  {
    "id": "f682870a-450b-46f2-b89c-3bd488322996",
    "title": "Show Instances | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/show-instances/index.html",
    "content": "Show Instances | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Show Instances Show Instances in the Search View Show Instances in the Design Hierarchy View Show Constraints Show Instances in the Search View Back to top",
    "section_path": [],
    "tokens": 58,
    "source": "scraped"
  },
  {
    "id": "5a290b55-7624-4f1c-b97e-c7dd61e83db2",
    "title": "Collapse Macro | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/collapse-macro.html",
    "content": "Collapse Macro | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Collapse Macro You can easily collapse macro expansions in the current file. Place the editor cursor on the start pragma of a macro expansion, press Ctrl + 1 , select Collapse macro from the list of quick assist proposals and press Enter . The macro expansion is immediately collapsed. Connect Instance Ports by Position Expand Macro Back to top",
    "section_path": [],
    "tokens": 91,
    "source": "scraped"
  },
  {
    "id": "a5fe4610-a74b-4366-a566-3d551844c09b",
    "title": "How to Report an Issue? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/report-an-issue/index.html",
    "content": "How to Report an Issue? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to Report an Issue? You can send an issue report right from the DVT GUI using the Report an Issue dialog. Along with a problem description, we often need logs and system information in order to reproduce a problematic behavior and fix it. Go to menu Help \u00e2\u0080\u00a3 DVT Quick Help \u00e2\u0080\u00a3 Report an Issue or simply click the toolbar button: Fill in the identification data (will be remembered for future reports) and issue description. Attach screenshots, code snippets or any other files you consider helpful in reproducing the problem. By default various application logs and diagnostic files are attached. You can preview any attachment using the magnifier icon. When you click Send , an e-mail is sent to support@amiq.com with your own address in CC. You can also save the issue report as a zip archive, and send it manually to support@amiq.com (for example if you don\u00e2\u0080\u0099t have Internet connectivity on the machine where DVT runs). The most useful debug information when dealing with performance issues is a JVM thread dump.\nMost likely this will help us pinpoint the problem and provide a fast solution. How to generate a thread dump from within DVT Eclipse? To generate a thread dump from within DVT go to Help \u00e2\u0080\u00a3 DVT Quick Help \u00e2\u0080\u00a3 Thread Dump Collector . Start the collector, then do the operation that causes the performance issue and afterwards stop the process from the same dialog. You can also use the Start Thread Dump Collector and Stop Thread Dump Collector shortcuts from the Quick Access bar ( Ctrl + 3 ). The thread dump is generated in the directory of the currently selected DVT project. How to generate a thread dump from outside DVT Eclipse? Assuming the DVT GUI is frozen, you can still generate a thread dump by running a script.\nOpen a terminal, log into the machine where DVT runs and run the following command: $DVT_HOME/bin/dvt_debug_utils.sh -workspace <dvt_workspace_location> -thread_dump -nof_kills 60 -tbs 500ms The thread dump file is generated in the <dvt_workspace_location>. How to generate a thread dump for Verissimo & Specador running in batch mode? Open a terminal and log into the machine where Verissimo/Specador runs.\nIdentify the PID of the Verissimo/Specador java process, for example: ps aux | grep ro . amiq . dvt . main . specador . SpecadorMain ps aux | grep ro . amiq . vlogdt . main . VerissimoMain Run the following command: $DVT_HOME/bin/dvt_debug_utils.sh -pid <PID> -thread_dump -nof_kills 60 -tbs 500ms The thread dump is generated in the current directory. Note Thread dumps can be automatically generated for specific named actions that the tool performs using the +dvt_profile+<name>[ +<name>][ +<period_ms>] build configuration directive, where <name> is one of: VLOG_RI, VLOG_RC, VLOG_RD, VLOG_US, VLOG_EP, VLOG_CP, VHDL_RU, VHDL_RT, VHDL_RD, VHDL_US, VHDL_USBD, VHDL_CP, ELAB, UNEL, ALL. What is New? Legal Notices On this page How to generate a thread dump from within DVT Eclipse? How to generate a thread dump from outside DVT Eclipse? How to generate a thread dump for Verissimo & Specador running in batch mode? Back to top",
    "section_path": [],
    "tokens": 543,
    "source": "scraped"
  },
  {
    "id": "8ce9d187-963b-46ec-b2ae-cfe4486822d9",
    "title": "VMM Smart Log | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/vmm-support/vmm-smart-log.html",
    "content": "VMM Smart Log | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide VMM Smart Log DVT ships with predefined filters for VMM that allow you to view colored and hyper-linked logs like the one below. To turn on VMM Smart Log: Use +define+VMM_LOG_FORMAT_FILE_LINE in the simulator invocation or define VMM_LOG_FORMAT_FILE_LINE in the source code. Select the predefined VMM filters as indicated below: See also Smart Log VMM Support Quick VMM Documentation Access Back to top",
    "section_path": [],
    "tokens": 96,
    "source": "scraped"
  },
  {
    "id": "6c2776b1-dde7-43dc-897c-50830b2af53a",
    "title": "Reminders (TODO Markers) | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reminders-todo-markers/index.html",
    "content": "Reminders (TODO Markers) | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Reminders (TODO Markers) You can embed reminders in your source files by adding comments prefixed by certain \u00e2\u0080\u009ckeywords\u00e2\u0080\u009d called task tags . There are three predefined tags: FIXME - high priority TODO - normal priority XXX - low priority All reminders are listed in the Tasks View . If it is not visible, open the view from menu Window > Show View > Other > General > Tasks . Double click on a task to jump to the marker definition. You can define custom reminder tags and assign them priorities: Navigate to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3  Task Tags You can specify if the tags should be considered case-sensitive and if the tag name should be displayed in Tasks View. Click the Add\u00e2\u0080\u00a6 button on the right, enter the name of your tag and select its priority Click OK in the New Task Tag and Preferences dialogs DVT will recognize the new tag and highlight it in code comments. Note it is recommended to rebuild the project so that DVT rescans all files for reminders. Macros and Quick Macros Views OVM Support Back to top",
    "section_path": [],
    "tokens": 219,
    "source": "scraped"
  },
  {
    "id": "93b833c6-5c01-42d3-9142-6638cb2c6abc",
    "title": "Inactive Generates Code Highlight | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/inactive-generates-code-highlight.html",
    "content": "Inactive Generates Code Highlight | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Inactive Generates Code Highlight DVT editor marks the unelaborated generate code (i.e. generate branches that are inactive) with a colored background. You can enable/disable the highlight and choose the highlight color: navigate to Window \u00e2\u0080\u00a3 Preferences then expand DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Editor . In the panel on the right side, you can find the Inactive generate branches group. Note The inactive generates code depends on the editor current design instance path shown in the Design Breadcrumb . You have the option to change the instance path, and therefore the highlight, from the Select Instance Path breadcrumb button. Icons and Decorations Lazy Bring up Resources Back to top",
    "section_path": [],
    "tokens": 142,
    "source": "scraped"
  },
  {
    "id": "cab1b8e6-710b-4bc1-8a94-3948705efea5",
    "title": "Remove Signal Never Used | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/remove-signal-never-used.html",
    "content": "Remove Signal Never Used | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Remove Signal Never Used Signals never used are flagged with warnings. Place the editor cursor on the warning\u00e2\u0080\u0099s line and press Ctrl + 1 , select Remove signal never used \u00e2\u0080\u00a6 from the list of quick fix proposals and press Enter . Remove Signal from Sensitivity List Update Extern Prototype/Implementation Back to top",
    "section_path": [],
    "tokens": 87,
    "source": "scraped"
  },
  {
    "id": "de3b328b-2381-47fd-bbe8-0a8de0ce7dc5",
    "title": "Export HTML/PDF Documentation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/export-documentation/index.html",
    "content": "Export HTML/PDF Documentation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Export HTML/PDF Documentation To generate HTML or PDF Documentation click on Specador \u00e2\u0080\u00a3 Generate Documentation\u00e2\u0080\u00a6 menu entry (requires a Specador license). This action will bring-up a dialog for specifying settings: 1. Common Settings Tab Specify the documentation title, author and copyright notice The output directory - target directory where the documentation will be placed Select the output format of your documentation (HTML | PDF) Option to include the API source code 2. Advanced Settings Tab Option to create a custom Table of Contents Select the comment formatter or apply comment filters Names Filter - exclude types names that match these filters Paths filter - exclude files from documentation 3. API Settings Tab Check which libraries and which kind of API to include in the documentation. 4. Diagrams Settings Tab Check which kind of diagrams you want to include in the documentation. Note It is recommended to perform a full build before exporting the documentation. Note For more informations check out the Specador User Guide . Preview HTML Documentation Supply Network Diagram Preview HTML Documentation Back to top",
    "section_path": [],
    "tokens": 210,
    "source": "scraped"
  },
  {
    "id": "76b60e7b-d583-4878-bd55-e0f465a24885",
    "title": "Toolbar Actions | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/toolbar-actions.html",
    "content": "Toolbar Actions | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Toolbar Actions Icon Description Rebuild Project - See Build Configurations . Lint - Run Verissimo or XVM Compliance Checking. Diagrams - See Diagrams . Content Filters - See Content Filters . Report an Issue! Themes Tooltips Back to top",
    "section_path": [],
    "tokens": 71,
    "source": "scraped"
  },
  {
    "id": "d2458c84-c412-423d-9a81-0e220c9346e8",
    "title": "CamelCase | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/camelcase.html",
    "content": "CamelCase | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide CamelCase No filter. Filter: fsc All elements that contain the character sequence fsc . Filter: f_s_c All elements that contain consecutive words starting with f, s, c . Words are character sequences delimited by underscores or by capital letters. Filter: FSC All elements that contain words starting with or containing characters in this order f, s, c . Quick Search in Views Simple Regex Back to top",
    "section_path": [],
    "tokens": 98,
    "source": "scraped"
  },
  {
    "id": "4ce3671c-a6d6-4d8f-bd80-02012f85be73",
    "title": "Macros and Quick Macros Views | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/macros-support/macros-and-quick-macros-views.html",
    "content": "Macros and Quick Macros Views | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Macros and Quick Macros Views The Macros View and Quick Macros View present all the macros in the project and allow you to quickly locate a macro definition in code. Macro Expansion Reminders (TODO Markers) Back to top",
    "section_path": [],
    "tokens": 73,
    "source": "scraped"
  },
  {
    "id": "444655e9-580c-4f08-935d-5f04b112cfff",
    "title": "SystemVerilog OVM or UVM Library Compilation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/ovm-or-uvm-library-compilation.html",
    "content": "SystemVerilog OVM or UVM Library Compilation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide SystemVerilog OVM or UVM Library Compilation Typically the OVM or UVM libraries are compiled using directives like: + incdir +/ path / to / xvm / src / path / to / xvm / src / xvm_pkg . sv Using the -ovm or -uvm directives You can use the -ovm or -uvm directives to compile the OVM or UVM libraries. They are shortcuts for the explicit directives above. For -uvm : If the $UVM_HOME system variable is specified, use that library. If the $DVT_UVM_HOME system variable is specified, use that library. If you launch DVT using one of the utility scripts that ship with DVT, $DVT_UVM_HOME is set by default to the most recent uvm library in $DVT_HOME/predefined_projects/libs (if you\u00e2\u0080\u0099re using DVT Eclipse or the DVT for VS Code pre-packed distribution) or $DVT_HOME/common/predefined_projects/libs (if you\u00e2\u0080\u0099re using the DVT extension from the VS Code Marketplace). If $DVT_UVM_HOME is not defined, falls back to $DVT_HOME/predefined_projects/libs/uvm-1.2 (if you\u00e2\u0080\u0099re using DVT Eclipse or the DVT for VS Code pre-packed distribution) or $DVT_HOME/common/predefined_projects/libs/uvm-1.2 (if you\u00e2\u0080\u0099re using the DVT extension from the VS Code Marketplace). The -ovm directive works in a similar way. Note At any time you can set a system variable using for example: + dvt_setenv + UVM_HOME =/ path / to / xvm e Language SPECMAN_PATH Xilinx Libraries Compilation Back to top",
    "section_path": [],
    "tokens": 255,
    "source": "scraped"
  },
  {
    "id": "eb0b1d1b-aecb-4418-a35b-6fd946b7a3f8",
    "title": "Indentation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-formatting/indentation.html",
    "content": "Indentation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Indentation Tabs and Spaces - Lines are indented using tabs or spaces depending on the preferences configured in Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Editors \u00e2\u0080\u00a3 Text Editors : If the Insert spaces for tabs (org.eclipse.ui.editors/spacesForTabs) option is enabled, indentation will use space characters, otherwise tabs will be used. The Displayed tab width (org.eclipse.ui.editors/tabWidth) option controls the size of a tab in spaces. Note When the Auto-detect indentation (ro.amiq.dvt/format.indent.auto_detect) preference is enabled, DVT will automatically detect the indentation style of any file opened in the editor. The detected values will be displayed in the Inspect View and will have a higher priority over the Insert spaces for tabs and Displayed tab width settings when the formatter is invoked. You can also trigger a new detection from the Inspect View. Optional \u00e2\u0080\u009cbegin\u00e2\u0080\u009d (ro.amiq.vlogdt/format.indent.begin) - Some language constructs, for example the conditional statement if or the loop statement for , require a begin - end block to control the execution of several statements. Such blocks are called optional \u00e2\u0080\u009cbegin\u00e2\u0080\u009d in order to distinguish them from other cases like fork begin \u00e2\u0080\u00a6 end endfork* or plain begin \u00e2\u0080\u00a6 end blocks used just for grouping several statements together for readability. This option affects the optional \u00e2\u0080\u009cbegin\u00e2\u0080\u009d blocks: Leave as is (1) On a new line (2)- begin is moved on a new line On the same line (3)- begin is moved on the same line with its construct On a new line and indent (4) - begin is moved on a new line and indented Initial code Leave as is (1) On a new line (2) On the same line (3) On a new line and indent (4) \u00e2\u0080\u009celse\u00e2\u0080\u009d (ro.amiq.vlogdt/format.indent.else) - This option affects else placement: Leave as is (1) On a new line (2) - else is moved on a new line On the same line (3) - if end precedes it else is moved on the same line with end Initial code Leave as is (1) On a new line (2) On the same line (3) Parameters (ro.amiq.vlogdt/format.indent.params) - This option affects module ports and parameters, function and task arguments, class parameters: Leave as is (1) One per line (open parenthesis on the same line) (2) - Each parameter/argument is placed on its own line and the open parentheses is placed on the same line with the parameter/argument receiver One per line (open parenthesis on the next line) (3) - Each parameter/argument is placed on its own line and the open parentheses is placed on the next line after the parameter/argument receiver More per line if less than (ro.amiq.vlogdt/format.indent.more_per_line_if_less_than_enable) - It controls whether to place parameters on the same line when their number does not exceed a specified value. This option is available only when the Parameters preference is set to One per line (open parenthesis on the same line) or One per line (open parenthesis on the next line) . More per line (4) - More parameters are placed on the same line Note When more parameters get to be placed on a single line and line wrapping is enabled, the parameters may be moved to separate lines as needed to fit within the specified line width. Initial code Leave as is (1) More per line (4) Initial code One per line (open parenthesis on the next line) (3) One per line (open parenthesis on the next line) (3) and More per line if less than set to \u00e2\u0080\u009c3\u00e2\u0080\u009d One per line (open parenthesis on the next line) (3) and More per line if less than set to \u00e2\u0080\u009c1\u00e2\u0080\u009d Preprocessing (ro.amiq.vlogdt/format.indent.preproc) - This option affects preprocessing directives: Leave as is (1) Indent (2) - Indent the preprocessing directives according to the enclosing scope.`ifdef blocks don\u00e2\u0080\u0099t increase the enclosed statements indentation. Indent and increase indentation level (3) - Indent the preprocessing directives according to the enclosing scope.`ifdef blocks increase indentation of its enclosed statements like any other scope language construct. Indent and increase indentation level except first (5) -  Indent the preprocessing directives according to the enclosing scope.`ifdef blocks increase the enclosed code indentation with the exception of the first level preprocessing block. Move at first column (4) - Move the preprocessing directives at line start.`ifdef blocks don\u00e2\u0080\u0099t increase the enclosed statements indentation. Initial code Leave as is (1) Indent (2) Indent and increase indentation level (3) Indent and increase indentation level - except first (5) Move at first column (4) Don\u00e2\u0080\u0099t indent single line comments at first column (ro.amiq.vlogdt/format.indent.preserve_sl_comment_column_zero) - This option affects single line comments that start at column zero. It is useful to disable the indentation for whole regions of code that are block commented , for example by using Ctrl + / . When enabled, single line comments that start at column zero are not indented. Before After Indent multi-line comments (ro.amiq.vlogdt/format.indent.multiline_comments) - This option affects multi-line comments ( /* \u00e2\u0080\u00a6 */ ). When enabled, multi-line comments are indented. Before After Do not indent multi-line content of assigns (ro.amiq.vlogdt/format.indent.skip_assigns) - When enabled, the assign lines are not indented such as to preserve an alignment. Before After Do not indent multi-line macro definitions (ro.amiq.vlogdt/format.indent.skip.ml.macro.definitions) - When enabled, multi-line macro definitions are not indented such as to preserve an alignment. This option is available only when the Preprocessing preference is set to Indent , Indent and increase indentation level , Indent and increase indentation level except first or Move at first column . Before After Add New Line After Begin And Before End (ro.amiq.vlogdt/format.indent.add_new_line_after_begin_and_before_end) - Controls whether to add a new line after begin and before end . Before After Add New Line After End (ro.amiq.vlogdt/format.indent.add_new_line_after_end) - Controls whether to add a new line after end . Before After Ignore lines starting with (ro.amiq.vlogdt/format.indent.ignore_lines) - Space separated list of line prefixes. A line starting with one of the prefixes is completely ignored, that is it is not indented, nor it contributes to indentation. Before After Don\u00e2\u0080\u0099t increase the indent Level On (ro.amiq.vlogdt/format.indent.no_indent_keywords) - By default all scope language constructs increase indentation. This option allows you to control which language constructs should increase indentation. Before After (\u00e2\u0080\u009cassert\u00e2\u0080\u009d keyword) Implicit semi macros (ro.amiq.vlogdt/format.indent.implicit_semi_macros) - The code formatting engine depends on detecting some delimiters for properly identifying the proper indentation scope, for example indentation should not increase after if(a) foo1(); , but it should after if(a) begin foo(); . Semicolon or end is such a delimiter and sometimes it may be encapsulated inside a macro. This option allows you to explicitly list such macros for proper code formatting. Before After Open scope macros (ro.amiq.vlogdt/format.indent.open_scope_macros) and Close scope macros (/ro.amiq.vlogdt/format.indent.close_scope_macros) - An open scope macro increases the indentation level of subsequent code to visualize scoping. A close scope macro decreases back the indentation level. Open/close scope macros are paired, for example: `TEST and `ENDTEST , similar with language keywords like function and endfunction . Before After Whitespace Vertical Alignment Back to top",
    "section_path": [],
    "tokens": 1169,
    "source": "scraped"
  },
  {
    "id": "c3486870-ed1f-4c6e-b38a-85f0152da6f0",
    "title": "Remove Signal from Sensitivity List | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/remove-signal-from-sensitivity-list.html",
    "content": "Remove Signal from Sensitivity List | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Remove Signal from Sensitivity List Unnecessary signals in an always block\u00e2\u0080\u0099s sensitivity list are flagged with warnings. Place the editor cursor on the warning\u00e2\u0080\u0099s line and press Ctrl + 1 , select Remove signal \u00e2\u0080\u00a6 from sensitivity list from the list of quick fix proposals and press Enter . Remove \u00e2\u0080\u0098local\u00e2\u0080\u0099 or \u00e2\u0080\u0098protected\u00e2\u0080\u0099 Qualifier Remove Signal Never Used Back to top",
    "section_path": [],
    "tokens": 96,
    "source": "scraped"
  },
  {
    "id": "86d64c0f-b220-466c-9de0-e4c4f24c98d3",
    "title": "I am using the Common Desktop Environment via Citrix and experiencing crashes. What can I do? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/i-am-using-the-common-desktop-environment-via-citrix-and-experiencing-crashes-what-can-i-do.html",
    "content": "I am using the Common Desktop Environment via Citrix and experiencing crashes. What can I do? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide I am using the Common Desktop Environment via Citrix and experiencing crashes. What can I do? This seems to be a problem related to running Eclipse under CDE via Citrix. Try changing CDE to another Desktop Environment, like the Java Desktop System (JDS). How can I configure Eclipse to use a local CVS repository? How do I change the background color of the Editor? Back to top",
    "section_path": [],
    "tokens": 113,
    "source": "scraped"
  },
  {
    "id": "7259a8eb-d533-46ca-99a2-c2c54d324388",
    "title": "User and Common Settings Location | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/settings-management/user-and-common-settings-location.html",
    "content": "User and Common Settings Location | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide User and Common Settings Location User level settings Location is set by default in $HOME/.dvt/settings when DVT is started using dvt.sh or dvt_cli.sh scripts on Linux. On Windows and MacOS the user location is not defined and the engine for settings management is disabled. To set or change the location of user level settings the $DVT_USER_SETTINGS variable must be set in the environment before DVT is started. Common level settings Location is not defined by default. To set or change the location for common level settings, the $DVT_COMMON_SETTINGS variable must be set in the environment before DVT is started. If multiple common levels are needed then the variable can contain multiple paths separated using the OS\u00e2\u0080\u0099s path separator. In this case the last directory will have the higher precedence. Unmanaged Settings Use Cases Back to top",
    "section_path": [],
    "tokens": 171,
    "source": "scraped"
  },
  {
    "id": "89d767e5-3380-4b14-bc74-933b73374dbd",
    "title": "Lines are suddenly changing indentation when I edit text or move the cursor through the editor. | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/lines-are-suddenly-changing-indentation-when-i-edit-text-or-move-the-cursor-through-the-editor.html",
    "content": "Lines are suddenly changing indentation when I edit text or move the cursor through the editor. | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Lines are suddenly changing indentation when I edit text or move the cursor through the editor. This might happen if you don\u00e2\u0080\u0099t use a monospaced font ( e.g: Courier ). To change the editor font: Go to Window \u00e2\u0080\u00a3 Preferences . From here, go to General \u00e2\u0080\u00a3 Appearance \u00e2\u0080\u00a3 Colors and Fonts . In the window on the right side choose Verilog Language \u00e2\u0080\u00a3 Editor \u00e2\u0080\u00a3 Verilog Language Text Font . Press Edit and check that the font you are using is monospaced . If it isn\u00e2\u0080\u0099t, choose one from the list ( ex: Courier, Monospace). Ok \u00e2\u0080\u00a3 Apply How to set multiple paths as sources of predefined projects ? How to change the directory where the build log file is saved ? Back to top",
    "section_path": [],
    "tokens": 172,
    "source": "scraped"
  },
  {
    "id": "ac5bc434-f9fa-4efb-aacc-d5ea999119ee",
    "title": "Preprocessed Files Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/preprocessed-files-support.html",
    "content": "Preprocessed Files Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Preprocessed Files Support This application note describes how to use DVT IDE with Verilog or SystemVerilog source files which contain preprocessing code written in a different language (either general-purpose like perl, jinja2, python, ruby, php or even proprietary). Typically, in such a flow, the source files get preprocessed and pure SystemVerilog code is generated. Subsequently, all tools in the toolchain (compiler/simulator/linter/\u00e2\u0080\u00a6) actually use the generated files. Note For simplicity, from here on, files containing preprocessing code are referred to as (p) files while generated files are referred to as (g) files . DVT IDE also compiles the pure SystemVerilog (g) files, however editing and navigation is done in the (p) files. Although DVT is agnostic of the preprocessing language, you need to provide it the mapping of (p) to (g) files. The available mapping mechanisms are described in detail below. In the pure Verilog/SystemVerilog code sections of (p) files, all of the advanced DVT navigation and editing features are available (errors reported as you type, auto-complete, quick fix proposals etc.). The preprocessing code sections of (p) files are marked with a distinct background color. Compilation problems detected in the corresponding section of the (g) file are back-annotated. Inside (g) files, code generated from a preprocessing code section is marked with a colored background. To avoid manually editing (g) files by mistake, they are by default treated as read-only. Navigation between (p) and (g) files The code which gets generated from a particular preprocessing section is shown in the Inspect View . Similarly, you can see the preprocessed code which generates a particular code section.\nClick on the filename link to navigate to the associated code section. You can also navigate from anywhere inside the (p) file to the corresponding code section of the (g) file and vice versa: Right Click in the editor -> Show -> PVerilog Preprocessed/Generated File . Integration of the preprocessing tool You can define a Run Configurations to invoke the preprocessing tool. You can instruct DVT to run this configuration every time you save the preprocessing file. Use this directive in the build configuration file: + dvt_pverilog_run_on_save + run_preprocess + dvt_pverilog_run_on_save + \"run configuration name\" Note that you need to enclose the run configuration name in quotes if it contains whitespace characters. The run configuration script or command can use the following environment variables: $DVT_PVERILOG_G_FILE  path to the generated (g) file\n$DVT_PVERILOG_P_FILE  path to the preprocessing (p) file Tip For convenience you can also use Custom Shortcut and Button for a Run Configuration to quickly apply preprocessing. Preferences Go to Window > Preferences then DVT > SystemVerilog > Editor . To configure background highlighting, adjust the PVlog Preprocessing code and PVlog Generated code preferences in the Code highlighting color group. You can also configure the Treat PVerilog generated files as read-only preference in the Editing group. Mapping preprocessing (p) to generated (g) files You must specify how (p) files are mapped to (g) files using one of the following directives in the build configuration file: Direct mapping +dvt_pverilog_map+<(p) file path>=<(g) file path> For example: +dvt_pverilog_map+$SOURCE/file.svp=$GENERATED/file.sv You may specify this directive multiple times for several file pairs. Map by extension +dvt_pverilog_ext_map+<(p) files extension>=<(g) files extension> For example: + dvt_pverilog_ext_map +. svp =. sv A (p) file is mapped to a (g) file if they have the same basename, mapped extensions, and if the (p) file resides in any of the Scan locations for (p) files . If multiple such files exist, there is no guarantee on the chosen pair. You may specify this directive multiple times for different extension pairs. Map by pattern tag +dvt_pverilog_pattern_tag_map+<(p) pattern1>=<(g) pattern2> For example: + dvt_pverilog_pattern_tag_map +< tag >. svp =< tag > _suffix . sv A (p) file is mapped to a (g) file if their names match the specified patterns and if the (p) file resides in any of the Scan locations for (p) files . A pattern is defined by an alternation of constant fragments and tags. You may specify this directive multiple times for different pattern pairs. Map by path prefix +dvt_pverilog_path_map+<path prefix of (p) files>=<path prefix of (g) files> For example: +dvt_pverilog_path_map+${PREPROCESS_SOURCE}=${PREPROCESS_TARGET} A (p) file is mapped to a (g) file if they have the same subpath relative to the (p) path prefix respectively to the (g) path prefix. You may specify this directive multiple times for different path prefix pairs. Map by comment +dvt_pverilog_comment_map+\u00e2\u0080\u009d<pattern>\u00e2\u0080\u009d For example: + dvt_pverilog_comment_map + \"Source file: (?<PFILE>\\S+)\" You must specify a regular expression pattern containing a named capturing group called PFILE. The mapping is inferred from the (g) file, assuming it contains a comment pointing to the corresponding (p) source file. Scan locations for (p) files By default, in order to find the suitable (p) files for +dvt_pverilog_ext_map and +dvt_pverilog_pattern_tag_map, all source files located inside the project are scanned, recursively. You can specify multiple scan locations using +dvt_pverilog_scan_location_add+<path>, for example when sources reside in multiple independent locations: # Specify scan roots in addition to the project location + dvt_pverilog_scan_location_add +/ additional / scan / location1 + dvt_pverilog_scan_location_add +/ additional / scan / location2 The project location is by default a scan location. To override this behavior, specify the +dvt_pverilog_scan_location_clear directive first: # Don't scan the default project location, only the specified scan roots + dvt_pverilog_scan_location_clear + dvt_pverilog_scan_location_add +/ scan / location1 + dvt_pverilog_scan_location_add +/ scan / location2 Note By default, DVT compiles the (p) files. You can use the +dvt_pverilog_mode+<mode> directive to specify which files should be compiled.\nFor example, to compile the generated files, use +dvt_pverilog_mode+generated . Incremental Compilation Output and logging On this page Navigation between (p) and (g) files Integration of the preprocessing tool Preferences Mapping preprocessing (p) to generated (g) files Scan locations for (p) files Back to top",
    "section_path": [],
    "tokens": 985,
    "source": "scraped"
  },
  {
    "id": "692ef741-6be9-4ab4-96cd-6ec8a506049f",
    "title": "FPGA Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/fpga-support.html",
    "content": "FPGA Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide FPGA Support Intel(Altera) Quartus Use the New DVT Project Wizard (menu File \u00e2\u0080\u00a3 New \u00e2\u0080\u00a3 DVT Project` ) to create a DVT project in the same location as an existing Quartus project. All source files and settings defined in the Quartus project configuration files will be automatically recognized. If you want to create a DVT project in a different location from your Quartus project location you must tune the .dvt/default.build file: + dvt_init_auto # Note that the compilation root must be specified after the +dvt_init_auto directive + dvt_compilation_root +/ quartus / project / location Note Quartus projects are automatically recognized by the DVT build auto-configuration engine. For more details, see Auto-config . When the auto-configuration algorithm detects a Quartus project layout, it scans the existing Quartus project configuration files and automatically generates an equivalent DVT build configuration file (for example default.build.auto.1). If there is no Quartus project layout, this functionality can be triggered using the +dvt_autoconfig_force_quartus directive. It allows the auto-configuration algorithm to scan *.qip files specified in default.build using +dvt_autoconfig_quartus_qip+<qip_file_path> directive (see example below): + dvt_init_auto + dvt_autoconfig_force_quartus + dvt_autoconfig_quartus_qip + file1 . qip + dvt_autoconfig_quartus_qip + file2 . qip + dvt_autoconfig_quartus_qip + file3 . qip Note The New DVT Project Wizard automatically adds both Verilog and VHDL natures. You can manually adjust this setting. Intel(Altera) Quartus Auto-config Specific Directives Directive Description +dvt_autoconfig_quartus_project_revision+<revision_name> Use <revision_name>. +dvt_autoconfig_quartus_script_location+<script_file_path> For debugging purposes. Use <script_file_path> to analyze Quartus project configuration files. +dvt_autoconfig_disable_quartus Ignore Quartus project configuration files and fallback to default auto-config. +dvt_autoconfig_quartus_qip+<qip_file_path> Analyze the specified Quartus project configuration file in addition to any automatically detected ones. May be specified multiple times. +dvt_autoconfig_force_quartus Force quartus auto-config using the *.qip files specified within the +dvt_init_auto section. +dvt_autoconfig_quartus_qip_search_path+<qip_dir_path> Specify root paths in which a deep search will be performed for *.qip files corresponding to *.ip files referenced in Quartus project configuration. Use +dvt_autoconfig_quartus_qip_search_path_add to specify additional directories to be scanned.Use +dvt_autoconfig_quartus_qip_search_path_clear to clear the list of scan roots. +dvt_quartus_debug Print debug information to the build console during Quartus auto-config. Intel(Altera) Quartus Libraries Compilation In order to compile Intel(Altera) Quartus libraries: specify the required libraries using the +dvt_init_altera directive specify the Quartus installation path, unless $QUARTUS_ROOTDIR system variable is set For example: + dvt_init_altera + ALTERA + ALTERA_MF + dvt_setenv + QUARTUS_ROOTDIR =/ apps / altera / 13.0 sp1 / quartus The available VHDL libraries are ALTERA_MF, ALTERA, ALTERA_LNSIM, LPM, MAX, MAXII, MAXV, STRATIX, STRATIXII, STRATIXIIGX, HARDCOPYII, HARDCOPYIII, HARDCOPYIV, CYCLONE, CYCLONEII, CYCLONEIII, CYCLONEIIILS, SGATE, STRATIXGX, ALTGXB, STRATIXGX_GXB, STRATIXIIGX_HSSI, ARRIAGX_HSSI, ARRIAII, ARRIAII_HSSI, ARRIAII_PCIE_HIP, ARRIAIIGZ, ARRIAIIGZ_HSSI, ARRIAIIGZ_PCIE_HIP, ARRIAGX, STRATIXIII, STRATIXIV, STRATIXIV_HSSI, STRATIXIV_PCIE_HIP, CYCLONEIV, CYCLONEIV_HSSI, CYCLONEIV_PCIE_HIP, CYCLONEIVE, HARDCOPYIV_HSSI, HARDCOPYIV_PCIE_HIP, STRATIXV, STRATIXV_HSSI, STRATIXV_PCIE_HIP, ARRIAVGZ, ARRIAVGZ_HSSI, ARRIAVGZ_PCIE_HIP, ARRIAV, CYCLONEV. The available Verilog libraries are ALTERA_MF_VER, ALTERA_VER, ALTERA_LNSIM_VER, LPM_VER, MAX_VER, MAXII_VER, MAXV_VER, STRATIX_VER, STRATIXII_VER, STRATIXIIGX_VER, ARRIAGX_VER, HARDCOPYII_VER, HARDCOPYIII_VER, HARDCOPYIV_VER, CYCLONE_VER, CYCLONEII_VER, CYCLONEIII_VER, CYCLONEIIILS_VER, SGATE_VER, STRATIXGX_VER, ALTGXB_VER, STRATIXGX_GXB_VER, STRATIXIIGX_HSSI_VER, ARRIAGX_HSSI_VER, ARRIAII_VER, ARRIAII_HSSI_VER, ARRIAII_PCIE_HIP_VER, ARRIAIIGZ_VER, ARRIAIIGZ_HSSI_VER, ARRIAIIGZ_PCIE_HIP_VER, STRATIXIII_VER, STRATIXIV_VER, STRATIXIV_HSSI_VER, STRATIXIV_PCIE_HIP_VER, STRATIXV_VER, STRATIXV_HSSI_VER, STRATIXV_PCIE_HIP_VER, ARRIAVGZ_VER, ARRIAVGZ_HSSI_VER, ARRIAVGZ_PCIE_HIP_VER, ARRIAV_VER, ARRIAV_HSSI_VER, ARRIAV_PCIE_HIP_VER, CYCLONEV_VER, CYCLONEV_HSSI_VER, CYCLONEV_PCIE_HIP_VER, CYCLONEIV_VER, CYCLONEIV_HSSI_VER, CYCLONEIV_PCIE_HIP_VER, CYCLONEIVE_VER, HARDCOPYIV_HSSI_VER, HARDCOPYIV_PCIE_HIP_VER. Xilinx ISE/Vivado Use the New DVT Project Wizard (menu File \u00e2\u0080\u00a3 New \u00e2\u0080\u00a3 DVT Project or DVT: Create a Project command in VS Code) to create a DVT project in the same location as an existing Xilinx ISE/Vivado project. All source files and settings defined in the ISE/Vivado project configuration files will be automatically recognized. If you want to create a DVT project in a different location from your ISE/Vivado project location you must tune the .dvt/default.build file: + dvt_init_auto # Note that the compilation root must be specified after the +dvt_init_auto directive + dvt_compilation_root +/ xilinx / project / location Note ISE/Vivado projects are automatically recognized by the DVT build auto-configuration engine. For more details, see Auto-config . When the auto-configuration algorithm detects an ISE/Vivado project layout, it scans the existing ISE/Vivado project configuration files and automatically generates an equivalent DVT build configuration file (for example default.build.auto.1). Note The New DVT Project Wizard automatically adds both Verilog and VHDL natures. You can manually adjust this setting. Note For an ISE project, the required Xilinx libraries are automatically detected and compiled using the +dvt_init_xilinx directive in the generated auto build file. For a Vivado project, the required Xilinx libraries are NOT automatically detected and have to be manually specified . To manually specify the libraries, use the +dvt_init_xilinx directive in the project build configuration file: + dvt_init_xilinx + UNISIM + UNIMACRO_VER + dvt_setenv + DVT_XILINX_HOME =/ apps / xilinx / Vivado / 2014.2 / # Note that the +dvt_init_xilinx must be specified before the +dvt_init_auto directive + dvt_init_auto Xilinx ISE/Vivado Auto-config Specific Directives Directive Description +dvt_autoconfig_vivado_sim_fileset+<fileset_name> Auto-config from Vivado project using the <fileset_name> fileset. +dvt_autoconfig_ise_xise+<xise_file_name> Auto-config from ISE project using the <xise_file_name> file. +dvt_autoconfig_disable_xilinx Disables auto-config from Xilinx ISE/Vivado project. Fallback to default auto-config. Xilinx Libraries Compilation In order to compile Xilinx libraries: specify the required libraries using the +dvt_init_xilinx directive specify the Xilinx installation path (ISE or Vivado), unless $DVT_XILINX_HOME system variable is set For example: + dvt_init_xilinx + UNISIM + UNIMACRO_VER + dvt_setenv + DVT_XILINX_HOME =/ apps / xilinx / Vivado / 2014.2 / The available libraries are UNISIM, UNIMACRO, UNIFAST, XILINXCORELIB, CPLD, SIMPRIM, SECUREIP_VER, UNISIMS_VER, UNIFAST_VER, UNIMACRO_VER, SIMPRIMS_VER, XILINXCORELIB_VER, UNI9000_VER, CPLD_VER, RETARGET, XPM. Precompilation support for Intel(Altera) Quartus and Xilinx Libraries By default, the Verilog/SystemVerilog Intel(Altera) Quartus and Xilinx Libraries are automatically precompiled in order to speed up the full build of the project. Note To disable the automatic precompilation of Intel(Altera) Quartus and Xilinx Libraries you can use the +dvt_disable_library_precompilation+ALTERA+XILINX directive. Encrypted VIP Support Generating External Tool Scripts from the DVT Build Configuration On this page Intel(Altera) Quartus Intel(Altera) Quartus Libraries Compilation Xilinx ISE/Vivado Xilinx Libraries Compilation Precompilation support for Intel(Altera) Quartus and Xilinx Libraries Back to top",
    "section_path": [],
    "tokens": 979,
    "source": "scraped"
  },
  {
    "id": "f3af2f70-65f6-4e2a-a228-0862ab400a05",
    "title": "How do I change the name of the xterm opened by a DVT Generic Run Configuration? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-do-i-change-the-name-of-the-xterm-opened-by-a-dvt-generic-run-configuration.html",
    "content": "How do I change the name of the xterm opened by a DVT Generic Run Configuration? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How do I change the name of the xterm opened by a DVT Generic Run Configuration? At the beginning of your script/command insert these commands: echo - ne \" \\033 ]0;YOUR_WINDOW_TITLE_HERE \\007 \" echo - ne \" \\033 ]1;YOUR_TASKBAR_TITLE_HERE \\007 \" How can I open a file in DVT from Questa? I get errors while installing or updating a plugin from an update site Back to top",
    "section_path": [],
    "tokens": 113,
    "source": "scraped"
  },
  {
    "id": "b38d1415-9a0f-4d6e-948f-b00c4e89d654",
    "title": "Move Selection to New File | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/move-selection-to-new-file.html",
    "content": "Move Selection to New File | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Move Selection to New File You can easily move a code fragment to a separate new file. Select a block of code and press Ctrl + 1 , select Move selection to new file\u00e2\u0080\u00a6 from the list of quick assist proposals and press Enter . Fill in the name of the new file. Note The initial selection is replaced by an `include to the new file Tip You can also Right - Click in the editor and go to Refactor > Move Selection to New File . Extract to Module Join Extern and Implementation Back to top",
    "section_path": [],
    "tokens": 132,
    "source": "scraped"
  },
  {
    "id": "2fb9915c-6724-483c-9629-db22c3ac40eb",
    "title": "Set the License | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/installation/license.html",
    "content": "Set the License | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Set the License In order to use DVT\u00e2\u0080\u0099s features, you must obtain and set the license. The license must be passed to the application through one of the following environment variables : DVT_LICENSE_FILE DVTLMD_LICENSE_FILE LM_LICENSE_FILE Environment variables will be read in the order above and the first non-empty value will be used, the others will be ignored. Any variable containing only the string \u00e2\u0080\u009cFLEXLM\u00e2\u0080\u009d (case-insensitive) will be ignored. Important Environment variables must be set before starting the application and the application must inherit the variables (e.g. when setting the variables in a terminal the application must be started from the same terminal). The license environment variable or setting value must contain one or more FlexLM license sources. Supported license sources are : File-system path of a license file: /path/to/dvt.lic License server address as port@host: 27001@licsrv Three-server redundancy triad with comma (,) separated license servers: 27001@licsrv1,27001@licsrv2,30001@licsrv3 File-system path of a directory containing one or more license files with .lic extension: /path/to/lic_dir Multiline string with the content of a license file surrounded by three curly brackets: {{{...}}} Multiple license sources, with the exception of multiline string, can be specified by separating them with: colon (:) on Linux/MacOS semicolon (;) on Windows ampersand (&) on any OS Note If the host part of port@host is an IPv6 address then make sure to always include the ampersand (&) separator before or after even if there are no more license sources. Note If the host part of port@host is resolved by DNS to both IPv6 and IPv4 addresses while the server is only IPv6 accessible then the application must be started with the -Djava.net.preferIPv6Addresses=true vmargs. The license features are checked-out when a DVT project is opened. A license indicator is available in the application\u00e2\u0080\u0099s bottom-right corner, selecting it will open the license log. Install DVT Using the Update Site Predefined Projects Back to top",
    "section_path": [],
    "tokens": 342,
    "source": "scraped"
  },
  {
    "id": "221e0f16-8939-462d-ac6d-6d7c9fbd70e5",
    "title": "Override Functions Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-assist/override-functions.html",
    "content": "Override Functions Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Override Functions Using Autocomplete Place your cursor inside a class and then press Ctrl + Space to trigger Content Assist . When doing so, the list of proposals includes methods that are available to override. The adjacent Proposal Tooltip includes information about the action that will be performed. Upon choosing the method, a corresponding method stub will be generated at the cursor\u00e2\u0080\u0099s location. The methods may be filtered by typing additional keywords such as function or task . Further filtering may be achieved by typing the method\u00e2\u0080\u0099s return type . Tip You can change the method signature by editing the Method Code Templates Module Automatic Instantiation Override Constraints Using Autocomplete Back to top",
    "section_path": [],
    "tokens": 147,
    "source": "scraped"
  },
  {
    "id": "790a3541-2751-4774-9501-38b01b0d17be",
    "title": "Bind Method Call Arguments by Name | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/bind-method-call-arguments-by-name.html",
    "content": "Bind Method Call Arguments by Name | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Bind Method Call Arguments by Name You can easily convert the argument bindings of a method call from positional to named. Place the cursor on a method call and press Ctrl + 1 , select Bind method call arguments by name from the list of quick assist proposals and press Enter . The argument bindings of the method call are converted to named. Tip You can also Right - Click in the editor and go to Refactor > Bind Method Call Arguments by Name . Quick Assist Proposals Bind Method Call Arguments by Position Back to top",
    "section_path": [],
    "tokens": 133,
    "source": "scraped"
  },
  {
    "id": "b49ece50-9f6d-4668-8d5c-015d50e613c5",
    "title": "Diagram Magnifier | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/diagrams/diagram-magnifier.html",
    "content": "Diagram Magnifier | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Diagram Magnifier The magnifier can be controlled using the following shortcuts: Press M to show / hide the magnifier. Hold down + Z to temporarily show / hide the magnifier. Use Shift + Scroll Up/Down to change the zoom of the magnifier. Use Ctrl + Scroll Up/Down to change the size of the magnifier. Use Ctrl + 0 to reset the zoom and size of the magnifier. Diagram Toolbar WaveDrom Timing Diagrams Back to top",
    "section_path": [],
    "tokens": 107,
    "source": "scraped"
  },
  {
    "id": "57506607-57db-4c29-bee5-43d4fb7c3d4d",
    "title": "Eclipse does not start, there is no Workspace, metadata or log file created | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/eclipse-does-not-start-there-is-no-workspace-metadata-or-log-file-created.html",
    "content": "Eclipse does not start, there is no Workspace, metadata or log file created | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Eclipse does not start, there is no Workspace, metadata or log file created A possible cause for this could be the lack of access rights to all, part or one of the files under $DVT_HOME . Solution : check the log in the ~/user\u00e2\u0080\u0099shome/.eclipse/org.eclipse.platform_/configuration/.log and see what is the file that can not be accessed make sure that you have rx rights on all files & folders under $DVT_HOME How do I change Internet Proxy Settings? Workspace permissions Back to top",
    "section_path": [],
    "tokens": 124,
    "source": "scraped"
  },
  {
    "id": "934280e9-d0cb-49ff-a7bd-e494c361b199",
    "title": "How do I change the tooltip colors? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-do-i-change-the-tooltip-colors.html",
    "content": "How do I change the tooltip colors? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How do I change the tooltip colors? If you want to change the tooltip colors you can use Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Appearance \u00e2\u0080\u00a3 Colors and Fonts \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Tooltips and for content assist Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Appearance \u00e2\u0080\u00a3 Colors and Fonts \u00e2\u0080\u00a3 Basic . Some widget colors are not displayed properly. What can I do? How do I change Internet Proxy Settings? Back to top",
    "section_path": [],
    "tokens": 105,
    "source": "scraped"
  },
  {
    "id": "a2a5c399-8564-445d-b602-076335362dee",
    "title": "Lazy Bring up Resources | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/lazy-bring-up-resources.html",
    "content": "Lazy Bring up Resources | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Lazy Bring up Resources You may experience Eclipse Platform slow-downs when project directories contain a large number of files and directories (10s of thousands), either directly or via linked resources, especially when working with slow network mounted filesystems. If you want to avoid such issues or simply avoid the clutter and work only with the files you\u00e2\u0080\u0099re interested in, you can use -include first_level flag when creating the project with the Command Line Interface. Alternatively, you can use the Lazy bring-up resources checkbox , which can be accessed by right-clicking on a project and navigating to Properties \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Resource Filters . In this case, DVT will bring only the files and directories (without their content) located directly under the project root.\nIf you want to further bring in the contents of a directory, simply double click it. The current configuration of the directories you\u00e2\u0080\u0099re working with in DVT is serialized at the User level settings in a <project>_config.yaml file, located under the lazy_resources directory. This file contains a section for every build configuration of the project.\nBy default, the newly brought directories\u00e2\u0080\u0099 content is serialized under the All category and will apply for all the build configurations of the project. To apply some filters only for a particular build configuration, you can manually move them to the correspondent section. After opening a directory, a notification will be displayed in the top right corner of the editor, letting you know that the filters were added in the configuration file. Click the right \u00e2\u0080\u009cOpen config file\u00e2\u0080\u009d button to open the configuration file. Click the left \u00e2\u0080\u009c+\u00e2\u0080\u009d button in the notification to inspect the list of directories whose content was brought in. You can close a directory that is no longer needed by right clicking and choosing Close Resources . Note The -include first_level flag will be automatically injected at the creation time if the project directory sits on top of a large filesystem tree (more than 50000 children) or if the project directory is located on a slow filesystem (listing all the files takes more than 10 seconds). Note Some configuration resources are always included: .dvt, .settings. Inactive Generates Code Highlight Memory Monitor Back to top",
    "section_path": [],
    "tokens": 400,
    "source": "scraped"
  },
  {
    "id": "3f77f8d1-f4cc-46fa-a188-8b163989d774",
    "title": "Editor Right Click Menu | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/editor-right-click-menu.html",
    "content": "Editor Right Click Menu | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Editor Right Click Menu Folding Collapse All Levels Fold to statement level. Show Active Preprocessing Show First Level Collapse all levels then expand one level. Expand All Levels Unfold code. Toggle Current Line Fold/unfold. Define Custom Region Create a folding marker for the selected region. Macros See Macro Expansion Source Jump to Pair Bracket Format Source See Code Formatting Toggle Comment Comment/uncomment selection or current line. OVM Field Editor See OVM Field Editor UVM Field Editor See UVM Field Editor Override Methods See Override Functions Emacs Code Factory See Code Factory Show Declaration See use Hyperlinks to Move Around in the Code Call Hierarchy See Call Hierarchy View Design Hierarchy See Design Hierarchy View Diagram See Diagrams Layers See Layers View Type Hierarchy See Type Hierarchy View UVM Sequence Tree See UVM Sequence Tree Verification Hierarchy See Verification Hierarchy View Quick Compile Order See Quick Compile Order View Quick Layers See Quick Layers View Quick Macros See Quick Macros View Quick Outline See Quick Outline View Quick Type Hierarchy See Quick Type Hierarchy View Quick Types See Quick Types View Constraints See Show Constraints Usages Readers Writers See Show Usages, Readers or Writers Including File Jumps to the location where the current file is `included. References See Show Usages, Readers or Writers Trace See Trace Connections Refactor Rename See Rename Refactoring Add Port See Add Port to Module from Selected Field or Add New Port to Module Editor Notification Hyperlinks On this page Folding Macros Source Code Factory Show References Trace Refactor Back to top",
    "section_path": [],
    "tokens": 289,
    "source": "scraped"
  },
  {
    "id": "8709ab02-2f6e-4d29-8135-330cdf986829",
    "title": "Add Signal to Sensitivity List | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/add-signal-to-sensitivity-list.html",
    "content": "Add Signal to Sensitivity List | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Add Signal to Sensitivity List When the sensitivity list of an always block is incomplete, warnings are triggered for all missing signals. Place the editor cursor on the warning\u00e2\u0080\u0099s line and press Ctrl + 1 , select Add signal \u00e2\u0080\u00a6 to sensitivity list from the list of quick fix proposals and press Enter . Add Port to Module Add Virtual Qualifier to Interface Type Back to top",
    "section_path": [],
    "tokens": 102,
    "source": "scraped"
  },
  {
    "id": "c3ccc1f5-85e7-4de0-865a-04bd036c728c",
    "title": "Use Cases | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/settings-management/use-cases.html",
    "content": "Use Cases | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Use Cases Using the same settings across all workspace and projects can be achieved by configuring the corresponding file and adding it in the user location (where $DVT_USER_SETTINGS points to). To share the settings with other users you must put the setting files in a common location and set $DVT_COMMON_SETTINGS to that location. A recommended work-flow for sharing any type of settings with other users is: Start DVT in a clean workspace Customize preferences Define run configurations, compile waivers, etc. on a reference project and move the corresponding files in the user location (available under DVT-Settings/user ) Close DVT and move the files from the user location to a common location where all users can point the $DVT_COMMON_SETTINGS system variable Memory Allocation Thresholds Create or modify the eclipse.ini file in the user settings location and add the new memory arguments. For example: -vmargs -Xmx2048m -Xss1m After adding the new memory thresholds every DVT instance will use them. If you want to change the memory only for a single invocation of DVT you can use the dvt.sh arguments (-heap_size corresponding to -Xmx and -stack_size corresponding to Xss) in the command used to invoke DVT. To share this configuration with other users you can put the eclipse.ini file in common location. Users will still be able to change the settings using an eclipse.ini in the user location. Workspace Preferences Workspace Preferences are automatically saved in the user location preferences.ini file. Reusing them across workspaces is automatically achieved. To share a set of preferences you must copy the preferences.ini file in the common location. Some workspace preferences that are usually shared between users are: Key Bindings - General \u00e2\u0080\u00a3 Keys Code Templates - DVT \u00e2\u0080\u00a3 Code Templates Task Tags - DVT \u00e2\u0080\u00a3 Task Tags Formatting - DVT \u00e2\u0080\u00a3 e Language / SystemVerilog / VHDL \u00e2\u0080\u00a3 Editor \u00e2\u0080\u00a3 Formatting Tab width and spaces - General \u00e2\u0080\u00a3 Editors \u00e2\u0080\u00a3 Text Editors Run Configurations Run Configurations can be used to launch 3rd party tools and can be reused across workspaces and projects by using the Common Tab \u00e2\u0080\u00a3 Save as \u00e2\u0080\u00a3 Shared file and save it in DVT-Settings/user project directory. To share them with other users move them in the common location. Compile Waivers You can create Compile Waivers for libraries or IPs using a reference project and copy the <project>/.dvt/waivers.xml file in the user location to make it available for all projects. To share them with other users move them in the common location. Content Filters You can create Content Filters for libraries or IPs using a reference project and copy the <project>/.dvt/content_filters.xml file in the user location to make it available for all projects. To share them with other users move them in the common location. External Builders You can create External Builders to invoke any 3rd party script or tool and back-annotate the output to the source code using the wizard . The external builders will be saved in <project>/.dvt/external_builders.xml and you can reuse them by copying the file in the user location. Export HTML Documentation To use the same settings for Export HTML/PDF Documentation regardless of the project where you create the documentation you must generate a documentation using the desired settings. They will be saved in the <project>/.dvt/dvt_export_html.xml file. You can manually edit the file to remove specific settings like the  tag. The file can be moved afterwards in the user or common locations. Custom Pragmas You can create Custom Pragmas to emphasize generated regions of code. They will be saved in <project>/.dvt/custom_pragmas.xml and you can reuse them by copying the file in the user location. To share them with other users move them in the common location. User and Common Settings Location Examples On this page Memory Allocation Thresholds Workspace Preferences Run Configurations Compile Waivers Content Filters External Builders Export HTML Documentation Custom Pragmas Back to top",
    "section_path": [],
    "tokens": 669,
    "source": "scraped"
  },
  {
    "id": "8677725e-533c-4238-a3f9-0538b65c796d",
    "title": "Syntax | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/command-line-interface/syntax.html",
    "content": "Syntax | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Syntax Usage dvt_cli.sh [-h[elp]] [-s[ilent]][-noexit] [-nostart] [-timeout <sec>] [-net_timeout <sec>] [-workspace <dir>] [-eclipsespace <dir>] [-heap_size <size>] [-stack_size <size>] [-options <opt>] [-import_workspace_settings <dir>] [-force_import_workspace_settings <dir>] [-eclipse_ini <file>] [-eclipse_args <args> --] [-vscode] [-ls_id <id>] <command> -h[elp] Show this help. -s[ilent] Suppress script output (WARNING, INFO), allow only ERRORS and DVT CLI command results. -noexit If the script starts a new DVT do not exit until DVT is closed. (Not supported on Windows) -nostart Do not start a new DVT, if no DVT is found wait -timeout <seconds> before ending. -timeout <sec> Maximum number of seconds to wait for a DVT session to start. Default is 100. -net_timeout <sec> Maximum number of seconds to wait for a response from DVT after a session has started. Default is 10. -workspace <dir> Path to the Eclipse workspace. If not specified $DVT_WORKSPACE_PATH will be used.\nIf $DVT_WORKSPACE_PATH is not set it will use the last workspace where a DVT was started. -eclipsespace Path to a custom Eclipse storage directory to be used instead of ~/.eclipse. (Not supported on Windows) -heap_size <size> Set the Java heap size (syntax is <N>[g|G|m|M|k|K]). Default is 3072m. -stack_size <size> Set the Java thread stack size (syntax is <N>[g|G|m|M|k|K]). Default is 4m. -options <opt> Comma separated list of options (only for Linux): disable_browser - do not use SWT browser component and skip auto - config disable_swt_auto_config - do not auto - config SWT GTK version and SWT browser engine disable_chromium - do not use bundled Chromium browser engine disable_xulrunner - do not use bundled XULRunner browser engine disable_webkit - do not use OS 's WebKit browser engine disable_cairo - do not use Cairo advanced graphics library disable_force_gtk2 - do not force Eclipse to use GTK2 disable_gtk_theme - do not use custom GTK2 themes generated through DVT disable_force_classic_theme - do not force Eclipse to use the classic theme disable_gtk_scroll_overlay - use traditional scrollbars instead of scrollbars overlayed on top of content disable_shutdown_timeout - do not force stop JVM when shutdown exceeds 5 seconds dump_allocated_swt_resources - dump SWT allocated resources when 'No more handles' error is thrown disable_chromium_mtml - do not use Chromium multithreaded message loop disable_chromium_launcher_library - do not use Chromium launcher library disable_chromium_early_init - do not use early init for Chromium browser engine disable_chromium_web_security - do not enforce same - origin policy for Chromium browser engine dump_allocated_swt_resources - dump SWT allocated resources when 'No more handles' error is thrown -import_workspace_settings <dir> Path to the workspace from where settings will be imported. (Not supported on Windows) -force_import_workspace_settings <dir> Same as -import_workspace_settings, but it will overwrite target workspace settings. (Not supported on Windows) -eclipse_ini <file> Path to an eclipse.ini file to be used instead of the default eclipse.ini. See: http://wiki.eclipse.org/Eclipse.ini . -eclipse_args <args> A list of eclipse.ini arguments to be passed directly to the Eclipse binary. To indicate the end of list use \u00e2\u0080\u0093 argument.\nSee: http://wiki.eclipse.org/Eclipse.ini . -vscode Launches DVT IDE for VS Code by invoking  dvt_code.sh using the same arguments. -ls_id <id> Specifies the id of the Language Server to which the command should be sent. Only works when -vscode is provided. <command> The CLI command and arguments to be sent to DVT. dvt_cli.sh Examples Back to top",
    "section_path": [],
    "tokens": 557,
    "source": "scraped"
  },
  {
    "id": "01f59be7-dc04-4a35-9ae5-395ed8651ef4",
    "title": "Override Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/override-functions/override-functions-using-autocomplete.html",
    "content": "Override Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Override Using Autocomplete Place your cursor inside a class and then press Ctrl + Space to trigger Content Assist . When doing so, the list of proposals includes methods that are available to override. The adjacent Proposal Tooltip includes information about the action that will be performed. Upon choosing the method, a corresponding method stub will be generated at the cursor\u00e2\u0080\u0099s location. The methods may be filtered by typing additional keywords such as function or task . Further filtering may be achieved by typing the method\u00e2\u0080\u0099s return type . Tip You can change the method signature by editing the Method Code Templates See also Content Assist (Autocomplete) . Override Using the Dialog Override Using the Type Hierarchy View Back to top",
    "section_path": [],
    "tokens": 154,
    "source": "scraped"
  },
  {
    "id": "b5c6d6ec-3be9-48d1-be82-cde71fe2deb2",
    "title": "Semantic Checks | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/compile-checks/semantic-checks.html",
    "content": "Semantic Checks | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Semantic Checks ID Message Assignment patterns ASSIGNMENT_PATTERN_VALUES Expecting # value(s), found # INCOMPLETE_ASSIGNMENT_PATTERN Assignment pattern for struct # is missing association(s) to member(s) # ASSIGNMENT_PATTERN_MULTIPLE_ASSOCIATIONS Assignment pattern for struct # has multiple associations for member(s) # Associated types (fields, variables, functions, etc.) ILLEGAL_TYPE_REFERENCE Unexpected type # of # (type is #) ILLEGAL_TYPE_REFERENCE Unexpected type # of # (use virtual [interface] in front of #) ILLEGAL_NET_DATATYPE Illegal net data type # ILLEGAL_NET_DATATYPE Illegal net 2-state data type # ILLEGAL_BIT_VECTOR User-defined nettype # has unpacked data type # ILLEGAL_CUNIT_REFERENCE Reference to compilation unit identifier # not allowed in package NON_EXISTING_TYPE Non existing type # USAGE_BEFORE_DECLARATION Element # is used before being declared at line # in # Blocks DUPLICATE_CLOCKING Duplicate clocking block #, already declared at line # file # DUPLICATE_NAMED_BLOCK Duplicate named block #, already declared at line # file # UNRESTRICTED_LOOP_GENERATE_BLOCK Loop block # does not end UNINITIALIZED_LOOP_BLOCK Cannot initialize loop block # UNRESOLVED_LOOP_BLOCK_CONDITION Cannot resolve loop block # condition UNRESOLVED_LOOP_BLOCK_STEP Cannot resolve loop block # step assignment UNRESOLVED_BLOCK_CONDITION Cannot resolve block # condition: # MISSING_BLOCK_CONDITION No condition found for block # Checkers DUPLICATE_CHECKER Duplicate checker #, already declared at line # file # UNDECLARED_CHECKER Checker # is not declared ILLEGAL_CHECKER_INSTANCE Instance # of checker # not allowed in procedural code of a checker ILLEGAL_CHECKER_INSTANCE Instance # of checker # not allowed in fork-join, fork-join_any or fork-join_none Classes CIRCULAR_INHERITANCE Class # extends itself DUPLICATE_CLASS Duplicate class #, already declared at line # file # DUPLICATE_CONSTRUCTOR Duplicate constructor # already declared at line # file # EXTEND_CLASS Extending non existing class # EXTERN_CONSTRAINT_UNDECLARED Outer class constraint # was not declared extern inside class # EXTERN_FUNCTION_UNDECLARED Outer class function # was not declared extern inside class # EXTERN_TASK_UNDECLARED Outer class task # was not declared extern inside class # EXTEND_INTERFACE_CLASS Extending interface class # by non-interface class not allowed IMPLEMENT_CLASS Implementing non-interface class # by class not allowed IMPLEMENT_INTERFACE_CLASS Implementing non existing interface class # ILLEGAL_SUPER_USE Class # does not have a super class Configurations INVALID_LIBLIST Liblist is empty for # UNDECLARED_CELL Cell # is not declared UNDECLARED_CONFIGURATION Configuration # is not declared UNDECLARED_DESIGN Top design # is not declared UNDECLARED_LIBRARY Library # is not declared Constraints DUPLICATE_CONSTRAINT Duplicate constraint #, already declared at line # file # DUPLICATE_CONSTRAINT_IMPL Duplicate constraint implementation for #, already declared at line # file # EMPTY_IMPLICIT_CONSTRAINT_IMPLEMENTATION Implicit external constraint # is not implemented INVALID_DISABLE_SOFT_CONSTRAINT_PARAMETER The disable soft parameter # should be a variable UNIMPLEMENTED_EXPLICIT_EXTERNAL_CONSTRAINT Explicit external constraint # is not implemented Covergroups DUPLICATE_COVER_CROSS Duplicate cover cross #, already declared at line # file # DUPLICATE_COVERGROUP Duplicate covergroup #, already declared at line # file # DUPLICATE_COVERPOINT Duplicate coverpoint #, already declared at line # file # ILLEGAL_COVERPOINT_EXPRESSION Coverpoint expression must be of an integral data type WITH_COVERPOINT_BINS_EXPRESSION Coverpoint bins with expression should explicitly contain item Design Elaboration UNELABORATED_PACKAGE Package #.# is not elaborated UNELABORATED_MODULE/INTERFACE/PROGRAM/CHECKER Module/Interface/Program/Checker #.# is not elaborated UNSPECIFIED_TOP Please specify a -top module/entity/configuration in the project build file INVALID_TOP_CONFIGURATION Configuration # has no valid tops INVALID_TOP Top # cannot be instantiated CYCLICAL_ORDER Cycle discovered when elaborating parameters DUPLICATE_TOP_NAME Another top with the same name # has been elaborated RECURRENCE_DETECTED Recurrence detected for instance type # NON_CHECKER_INSTANCE_INSIDE_PROGRAM Module/Interface/Program/UDP instance # not allowed inside program BLACK_BOXED_INSTANCE Instance # is black boxed BLACK_BOXED_GENERATE_BLOCK Generate block # is black boxed SKIPPED_INSTANCE Instance # is skipped SKIPPED_GENERATE_BLOCK Generate block # is skipped Events DUPLICATE_EVENT Duplicate event #, already declared at line # file # ILLEGAL_EVENT The following events must be of a singular data type:# Enumerations DUPLICATE_ENUM_LITERAL Duplicate enumeration literal #, already declared at line # file # IMPLICIT_ENUM_CAST Auto-cast from enum type # to enum type # Extern methods EXTERN_METHOD_SIGNATURE Return data type # for extern method # does not match prototype EXTERN_METHOD_SIGNATURE Scope resolution operator shall be used to indicate the internal return type # for extern method # EXTERN_METHOD_SIGNATURE Number of arguments # for extern method # does not match prototype EXTERN_METHOD_SIGNATURE Name of argument # for extern method # does not match prototype EXTERN_METHOD_SIGNATURE Type of argument # for extern method # does not match prototype EXTERN_METHOD_SIGNATURE Direction of argument # for extern method # does not match prototype EXTERN_METHOD_SIGNATURE Default value of argument # for extern method # does not match prototype; the prototype declaration is used Instances DUPLICATE_INSTANCE Duplicate instance #, already declared at line # file # DUPLICATE_BOUND_INSTANCE Duplicate bound instance # added from both instance # and instance # DUPLICATE_BOUND_INSTANCE Duplicate bound instance # added from instance # DUPLICATE_BOUND_INSTANCE Name collision in target scope of bound instance # with element declared at line # file # IMPLICIT_PORT_CONNECTION Cannot infer implicit connection for port(s) # INVALID_BINDS Failed to resolve all the bind directives in # tries INVALID_BIND_TARGET_SCOPE Bind target scope # and module # of bind target instance # must match INVALID_BIND_UNDERNEATH_BIND_INSTANCE Cannot bind instance # underneath bind instance # MISSING_PORT_CONNECTION Missing port connection to # port(s) # MULTIPLE_PORT_CONNECTIONS Multiple connections to port # NOT_IN_LIST_OF_PORTS # not in the list of # ports\u00e2\u0080\u009d NOF_PORT_CONNECTIONS Expected # port connections, found # NON_EXISTING_PORT Non existing port # of module # NOT_A_CHECKER_INSTANCE Instance # is not a checker instance UNDECLARED_MODULE Module # is not declared UNDECLARED_MODULE Module # is not declared for instance # UNDECLARED_BIND_TARGET Bind target # is not declared UNKNOWN_ARRAY_OF_INSTANCES_RANGE Could not determine range of array of instances # UNELABORATED_BIND_TARGET Hierarchical name # is not elaborated UNRESOLVED_BIND_TARGET_INSTANCE Module # of bind target instance # is not declared UDP_PORT_CONNECTION Named port connection to # not allowed for UDP instance # UDP_PORT_CONNECTION Dot star connection not allowed for UDP instance # Illegal class members access (local, protected, static) ILLEGAL_HIERARCHICAL_ACCESS Illegal hierarchical reference detected on #.# (illegal hierarchical name containing type name #) ILLEGAL_NON_STATIC_ACCESS Non-static member # of class # cannot be accessed from static function/task ILLEGAL_NON_STATIC_ACCESS Non-static member # of class # cannot be accessed outside its class scope. ILLEGAL_NON_STATIC_ACCESS Non-static member # of class # cannot be accessed via class scope resolution operator :: ILLEGAL_STATIC_ACCESS Element # cannot be accessed statically from design # ILLEGAL_STATIC_ACCESS Enum name # cannot be accessed statically from enum type # ILLEGAL_STATIC_ACCESS Element # cannot be accessed statically from struct type # ILLEGAL_STATIC_ACCESS Element # cannot be accessed statically from union type # ILLEGAL_PRIVATE_ACCESS Private member # of class # is not visible in this scope ILLEGAL_PROTECTED_ACCESS Protected member # of class # is not visible in this scope Implicit declarations (port mapping, assigns) ILLEGAL_IMPLICIT Illegal implicit declaration of # when `default_nettype set to none Interfaces DUPLICATE_INTERFACE Duplicate interface #, already declared at line # file # Hierarchical identifiers UNDECLARED_IDENTIFIER Identifier # is not declared UNDECLARED_IDENTIFIER Identifier # is not a member of # (type # is undeclared) UNDECLARED_IDENTIFIER Identifier # is not a member of # UNEXPECTED_IDENTIFIER Expecting function # but actual target is not a function Method calls NON_EXISTING_METHOD_ARGUMENT Non existing argument # of function/task # METHOD_CALL_ARGUMENTS Expecting maximum # argument(s) when calling #, found # METHOD_CALL_ARGUMENTS Method call # is missing argument value to # # MULTIPLE_ARGUMENT_VALUES Multiple values for argument # MISSING_ARG_FORMAT_SPEC Missing argument for # when calling # INVALID_FORMAT_SPEC Invalid %# when calling # EXTRA_ARG_FORMAT_SPEC Extra argument # when calling # ILLEGAL_FORMAT_SPEC Illegal format specifier %# for argument # when calling ILLEGAL_WITH_CLAUSE # does not support a with clause ILLEGAL_WITH_CLAUSE Array method # does not support a with clause ILLEGAL_WITH_CLAUSE_EXPRESSION Illegal type # of with clause expression for method # MISSING_WITH_CLAUSE Method # requires a with clause UNSUPPORTED_METHOD Method # is undefined for associative arrays UNSUPPORTED_METHOD Method # is undefined for associative arrays with wildcard index type UNSUPPORTED_METHOD Method # is undefined for arrays of non-numeric type (use # clause) UNDECLARED_SYSTEM_METHOD System task or function # is not declared Methods, DPI DUPLICATE_ARGUMENT Duplicate argument #, already declared at line # file # DUPLICATE_FUNCTION Duplicate function #, already declared at line # file # DUPLICATE_FUNCTION_IMPL Duplicate function implementation for #, already implemented at line # file # DUPLICATE_NAME Duplicate name #, already built-in method DUPLICATE_METHOD_IMPLEMENTATION Duplicate method implementation for #, already defined at line # file # DUPLICATE_PRODUCTION Duplicate production #, already declared at line # in # DUPLICATE_TASK Duplicate task # already declared at line # file # DUPLICATE_TASK_IMPL Duplicate task implementation for #, already implemented at line # file # DUPLICATE_VARIABLE Duplicate variable # already declared at line # file # EXPORT_DPI_FUNCTION_IMPL Export DPI function # was not implemented EXPORT_DPI_TASK_IMPL Export DPI task # was not implemented DPI_FUNCTION_RETURN_TYPE Return type # of DPI function # not allowed ILLEGAL_OVERRIDE Illegal override of built-in method # ILLEGAL_PURE_VIRTUAL Pure virtual method prototype # cannot be declared in non-virtual class INVALID_STATIC_OVERRIDE Virtual method # cannot be overridden by static method NOT_IMPLEMENTED_PURE_VIRTUAL Sub-class # does not implement pure virtual method(s) from super-classes: # OVERRIDE_VIRTUAL_METHOD Function # overrides task # OVERRIDE_VIRTUAL_METHOD Task # overrides # OVERRIDE_VIRTUAL_METHOD Return data type # for method # does not match # of overridden # OVERRIDE_VIRTUAL_METHOD Number of arguments # for method # does not match # of overridden # OVERRIDE_VIRTUAL_METHOD Type # of argument # for method # does not match # of overridden # OVERRIDE_VIRTUAL_METHOD Direction # of argument # for method # does not match # of overridden # OVERRIDE_VIRTUAL_METHOD Missing default value of argument # for method # (overridden # provides a default value) OVERRIDE_VIRTUAL_METHOD Unexpected default value of argument # for method # (overridden # does not provide a default value) OVERRIDE_VIRTUAL_METHOD Implementation of interface class method # must have virtual qualifier VIRTUAL_CLASS_INSTANTIATION Object # cannot be instantiated because # is a virtual class VIRTUAL_CLASS_INSTANTIATION Illegal call of virtual class typed constructor #::new UNDECLARED_ARGUMENT Expected argument, found local variable # ILLEGAL_DEFAULT_VALUE Illegal default value # for # formal port # UNUSED_RETURN_VALUE The return value of function # is not used ILLEGAL_EXPRESSION Void function/Task # cannot be used as an expression Modports and Clocking Blocks DIRECTION_MISMATCH Port # was specified as # in # Modules DUPLICATE_MODULE Duplicate module #, already declared at line # file # Nets, Variables, Fields, Properties DUPLICATE_FIELD Duplicate field #, already declared at line # file # DUPLICATE_PORT Duplicate port #, already declared at line # in # STATIC_INITIALIZATION Explicit static or automatic is required when implicit static variable is initialized UNDECLARED_PORT Port # direction declaration is missing Packages DUPLICATE_PACKAGE Duplicate package #, already declared at line # file # IMPORT_IN_CLASS Import statement not allowed within class scope IMPORT_PACKAGE Package # importing itself not allowed NON_EXISTING_PACKAGE Non existing package # MISSING_IMPORT_ELEMENT Explicit export element ignored (element not imported) MISSING_IMPORT_PACKAGE Wild-card export package ignored (package not imported) MULTIPLE_PACKAGES Name # exists in multiple imported packages (#, #, and possibly others) Parameters DUPLICATE_PARAMETER Duplicate parameter #, already declared at line # file # ILLEGAL_PARAMETER_OVERRIDE Expecting a type when overriding parameter #, found value # MISSING_DEFAULT_VALUE Parameter # must have a default value NOF_PARAM_OVERRIDES Expected # parameter overrides, found # MISSING_PARAMETER_OVERRIDE Expected override or default value for parameter # NON_EXISTING_PARAMETER Non existing parameter # of type # UNRESOLVED_FORMAL_PARAMETER Cannot determine formal parameter # of # NON_EXISTING_PARAMETER Non existing parameter # of type # UNRESOLVED_PARAMETER_VALUE Cannot determine # value of parameter # from expression: # UNRESOLVED_ENUM_NAME_VALUE Cannot determine value of enum name # from expression: # UNCONNECTED_PARAMETER Parameter # of module/interface # is not connected NON_OVERRIDABLE_PARAMETER Localparam # cannot be overridden NON_OVERRIDABLE_PARAMETER Parameter # cannot be overridden (is outside design parameter port list) Preprocessing CYCLIC_INCLUDE Cyclic include detected CYCLIC_MACRO Cyclic define detected FAILED_TO_OPEN_INCLUDE_FILE Cannot open `include file # NON_EXISTING_INCLUDE_FILE No such file # MISMATCHED_ENDIF Expecting `endif label # found # REDEFINED_MACRO Redefinition of macro name # UNDEFINED_MACRO Undefined macro name: # WRONG_NUMBER_OF_MACRO_ARGUMENTS Number of macro instance parameters # not equal to macro define parameters # Primitives DUPLICATE_PRIMITIVE Duplicate primitive #, already declared at line # file # Programs DUPLICATE_PROGRAM Duplicate program #, already declared at line # file # Type Checking ILLEGAL_ASSIGNMENT Illegal assignment to type # from type # (cannot assign a(n) packed / unpacked type to a(n) unpacked / packed type) ILLEGAL_ASSIGNMENT Illegal assignment to type # from type # (arrays have incompatible dimensions / packed dimensions / unpacked dimensions / element types / element type signing / 2-state/4-state element types) ILLEGAL_ASSIGNMENT Illegal assignment to type # from type # (class types are not assignment compatible) ILLEGAL_ASSIGNMENT Illegal assignment of # to parameter / argument / port # of type # ILLEGAL_ASSIGNMENT Illegal assignment of # to parameter / [ref] port / [ref] argument # of type # (cannot assign a(n) packed / unpacked type to a(n) unpacked / packed type) ILLEGAL_ASSIGNMENT Illegal assignment of # \u00e2\u0080\u0098parameter / [ref] port / [ref] argument # of type # (arrays have incompatible dimensions / packed dimensions / unpacked dimensions / element types / element type signing / 2-state/4-state element types) ILLEGAL_ASSIGNMENT Illegal assignment of # [ref] port / argument # of type # (class types are not assignment compatible) ILLEGAL_ASSIGNMENT Illegal assignment of expression # to ref port / argument # ILLEGAL_ASSIGNMENT Illegal assignment of constant # to ref port / argument # ILLEGAL_ASSIGNMENT Illegal assignment of constant # to non-constant ref argument # ILLEGAL_ASSIGNMENT Illegal assignment of #-bit type to ref port / argument # of #-bit type ILLEGAL_ASSIGNMENT Illegal assignment of dynamic array # to object # ILLEGAL_ASSIGNMENT Illegal use of assignment pattern to type # ILLEGAL_ASSIGNMENT Illegal use of ordered assignment pattern to associative array ILLEGAL_ASSIGNMENT Illegal use of concatenation to associative array ILLEGAL_ASSIGNMENT Illegal assignment of concatenation member # of type # to array element of type # ILLEGAL_NET_ASSIGNMENT Cannot use net # as left hand side in procedural assignment ILLEGAL_NON_BLOCKING_ASSIGNMENT Cannot use automatic variable # as left hand side in non-blocking assignment ILLEGAL_CAST_OPERATION Cannot cast # of type # to # ILLEGAL_VOID_CAST Void cast of task # not allowed ILLEGAL_CONSTANT_ASSIGN Constant # cannot be assigned ILLEGAL_CONSTANT_ASSIGN Constant ref # cannot be assigned ILLEGAL_FOREACH_LOOP Number of dimensions specified in FOREACH_LOOP is bigger than # dimensions ILLEGAL_OPERAND Unexpected # as first operand ILLEGAL_PARAMETER_OVERRIDE Expecting type name for parameter #.# but found variable name # ILLEGAL_REPEAT_LOOP Reference to the entire array # is not permitted in this context ILLEGAL_REPEAT_LOOP Using string # without index is not supported in the given context ILLEGAL_REPEAT_LOOP Reference to the entire unpacked struct / union # is not permitted in this context ILLEGAL_TYPE_REFERENCE # cannot be resolved to a variable ILLEGAL_VARIABLE_REFERENCE # cannot be resolved to a type ILLEGAL_NON_INTERFACE_VIRTUAL_FIELD \u00e2\u0080\u0098virtual\u00e2\u0080\u0099 keyword not allowed with non-interface type # UNDEFINED_OPERATOR Operator # is undefined for argument type # UNDEFINED_OPERATOR Operator # is undefined for argument types #, # UNDEFINED_OPERATOR Operator # is undefined for argument types #, # (arrays have incompatible dimensions / packed dimensions / unpacked dimensions / element types / element type signing / 2-state/4-state element types) UNDEFINED_OPERATOR Concatenation operator is undefined for argument # of type # UNDEFINED_OPERATOR The type of target # is # while the type of the source is # UNDEFINED_OPERATOR Set member # of type # is incompatible with left-hand side expression type # UNDEFINED_OPERATOR Set member of type # is incompatible with left-hand side expression type # ILLEGAL_CONSTANT_PRIMARY Expecting a constant primary, but found # Typedefs DUPLICATE_TYPEDEF Duplicate typedef #, already declared at line # file # MISSING_TYPE_IMPLEMENTATION # type is not implemented Jump statements ILLEGAL_CONTINUE_OUTSIDE_LOOP Continue statement not allowed outside loop ILLEGAL_BREAK_OUTSIDE_LOOP Break statement not allowed outside loop ILLEGAL_EMPTY_RETURN Empty return not allowed in non-void function, expecting # ILLEGAL_RETURN_VALUE_TYPE Illegal return value of type # for function of type # ILLEGAL_RETURN_VALUE_TYPE Illegal return value of type # for function of type # (cannot assign a(n) packed / unpacked type to a(n) unpacked / packed type) ILLEGAL_RETURN_VALUE_TYPE Illegal return value of type # for function of type # (arrays have incompatible dimensions / packed dimensions / unpacked dimensions / element types / element type signing / 2-state/4-state element types) ILLEGAL_RETURN_VALUE_TYPE Illegal return value of type # for function of type # (class types are not assignment compatible) ILLEGAL_VALUE_RETURN Value return not allowed in task ILLEGAL_VALUE_RETURN Value return not allowed in void function ILLEGAL_VALUE_RETURN Value return not allowed in constructor Miscellaneous SELECT_NOT_ALLOWED Select expression for variable # not allowed Compile Waivers Synthesis Checks Back to top",
    "section_path": [],
    "tokens": 2690,
    "source": "scraped"
  },
  {
    "id": "a972ef65-dc98-446a-a382-c2f25911874b",
    "title": "Trace Connections | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/trace-connections/index.html",
    "content": "Trace Connections | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Trace Connections Trace Connections from Design Hierarchy Trace Connections from Editor Trace Connections View Trace Path Search Global API Trace Connections from Design Hierarchy Back to top",
    "section_path": [],
    "tokens": 59,
    "source": "scraped"
  },
  {
    "id": "ca526bc3-7ca6-4769-bfa9-0840e2477672",
    "title": "Line Wrapping | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-formatting/line-wrapping.html",
    "content": "Line Wrapping | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Line Wrapping When enabled, this option splits the lines of code that exceed the specified number of characters. Line Width (ro.amiq.vlogdt/format.line_wrap.threshold) - A line is wrapped when it exceeds this value. Before After Wrap single line comments and move above when needed (ro.amiq.vlogdt/format.line_wrap.sl_comments) - When enabled, if a single line comment exceeds the line width, it will be moved above and further wrapped, if needed. It is moved above in order not to break the association between an entity and its description. DVT automatically considers any comment above or in-line with an entity as its description that appears in tooltips, auto-complete or generated documentation. Before After Wrap multi line comments (ro.amiq.vlogdt/format.line_wrap.ml_comments) - When enabled, multi line comments are wrapped to fit the line width. Before After Vertical Alignment Disable Format for Code Sections Back to top",
    "section_path": [],
    "tokens": 168,
    "source": "scraped"
  },
  {
    "id": "c96b9f0b-5829-44b0-a395-171638e2f70c",
    "title": "Threads, Call Stack, Stepping | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/debugger-integration/threads-call-stack-stepping.html",
    "content": "Threads, Call Stack, Stepping | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Threads, Call Stack, Stepping From the Debug View you can: See all the threads and the call stack of the current thread. Switch to another thread: right click > Set Thread Active (e Language Only). Move up and down in the call stack. The Variables View is automatically updated and presents the variables in the current frame (function/task/process/method/tcm). The Editor always highlights and indicates the currently executed line. The buttons in the Debug section of the toolbar allow you to: Skip all breakpoints Resume (continue) a stopped simulation Suspend (stop in debugger) a running simulation Terminate a simulation, if launched by means of a DVT Generic Debug Configuration Disconnect from a simulation Step into, step over, step out (step return) Breakpoints Variables Back to top",
    "section_path": [],
    "tokens": 159,
    "source": "scraped"
  },
  {
    "id": "03dda16d-eb2d-4453-85f9-8b1da927b875",
    "title": "Connect Instance Ports by Name | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/connect-instance-ports-by-name.html",
    "content": "Connect Instance Ports by Name | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Connect Instance Ports by Name You can easily convert the port connections of a instance from positional to named. Place the cursor on an instance and press Ctrl + 1 , select Connect instance ports by name from the list of quick assist proposals and press Enter . The instance ports are connected by name. Tip You can also Right + Click in the editor and go to Refactor > Connect Instance Ports by Name . Bind Method Call Arguments by Position Connect Instance Ports by Position Back to top",
    "section_path": [],
    "tokens": 125,
    "source": "scraped"
  },
  {
    "id": "140bf4e6-a982-4ed9-bfae-8d7eb0f32222",
    "title": "Command Line Interface | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/command-line-interface/index.html",
    "content": "Command Line Interface | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Command Line Interface DVT has a Command Line Interface that allows you to perform various operations in DVT directly from the shell. For example you can create a new project, import an existing project, open a file, etc. You send the CLI commands using the dvt_cli.sh or dvt_cli.bat scripts. dvt_cli.sh Syntax Examples Makefile Example Commands Create a Project (Mixed-Language Capable) Create a Project From an Existing Template Import an Existing Project List Compiled Files Compare Files Launch a Run Configuration Open a File Close a File Open a Custom Dialog Open a Perspective Refresh a Project Rebuild a Project Rebuild All Projects Print Edited File Quit Query the running status Print version Run Performance Exploration Custom Dialog Snapshots dvt_cli.sh Back to top",
    "section_path": [],
    "tokens": 155,
    "source": "scraped"
  },
  {
    "id": "21cd9513-ef51-4304-8905-a0d6984182ce",
    "title": "Add from Template | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/project-templates/add-from-template.html",
    "content": "Add from Template | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Add from Template With this feature you can generate code from a single template file (or a folder containing templates) and add it to an existing project. To access the Add from Template Wizard go to Navigator \u00e2\u0080\u00a3 right click on a \u00e2\u0080\u0098\u00e2\u0080\u0099Target\u00e2\u0080\u0099\u00e2\u0080\u0099 folder inside a project \u00e2\u0080\u00a3 New \u00e2\u0080\u00a3 Add from Template .. figure:: ../../images/common/template-comp-navigator-menu.png The next step is to browse for the templates source folder (by default, is the last path used), then click Next . From the Templates panel > select the files/folders you want to add to Target . In the Attributes panel, you can modify the replacement variables by typing a new value or by selecting one from the history. The Target panel is used for preview - it shows where the selected files will be placed in the project and signals if there is a duplicate file error (if the file you want to add already exists in the target folder). Template Configuration Code Formatting Back to top",
    "section_path": [],
    "tokens": 197,
    "source": "scraped"
  },
  {
    "id": "5b883cfa-70f8-459f-8b8b-5fe7e7cd3784",
    "title": "Quick OVM Documentation Access | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ovm-support/quick-ovm-documentation-access.html",
    "content": "Quick OVM Documentation Access | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Quick OVM Documentation Access The Doxygen documentation is available at menu Help > Help Contents > OVM release number Doxygen .  You may choose documentation version from menu Window > Preferences > Help > OVM Doxygen . The CDN OVM/UVM User Guide is available at menu Help > Help Contents > CDN OVM/UVM User Guide . You need to configure the path to installed documentation from menu Window > Preferences > Help > CDN OVM/UVM User Guide. You can use Ctrl+Shift+H to quickly search through documentation (with or without selection in the editor). OVM Smart Log OVM Templates Back to top",
    "section_path": [],
    "tokens": 135,
    "source": "scraped"
  },
  {
    "id": "d6f2b827-70b8-4da5-9a6d-39cf58baafba",
    "title": "Rename Port Across the Design Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/rename-port-across-the-design-hierarchy.html",
    "content": "Rename Port Across the Design Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Rename Port Across the Design Hierarchy When you want to uniformly name a port which is directly propagated across several levels of the design, you can use Rename across the Design Hierarchy refactoring. If the port is directly connected to a sub instance port, then the sub instance port will also be renamed, and so on recursively across the whole sub design hierarchy tree. If the port is directly connected to a parent instance port, then the parent instance port will also be renamed only if it is part of the current editor instance Design Breadcrumb path, and so on recursively up the design top. For every port, both the definition and all its references are renamed. Place the editor cursor on the port, right click and select Refactor > Rename Port Across the Design Hierarchy . A dialog pops-up and allows you to configure: the new port name whether you want to perform the refactoring only in parent instances , only in sub-instances or both the maximum number of design hierarchy levels across which the renaming will be done; instances situated in the design hierarchy more than the specified number of levels above or below the starting point will not be affected Note That the full hierarchical path to the refactoring starting port is highlighted in yellow. You can preview the changes in a Schematic Diagrams . The diagram shows all the instances, ports and port connections affected by the refactoring. Instances reached from the refactoring starting point have green background Instances situated elsewhere in the design but affected by the refactoring have blue background Instances where name conflicts are detected have an orange border , and all the conflicting ports or signals are also shown Note Naming conflicts can appear when: one of the affected instances already has a port or signal that has the new name several ports of the same module would be renamed When done previewing, click the Resume button on the Diagram Editor top bar to return to the refactoring dialog. You can also preview the changes using a source code diff by clicking the Preview > button. Click OK to perform the refactoring. Rename Refactoring Rename File Back to top",
    "section_path": [],
    "tokens": 403,
    "source": "scraped"
  },
  {
    "id": "ff2ef5dc-5b4b-413c-884c-2312a63d9a93",
    "title": "Update Extern Prototype/Implementation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/update-extern-prototypeimplementation.html",
    "content": "Update Extern Prototype/Implementation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Update Extern Prototype/Implementation An error is triggered when the implementation of an extern method doesn\u00e2\u0080\u0099t match its prototype. Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Update implementation to match extern prototype or Update extern prototype to match implementation from the list of quick fix proposals and press Enter . The method signature (return type, argument names and types) is updated accordingly to match the prototype: Remove Signal Never Used Update Module Instance Back to top",
    "section_path": [],
    "tokens": 116,
    "source": "scraped"
  },
  {
    "id": "3a33a866-91d2-4767-862c-6a452d071610",
    "title": "Compilation Speed-up | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/compilation-speed-up.html",
    "content": "Compilation Speed-up | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Compilation Speed-up Several DVT directives can optimize build times by either condensing the scope of the full build analysis or by restricting certain features within specific code segments. This application note addresses questions related to performance, specifically regarding the duration of the full build process and the amount of memory used. How to exclude files from compilation? You can achieve this by using the +dvt_skip_compile directive . This allows DVT to bypass specific files completely during build. Benefits of this approach include reduced build times and lower memory usage. However, this may lead to false errors when DVT does not compile definitions for certain types (such as classes, modules, typedefs, etc.). To address these errors, you may need to use Compile Waivers . The directive is available in multiple variations: +dvt_skip_compile+<simple_pattern> +dvt_skip_compile+not+<simple_pattern> +dvt_skip_compile+regex+<regex_pattern> +dvt_skip_compile+regex+not+<regex_pattern> For simple patterns, wildcards like * (to match any sequence of characters) and ? (to match a single character) are available. The provided patterns are matched against file absolute paths. Examples To exclude every file located within the /dir1/ directory + dvt_skip_compile +*/ dir1 /* To exclude everything but files within the /dir1/ directory + dvt_skip_compile + not +*/ dir1 /* To exclude files in both the /dir1/ and /dir2/ directories, you have two options. You can sequentially use two directives: + dvt_skip_compile + not +*/ dir1 /* + dvt_skip_compile + not +*/ dir2 /* Alternatively, you can achieve the same effect with a single regular expression directive: + dvt_skip_compile + regex + not + ( .*/ dir1 /.*|.*/ dir2 /.* ) This approach allows you to tailor the compilation process precisely, ensuring that only the desired files are compiled, thereby reducing build time and memory usage. Note If +dvt_skip_compile+not is the first skip directive DVT encounters, it automatically assumes that a +dvt_skip_compile+ directive has been applied beforehand. Note The +dvt_skip_compile directive affects only the +dvt_init section it resides in. To extend the same skip compile directives to every +dvt_init section , you should employ the +dvt_prepend_init directive. + dvt_prepend_init + dvt_skip_compile +*/ dir1 /* + dvt_init ... build configuration directives ... + dvt_init ... build configuration directives ... The order of skip compile directives dictates the selection of files to bypass during compilation. Thus, employing the setup below leads to the exclusion of all files in the dir1 directory, aside from those in the dir1/dir2 subdirectory. + dvt_skip_compile +*/ dir1 /* + dvt_skip_compile + not +*/ dir1 / dir2 /* Skipped files are decorated distinctively in the Navigator View / Explorer View. DVT Eclipse: DVT for VS Code: How to exclusively compile the API? Shallow compilation can be used to speed up full build in scenarios where you\u00e2\u0080\u0099re working with third-party IPs or internal code that doesn\u00e2\u0080\u0099t change. It instructs DVT to partially parse the code, focusing on the API and bypassing the details. This means, for example, that within modules, it will only analyze ports and parameters, and for functions and tasks, solely the signature (arguments and their types). This strategy of partial parsing through shallow compilation leads to significant improvements in efficiency, reducing both the duration of builds and the demand on memory resources. Obviously, the optimization gains from shallow compilation are not as substantial as those offered by the +dvt_skip_compile directive . However,  modules and functions are included in the Autocomplete suggestions, features such as \u00e2\u0080\u009cOpen Declaration\u00e2\u0080\u009d hyperlinks function correctly, and perhaps most crucially, it does not introduce new errors, eliminating the necessity for Compile Waivers. This ensures a smoother coding experience, with essential code navigation and completion features readily accessible without the complication of additional errors, like NON_EXISTING_* or UNDECLARED_* errors which may appear when using +dvt_skip_compile directive. To enable the shallow compilation, use the following directive: + dvt_shallow_compile +< scope > [ + not |+ regex |+ regex + not ] +< pattern > Within this structure, <scope> can be any of the following: FILE : All the modules and functions in files whose absolute paths match the specified <pattern> will be shallow compiled. MODULE : All modules with fully qualified names that match the specified <pattern> will be shallow compiled. FUNCTION : All functions with fully qualified names that match the specified <pattern> will be shallow compiled. This directive grants precise control over shallow compilation\u00e2\u0080\u0099s scope, enabling the selective application to files, modules, or functions based on their specified names or paths. A fully qualified name is defined by its encompassing hierarchical scope path. For instance, consider a function named foo located within my_class , which resides in my_pkg ; the fully qualified name would be my_pkg::my_class.foo . For simple patterns, wildcards like * (to match any sequence of characters) and ? (to match a single character) are available. The order of shallow compile directives dictates which modules or functions are to undergo shallow compilation. Thus, employing the setup below leads to the shallow compilation of all functions in the my_pkg package, aside from those that contain my_func in their fully qualified name. + dvt_shallow_compile + FUNCTION + my_pkg :: * + dvt_shallow_compile + FUNCTION + not +* my_func * Note If +dvt_shallow_compile+not* is the initial shallow directive DVT encounters, it automatically assumes that a +dvt_shallow_compile+FILE+* directive has been applied beforehand. Note The +dvt_shallow_compile directive affects only the +dvt_init section it resides in. To extend the same skip compile directives to every +dvt_init section, you should employ the +dvt_prepend_init directive. + dvt_prepend_init + dvt_shallow_compile + MODULE +* + dvt_init ... build configuration directives ... + dvt_init ... build configuration directives ... Examples Shallow compile everything +dvt_shallow_compile+FILE+* Shallow compile the entire design except the testbench top +dvt_shallow_compile+MODULE+* +dvt_shallow_compile+MODULE+not+fully_qualified_name_of_tb_top Shallow compile a specific portion of the project - all files that meet a certain pattern +dvt_shallow_compile+FILE+*pattern* Shallow compile all functions within a given package +dvt_shallow_compile+FUNCTION+vip_pkg::* Shallow compile everything but exclude a specific package +dvt_shallow_compile+FILE+* +dvt_shallow_compile+FUNCTION+not+compiled_pkg::* Visual indicators are added in multiple places: A notification at the top of the editor Not available in VS Code An \u00e2\u0080\u009c[S]\u00e2\u0080\u009d indicator in the views: Compile Order, Types, Design Hierarchy, Verification Hierarchy An \u00e2\u0080\u009c[S]\u00e2\u0080\u009d indicator in the diagrams: Schematic Diagrams, UVM Component Diagrams A \u00e2\u0080\u009c(shallow)\u00e2\u0080\u009d indicator in the Console View during full build Note Instances of modules or UVM components that have been shallow compiled will not have any children nodes in Design Hierarchy and Verification Hierarchy VIew. Note Some features may not be fully operational within the shallow compiled sections of code. For example, refactoring a class variable name will not change its references within a shallow compiled function. Similarly, showing the usages of a package parameter will not show its usages within a shallow compiled module. Any references in non-shallow compiled code will work as expected. How to improve the elaboration time? To improve the elaboration time, you can configure it with the directives found in the Elaboration Debugging documentation page. Design Elaboration Precompilation Support On this page How to exclusively compile the API? How to improve the elaboration time? Back to top",
    "section_path": [],
    "tokens": 1182,
    "source": "scraped"
  },
  {
    "id": "9ab9be78-1207-4774-8261-30f0ee94f41a",
    "title": "Create Included File | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/create-included-file.html",
    "content": "Create Included File | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Create Included File An error is triggered when including a file which does not exist. Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Create file \u00e2\u0080\u00a6 in \u00e2\u0080\u00a6 from the list of quick fix proposals and press Enter . The file is created in the chosen location and opened in a new editor. Note A content assist pop up showing templates is automatically triggered. Note The list may contain several proposals, one for every project incdir. Create File From Build Config Editor Create Interface Class In New File Back to top",
    "section_path": [],
    "tokens": 131,
    "source": "scraped"
  },
  {
    "id": "6ddd15b0-5800-4c79-9204-10bd37cec95f",
    "title": "Quick Search in Views | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/index.html",
    "content": "Quick Search in Views | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Quick Search in Views Most DVT views have a Quick Search bar: The Quick Search bar allows you to easily locate a specific element by typing a few letters from its name. Besides simple Regex ( ? for any character and * for any character sequence), more advanced patterns are supported, for example CamelCase or hierarchical patterns like top//fifo/c.pi_data . CamelCase Simple Regex Hierarchical Search Search for Members Search Port in Design Hierarchy Search Port in Verification Hierarchy Search all UVM Phase Overrides Search Global API Show Instances in the Design Hierarchy View CamelCase Back to top",
    "section_path": [],
    "tokens": 131,
    "source": "scraped"
  },
  {
    "id": "70c8a493-771a-47c4-ac28-53a66f814f59",
    "title": "UVM Content Filters | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/uvm-content-filters.html",
    "content": "UVM Content Filters | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Content Filters Out-of-the-box UVM Predefined Content Filters eliminate the unnecessary content overhead by automatically filtering out the irrelevant internal information from the UVM library. As it compiles the UVM library, DVT detects issues, collects task reminders, and analyzes the API defined by the UVM library, but it hides them by default. You can bring in the full content with a simple click. For more details see Content Filters . UVM Compliance Review UVM Field Editor Back to top",
    "section_path": [],
    "tokens": 112,
    "source": "scraped"
  },
  {
    "id": "b5351433-0a32-4fea-bb24-a043987f83bf",
    "title": "Code Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-templates/index.html",
    "content": "Code Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Code Templates Code Templates in Autocomplete Constraint Code Templates Method Code Templates Global Code Templates Project Level Code Templates Code Templates View Predefined Content Filters Code Templates in Autocomplete Back to top",
    "section_path": [],
    "tokens": 64,
    "source": "scraped"
  },
  {
    "id": "d6d2d01c-f9e0-4355-8c52-fe92f21d971e",
    "title": "How does DVT integrate with emacs? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/how-does-dvt-integrate-with-emacs.html",
    "content": "How does DVT integrate with emacs? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How does DVT integrate with emacs? DVT integrates some emacs Verilog-Mode actions (provided that emacs is already configured): indent code, inject/delete/run automation. To activate: go to Window \u00e2\u0080\u00a3 Customize Perspective , then select the Command Groups Availability tab and in the list on the left select the checkbox Emacs Verilog-Mode . You should then see the emacs buttons in the toolbar. Eclipse has a built-in emacs keyboard scheme. To activate it, go to Window \u00e2\u0080\u00a3 Preferences then General \u00e2\u0080\u00a3 Keys and change the Scheme to Emacs There is an emacs plugin for Eclipse available at https://sites.google.com/a/mulgasoft.com/www/emacsplus What are the most common shortcuts in DVT? How does DVT integrate with CVS? Back to top",
    "section_path": [],
    "tokens": 149,
    "source": "scraped"
  },
  {
    "id": "fdb1ccce-8101-454f-a3f6-6794179e0cc4",
    "title": "In Block (Column) Selection mode I see strange editing artifacts | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/in-block-column-selection-mode-i-see-strange-editng-artifacts.html",
    "content": "In Block (Column) Selection mode I see strange editing artifacts | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide In Block (Column) Selection mode I see strange editing artifacts Please make sure the Text Editor Block Selection Font is a monospaced font: go to General \u00e2\u0080\u00a3 Appearance \u00e2\u0080\u00a3 Colors and Fonts -  in the list on the right, under the Basic category you should see Text Editor Block Selection Font The font should be monospaced When I switch to Block (Column) Selection mode the font changes How to modify the font size in the code editors? Back to top",
    "section_path": [],
    "tokens": 120,
    "source": "scraped"
  },
  {
    "id": "76d4d350-e63a-48c6-b547-e3ee2a8fa43e",
    "title": "How to find the DVT logs on Linux/Unix ? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-to-find-the-dvt-logs-on-linuxunix-.html",
    "content": "How to find the DVT logs on Linux/Unix ? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to find the DVT logs on Linux/Unix ? If you run DVT with dvt.sh: To print the logs location go to the workspace dir and: $ dvt_debug_utils.sh To dump the threads of a running DVT go to the workspace dir and: $ dvt_debug_utils.sh -thread_dump Other logs are in the <path_to_workspace>/.metadata folder. How to change the directory where the build log file is saved ? How to create resource filters ? Back to top",
    "section_path": [],
    "tokens": 113,
    "source": "scraped"
  },
  {
    "id": "8bce0625-36a8-441c-a4f6-39e6b94531b3",
    "title": "Unmanaged Settings | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/settings-management/unmanaged-settings.html",
    "content": "Unmanaged Settings | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Unmanaged Settings There are also some settings that are not handled by DVT. The following list presents settings that won\u00e2\u0080\u0099t be handled: Position of dialogs Is persisted when the same workspace is used but in can\u00e2\u0080\u0099t be shared using user or common levels Size of views Is persisted when the same workspace is used but in can\u00e2\u0080\u0099t be shared using user or common levels Last opened perspective or saved perspectives Is persisted when the same workspace is used but in can\u00e2\u0080\u0099t be shared using user or common levels Working Sets Are persisted when the same workspace is used but in can\u00e2\u0080\u0099t be shared using user or common levels Secure storage information This is preserved in $HOME/.eclipse/org.eclipse.equinox.security and is not handled by DVT Proxy settings (Preferences -> General -> Network Connections) This is preserved in $HOME/.eclipse/org.eclipse.platform* directories and is not handled by DVT User installed plugins in a shared installation This is preserved in $HOME/.eclipse/org.eclipse.platform* directories and is not handled by DVT Settings used by other plugins that are not stored using the workspace preferences engine These settings can be stored anywhere so is not possible to handle them Managed Settings User and Common Settings Location Back to top",
    "section_path": [],
    "tokens": 230,
    "source": "scraped"
  },
  {
    "id": "fbb20601-48c4-4f19-b051-10418dff503f",
    "title": "Extract to Module | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/extract-to-module.html",
    "content": "Extract to Module | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Extract to Module A fragment of a module can be automatically extracted and encapsulated into a new instance. The fragment must be a contiguous region containing only instances, always blocks and assignments. Select the region in the editor, press Ctrl + 1 , select Extract to module from the list of quick assist proposals and press Enter . The selected piece of code will be moved to a new module in a new file. Fill in the name of the new module and file. The initial selection is replaced with an instance of the new module: The ports of the new module are automatically computed and connected in the instantiation. Implementation notes the new file is `included on the line above the declaration of the initial module signals which are not referenced anywhere outside the selection will be marked with a // FIXME after the extraction currently busses are propagated through a single port even if accessed through bit selects; in such a case, a // FIXME comment can help you easily identify the unique bit selects which you might consider propagating through distinct ports Tip You can also Right + Click in the editor and go to Refactor > Extract to module to trigger this functionality. Extract to Method Move Selection to New File Back to top",
    "section_path": [],
    "tokens": 251,
    "source": "scraped"
  },
  {
    "id": "a6b317ab-31de-47ae-9471-1d3d7724e450",
    "title": "Refresh | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/getting-started/workspace/refresh.html",
    "content": "Refresh | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Refresh Once you start Eclipse, the workspace is usually read from the disk (not necessarily, caches are also kept from the previous invocation). From this point on, usually, what ever changes you do outside of Eclipse on resources in the workspace are not reflected immediately. You need to request for a refresh (right click on a project and chose Refresh from the drop down menu). \u00e2\u0080\u009cUsually\u00e2\u0080\u009d above because it can be customized. To customize the way refresh behaves and eventually switch it to fully detect each change whenever it occurs, use menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Workspace . From here you can customize if refresh is done on startup, how often etc. Refresh is a basic and primitive support of concurrency and also has to do with performance. Maybe I don\u00e2\u0080\u0099t want to be notified of every change on resources in my projects if somebody is also processing part of the data outside Eclipse. It may take a while, even not be relevant and stop me from working until the external processing is complete. For example compilation. Hence maybe I want to trigger it when I know for sure I am interested in some external changes. This does not imply that conflicts (for example editing a file that changed on the disk) are not promptly signaled by Eclipse. It happens often that you don\u00e2\u0080\u0099t find some files in your workspace (of course inside a project) although from explorer or console it seems they are there. Maybe you forgot to refresh? See also What is a Workspace Workspace and Workbench What is a Project Workspace and Workbench Linked Resources Back to top",
    "section_path": [],
    "tokens": 304,
    "source": "scraped"
  },
  {
    "id": "7fd52da8-4810-44cd-b2ca-d4f43a1b0d25",
    "title": "I am new to Eclipse, where should I start from? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/i-am-new-to-eclipse-where-should-i-start-from.html",
    "content": "I am new to Eclipse, where should I start from? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide I am new to Eclipse, where should I start from? Online from http://www.eclipse.org/documentation . For example \u00e2\u0080\u009cEclipse Ganymede Documentation (HTML Help Center)\u00e2\u0080\u009d is for Eclipse 3.4. The same documentation is available from Eclipse menu Help \u00e2\u0080\u00a3 Help Contents . Start with Workbench User Guide chapters Getting Started and Tasks . Really useful and relaxing is the Tips and Tricks chapter. If you have installed the platform, you can always take a tour from menu Help \u00e2\u0080\u00a3 Welcome . There is no experience compared with practice, especially for GUI intensive apps. You can browse for more resources in the Eclipse site www.eclipse.org with good articles and responsive communities available. Be prepared to discover nice functionality all the time. From time to time we recommend to read tips, tricks or concepts. Q & A Where can I find DVT Help? Back to top",
    "section_path": [],
    "tokens": 181,
    "source": "scraped"
  },
  {
    "id": "1d1569a0-fd3e-4cd3-b343-aa267f5aebda",
    "title": "Use of External Programs | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/use-of-external-programs.html",
    "content": "Use of External Programs | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Use of External Programs The DVT compiler may run external programs in order to determine various locations used in the build configuration. For example, \u00e2\u0080\u0098irun -location -nolog -nohistory\u00e2\u0080\u0099 is executed in order to compute the location of the CDN UVM library when in the ius.irun compatibility mode. The default timeout is 20 seconds. To specify a different timeout, in the terminal where you run DVT set the DVT_EXTERNAL_PROGRAM_TIMEOUT environment variable with the new timeout in milliseconds. For example to set a 40 seconds timeout: $ > setenv DVT_EXTERNAL_PROGRAM_TIMEOUT 40000 Set 0 to disable the timeout. Questa Libraries Compilation Compile Checks Back to top",
    "section_path": [],
    "tokens": 137,
    "source": "scraped"
  },
  {
    "id": "11bee33a-379b-4c2c-8e54-f8b3f39fea16",
    "title": "Q & A | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/index.html",
    "content": "Q & A | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Q & A I am new to Eclipse, where should I start from? Where can I find DVT Help? How do I see and configure the key shortcuts? Are there any backup files in Eclipse? Workspace in use, cannot launch eclipse\u00e2\u0080\u00a6 Locking is not possible in the directory\u00e2\u0080\u00a6 How to start DVT Eclipse with a different eclipse.ini Save could not be completed IBM Clearcase Plugin Non existing package mti_fli How to use Working Sets for filtering Problems/Task/Search views? How to handle Simulator and Command Line Macros How do I Access Files Outside Project Dir - Working with Linked Resources Mapping Linux to Windows (/proj/ to Z:\\proj\\) Subversive vs Subclipse How do I associate a project with both DVT and CDT? Can I use vi/vim along with DVT? Can I perform dos2unix or unix2dos from DVT? How can I configure Eclipse to use a local CVS repository? I am using the Common Desktop Environment via Citrix and experiencing crashes. What can I do? How do I change the background color of the Editor? Some widget colors are not displayed properly. What can I do? How do I change the tooltip colors? How do I change Internet Proxy Settings? Eclipse does not start, there is no Workspace, metadata or log file created Workspace permissions How do I link mylyn with Bugzilla? How do I print source code? How do I disable Eclipse Software Sites? How do I revert to a previous version? What are the most common shortcuts in DVT? How does DVT integrate with emacs? How does DVT integrate with CVS? How to set an environment variable within a Run Configuration? How to run a remote Unix command from DVT Eclipse for Windows? Rebuild shortcut (Ctrl + Alt + R) does not work I want to use an alias in a DVT Generic Run Configuration, but it\u00e2\u0080\u0099s not recognized How to set multiple paths as sources of predefined projects ? Lines are suddenly changing indentation when I edit text or move the cursor through the editor. How to change the directory where the build log file is saved ? How to find the DVT logs on Linux/Unix ? How to create resource filters ? How to create custom shortcut and button for a Run Configuration? I know that file.foo is present in the project location, but I can\u00e2\u0080\u0099t see it in the Navigator View How to copy the full path to the file in the current editor? How to adjust the console logs filters matching parameters? When I switch to Block (Column) Selection mode the font changes In Block (Column) Selection mode I see strange editing artifacts How to modify the font size in the code editors? How to automatically checkout/lock files from the revision control system ? How can I see if a file is read-only? How can I open a file in DVT from the terminal? How can I open a file in DVT from Questa? How do I change the name of the xterm opened by a DVT Generic Run Configuration? I get errors while installing or updating a plugin from an update site Tips and Tricks I am new to Eclipse, where should I start from? Back to top",
    "section_path": [],
    "tokens": 565,
    "source": "scraped"
  },
  {
    "id": "7e827590-2bf8-4008-9716-89151156630b",
    "title": "Search Port in Verification Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/search-port-in-verification-hierarchy.html",
    "content": "Search Port in Verification Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Search Port in Verification Hierarchy You can search for a specific port in the verification hierarchy by using the Verification Hierarchy View . Press the Select Top button and pick one of the available top units/components. Make the ports panel visible by pressing the Show/Hide Ports button. In the instances filter text box, type the name of the port you are looking for, preceded by the dot \u00e2\u0080\u0098.\u00e2\u0080\u0099 character. The instances that contain the port are bolded. The ports are also bolded and promoted to the top of the ports pane. Search Port in Design Hierarchy Search all UVM Phase Overrides Back to top",
    "section_path": [],
    "tokens": 139,
    "source": "scraped"
  },
  {
    "id": "e94d1cce-7715-4eaa-8997-5cc87cd65cac",
    "title": "UVM Sequence Tree | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/uvm-sequence-tree.html",
    "content": "UVM Sequence Tree | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Sequence Tree The UVM Sequence Tree View presents the call tree of an UVM sequence. The call tree is made of all sub-sequences that are triggered by the sequence, recursively down to leaf sequence items. To select a sequence and inspect its call tree, position the cursor on the UVM sequence class name in the editor and: press Ctrl + Alt + Shift + S or right click and choose Show \u00e2\u0080\u00a3 UVM Sequence Tree from the menu. The UVM Sequence Tree view is automatically raised and populated with the call tree of the selected sequence. At any time you can open the view from Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 UVM Sequence Tree . Toolbar Show History List Click to see the previously inspected UVM sequence call trees. Prepend Package Name Prepend the enclosing package name to the name of each class. The view label shows the current project and the sequence for which the call tree is presented. The sequence call tree has the following node types: A class that inherits from uvm_sequence. A sub-sequence may be called from an `uvm_do macro or started using the seq.start() function. A class that inherits from uvm_sequence_item. A fork/join block in the sequence body(). A process from a fork/join block. Right-click on a sequence node in the tree and you have the following options : Show Usages (References) Search for the references of the selected sequence. More details here . Show Type Hierarchy Show the type hierarchy for the selected sequence. More details here . Show Verification Hierarchy Show the verification hierarchy for the selected sequence. More details here . Show UVM Sequence Tree Show the sequence tree for the selected sequence. Practically set the selected sequence as root. Show Diagram Show the diagram for the selected sequence. More details here . Copy Copy the selected sequence class name to clipboard. UVM Runtime Elaboration UVM Smart Log Back to top",
    "section_path": [],
    "tokens": 356,
    "source": "scraped"
  },
  {
    "id": "7457918c-80d4-4bb4-802f-41d9832e2bc5",
    "title": "Non existing package mti_fli | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/non-existing-package-mti_fli.html",
    "content": "Non existing package mti_fli | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Non existing package mti_fli mti_fli is a non-standard proprietary SV package built into Questa. To let DVT read it, you should prepend the following line to your Build Configurations . ${QUESTA_ROOT}/verilog_src/dpi_cpack/dpi_cpackages.sv where ${QUESTA_ROOT} denotes the location where Questa is installed. Note In case you have an external builder configured to use the default.build , this setting will also be passed to the simulator. Therefore, the simulator will issue errors like: ** Error : / apps / questasim / verilog_src / dpi_cpack / dpi_cpackages . sv ( 4 ): Builtin package \"mti_fli\" cannot be replaced . To work around this issue, you need to have different command files for DVT and for the external builder. IBM Clearcase Plugin How to use Working Sets for filtering Problems/Task/Search views? Back to top",
    "section_path": [],
    "tokens": 163,
    "source": "scraped"
  },
  {
    "id": "297c480e-6e5a-49a2-a699-7ec225ef5a14",
    "title": "Comments | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/comments.html",
    "content": "Comments | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Comments The following comment styles are allowed: # single line comment // single line comment -- single line comment /* multi line comment */ Strings Environment Variables Back to top",
    "section_path": [],
    "tokens": 61,
    "source": "scraped"
  },
  {
    "id": "4aadff10-1abc-482f-ad0e-38e48a2368f7",
    "title": "Extract to Module | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/extract-to-module.html",
    "content": "Extract to Module | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Extract to Module A fragment of a module can be automatically extracted and encapsulated into a new instance. The fragment must be a contiguous region containing only instances, always blocks and assignments. Select the region in the editor, press Ctrl + 1 , select Extract to module from the list of quick assist proposals and press Enter . The selected piece of code will be moved to a new module in a new file. Fill in the name of the new module and file. The initial selection is replaced with an instance of the new module: The ports of the new module are automatically computed and connected in the instantiation. Note Implementation notes the new file is `included on the line above the declaration of the initial module signals which are not referenced anywhere outside the selection will be marked with a // FIXME after the extraction currently busses are propagated through a single port even if accessed through bit selects; in such a case, a // FIXME comment can help you easily identify the unique bit selects which you might consider propagating through distinct ports Tip You can also Right - Click in the editor and go to Refactor > Extract to module to trigger this functionality. Extract to Method Move Selection to New File Back to top",
    "section_path": [],
    "tokens": 252,
    "source": "scraped"
  }
]