[
  {
    "id": "85e60ce0-0c0c-4fbd-9c93-9eed45c58f58",
    "title": "Table of Contents | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/index.html",
    "content": "Table of Contents | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Table of Contents Installation Checklist Install DVT Using a pre-packed Distribution Install DVT Using the Update Site Eclipse Version Java Version DVT Plug-in Set the License Predefined Projects Opening a Predefined Project Preferences Getting Started What is a Workspace What is a Project Create a New Project Import an Existing Project Automatic Create or Import Project Natures Workspace and Workbench Work Workspace Workbench Workspace Again Refresh Linked Resources Backup and Local History Basic Tutorial Switch to the DVT Perspective Open a Project Configure the Build Build the Project Inspect the Compilation Errors See Comments in Tooltips Use Hyperlinks to Move Around in the Code Quickly Open a Type (Class, Module, Interface) Quickly Inspect the Class Hierarchy Quickly Open a File Quickly Move Inside the Editor Inspect the Class Hierarchy and Class Members Inspect the Design Hierarchy Inspect the Verification Hierarchy Browse Through All the Available Types (Classes, Modules, Interfaces) Look for the Implementation of an Extern Function or Task Search for Entities Use Content Assist (Autocomplete) Use Code Templates Use Module Auto Instance Expand Macros (Apply Preprocessing) Trace Macro Errors Track Tasks using TODO Markers Quickly See the Current Scope in the Status Bar Fold Code Regions in Order to Improve Readability Access the Context Sensitive Help Build Configurations Non-top files default.build Auto-config Simulator Log-config Emulating compiler invocations Multiple .build Files Compatibility Modes List of Compatibility Modes How to Specify the Compatibility Mode Paths Strings Comments Environment Variables Including Other Argument Files Build Persistence DB Access Considerations DVT Auto-Linked Run a Script Before Build All Build Directives e Language Test Files e Language SPECMAN_PATH Adding VIPs to $SPECMAN_PATH using sn_which.sh SystemVerilog OVM or UVM Library Compilation Xilinx Libraries Compilation Precompilation support for Xilinx Libraries Intel(Altera) Quartus Libraries Compilation Precompilation support for Intel(Altera) Quartus Libraries Questa Libraries Compilation Use of External Programs Compile Checks Compile Waivers Compile Waivers Examples Compile Waivers File Syntax (XML) Semantic Checks Synthesis Checks Performance Checks Dead Code Checks Non Standard Checks Content Assist (Autocomplete) Content assist for CamelCase and Underscore Code Templates Module Automatic Instantiation Override Functions Using Autocomplete Override Constraints Using Autocomplete Implement Extern Functions Using Autocomplete Use Assignment Pattern for Struct Type Variable Quick Fix Proposals Add Parameter to Module Add Port to Module Add Signal to Sensitivity List Add Virtual Qualifier to Interface Type Correct Spelling In Comments and Strings Create Class In New File Create File From Build Config Editor Create Included File Create Interface Class In New File Declare Extern Prototype Declare Method Declare Variable Did You Mean Explicitly Declare Fully Qualify Type Implement Extern Constraint Implement Extern Method Implement Missing Pure Virtual Methods Import Type Remove \u00e2\u0080\u0098local\u00e2\u0080\u0099 or \u00e2\u0080\u0098protected\u00e2\u0080\u0099 Qualifier Remove Signal from Sensitivity List Remove Signal Never Used Update Extern Prototype/Implementation Update Module Instance Update Virtual Method Signature Waive Compilation Problems Quick Assist Proposals Bind Method Call Arguments by Name Bind Method Call Arguments by Position Connect Instance Ports by Name Connect Instance Ports by Position Collapse Macro Expand Macro Expand .* Port Connections Extract to Variable Extract to Method Extract to Module Move Selection to New File Join Extern and Implementation Split into Extern and Implementation Rename in File AI Assistant Overview Getting Started Key Terms Sessions Blueprints Prompting Symbols Snippets Working in Chat List of Buttons, Shortcuts and Commands Working in Editor Code Completion Protecting Code Pattern Format Examples Reference List of Commands Predefined Blueprints Custom Blueprints Predefined Snippets Custom Snippets Advanced LLM Configuration Environment variables-based configuration File-based configuration How to Set-up Local LLMs Using Ollama Add Comments to Selected Element Troubleshooting Why do I get unexpected replies? Why do I get different replies for the same request? What to do if I get errors or find a bug? Content Filters Content Filters XML syntax Filtering by Element Type Content Filters Examples Predefined Content Filters Code Templates Code Templates in Autocomplete Constraint Code Templates Method Code Templates Global Code Templates Project Level Code Templates Code Templates View File Templates Project Templates What is a project template? How to generate code from a project template Step 1. Specify Directories Step 2. Specify Parameters Template Configuration template-config.xml template.config Add from Template Code Formatting Whitespace Indentation Vertical Alignment Vertical Align Patterns (ro.amiq.vlogdt/format.vertical_align.vregex) Line Wrapping Disable Format for Code Sections Format Multiple Files External Preferences Keys Automatic Indentation As You Type Override Functions Override Annotation Inspect Overrides in the Quick Type Hierarchy View Inspect Overrides in the Layers View Override Using the Dialog Override Using Autocomplete Override Using the Type Hierarchy View Override Constraints Override Annotation Inspect Overrides in the Quick Type Hierarchy View Inspect Overrides in the Layers View Override Using the Dialog Override Using Autocomplete Proposals Generate Getters and Setters Module Automatic Instantiation Autoinstance Using Autocomplete Autoinstance Using Drag and Drop Semantic Search Show Usages, Readers or Writers Favorite Searches Show Constraints Show Instances Show Instances in the Search View Show Instances in the Design Hierarchy View Quick Search in Views CamelCase Simple Regex Hierarchical Search Search for Members Search Port in Design Hierarchy Search Port in Verification Hierarchy Search all UVM Phase Overrides Search Global API Trace Connections Trace Connections from Design Hierarchy Trace Connections from Editor Trace Connections View Trace Path Breadcrumb Navigation Bar Design Breadcrumb Verification Breadcrumb Scope Breadcrumb Filesystem Breadcrumb Code Factory Factory Input Creating code Create from Template Design API Port API Port Data API Parameter API Example Refactoring Rename Refactoring Rename Port Across the Design Hierarchy Rename File Bind Method Call Arguments by Name Bind Method Call Arguments by Position Connect Instance Ports by Name Connect Instance Ports by Position Expand .* Port Connections Extract to Variable Extract to Method Extract to Module Move Selection to New File Join Extern and Implementation Split into Extern and Implementation Change Method Signature Connect Instances Across the Design Hierarchy Connect Instances Using New Ports Connect Instances  Using Existing Ports Structural Changes Preview Diagram Refactoring Connect View Add Port to Module from Selected Field Add New Port to Module Add New Parameter to Module Refactoring Scripts Writing a Refactoring Script Applying a Refactoring Script Diagrams UML Diagrams UML Diagrams - Select Types UML Diagrams - Preferences UML Diagrams - Legend Architecture UML Diagrams Sequences UML Diagrams Design Diagrams Schematic Diagrams Flow Diagrams Block Diagrams Finite-State Machine Diagrams Diagram Filters Design Diagram Actions Breadcrumb Navigation Bar Low Power Format Support UVM Components Diagrams Component Diagrams from Verification Hierarchy Component Diagrams from Simulation Diagram Filters Diagram Actions Diagram Toolbar Diagram Magnifier WaveDrom Timing Diagrams Bit Field Diagrams Bit Field Diagrams for UVM registers Bit Field Diagrams for packed data types Low Power Format Support Supply Network Diagram Export HTML/PDF Documentation Preview HTML Documentation External Tools Integration Run Configurations Run Configuration Session Type Custom Shortcut and Button for a Run Configuration Using environment variables in DVT Generic Run Configurations Using an alias in a DVT Generic Run Configuration DVT Generic Run Configuration Variables Smart Log Smart Log - Filters Smart Log - Hyperlinks Smart Log - Styles External Builders How to define a new external builder How to invoke external builders External Builder Output Source Code Markers - errors warnings External Documentation Configure External Documentation Browse External Documentation Search External Documentation Debugger Integration Simulation Prerequisites Launch a Debug Simulation Connect to an Existing Simulation Breakpoints Threads, Call Stack, Stepping Variables Watch Expressions Debug Specific Configurations Custom Dialogs Quick Steps Customizing the Dialog Output SWT/XML Reference Layouts Widgets Custom Dialog Snapshots Custom Dialog Snapshots File Syntax (XML) Command Line Interface dvt_cli.sh Syntax Examples Makefile Example Commands Create a Project (Mixed-Language Capable) Create a Project From an Existing Template Import an Existing Project List Compiled Files Compare Files Launch a Run Configuration Open a File Close a File Open a Custom Dialog Open a Perspective Refresh a Project Rebuild a Project Rebuild All Projects Print Edited File Quit Query the running status Print version Run Performance Exploration Macros Support Inactive Code Highlight Overview Settings Macro Expansion Overview Triggering Tips IMPORTANT NOTE Macros and Quick Macros Views Reminders (TODO Markers) OVM Support OVM Compliance Review OVM Field Editor Triggering Interface Problems Tips OVM Smart Log Quick OVM Documentation Access OVM Templates UVM Support Runtime UVM Configuration Queries Static UVM Configuration Queries UVM Browser UVM Compliance Review UVM Content Filters UVM Field Editor Triggering Interface Problems Tips UVM Runtime Elaboration UVM Sequence Tree UVM Smart Log UVM Templates UVM Verification Hierarchy OVM to UVM Migration Triggering Preferences Review changes VMM Support VMM Smart Log Quick VMM Documentation Access VMM Templates Settings Management Managed Settings Unmanaged Settings User and Common Settings Location Use Cases Memory Allocation Thresholds Workspace Preferences Run Configurations Compile Waivers Content Filters External Builders Export HTML Documentation Custom Pragmas Examples Deprecated Settings Management (before DVT 3.5) Workspace Settings Project Settings Other Settings Importing Preferences From a Different Workspace Using Import/Export Wizard Using dvt.sh Script Manually Customizing Default Settings Using dvt.ini Show Changed Preferences Dialog Changing the Default dvt.ini Using a User Customized dvt.ini Reference Comments Formatting Markdown ( recommended ) Javadoc Natural Docs ( deprecated ) Common Shortcuts Custom Pragmas DVT Resource Monitor Editor Notification Editor Right Click Menu Folding Macros Source Code Factory Show References Trace Refactor Hyperlinks Hyperlinks in Comments Icons and Decorations Icons Decorations Changing Icon Colors Project Colors Inactive Generates Code Highlight Lazy Bring up Resources Memory Monitor Scripts dvt.sh dvt_cli.sh dvt_from_rawtokens.sh dvt_kit_installer.sh dvt_plugin_installer.sh dvt_build.sh Syntax Coloring Themes Toolbar Actions Tooltips Views Call Hierarchy View Checks View Code Templates View Compile Order view Config DB View Console View Coverage View Design Hierarchy View Factory Overrides View Inspect View Layers View Macros View Outline View Power Domain View Problems View Quick Query View Registers View Tasks View Trace Connections View Types View Type Hierarchy View UVM Browser View UVM Sequence Tree View Verification Hierarchy View Application Notes C/C++ support Design Elaboration Top candidates Parameter values Unelaborated Design Debugging Performance Compilation Speed-up How to exclusively compile the API? How to improve the elaboration time? Precompilation Support Auto precompiled databases Encrypted VIP Support FPGA Support Intel(Altera) Quartus Intel(Altera) Quartus Libraries Compilation Xilinx ISE/Vivado Xilinx Libraries Compilation Precompilation support for Intel(Altera) Quartus and Xilinx Libraries Generating External Tool Scripts from the DVT Build Configuration Incremental Compilation Preprocessed Files Support Navigation between (p) and (g) files Integration of the preprocessing tool Mapping preprocessing (p) to generated (g) files Scan locations for (p) files Output and logging Configuration Understanding DVT IDE memory usage UVM Library Compilation Troubleshooting Visual Artifacts Tips and Tricks Editing Code Navigation Searching Miscellaneous Q & A I am new to Eclipse, where should I start from? Where can I find DVT Help? How do I see and configure the key shortcuts? Are there any backup files in Eclipse? Workspace in use, cannot launch eclipse\u00e2\u0080\u00a6 Locking is not possible in the directory\u00e2\u0080\u00a6 How to start DVT Eclipse with a different eclipse.ini Save could not be completed IBM Clearcase Plugin Non existing package mti_fli How to use Working Sets for filtering Problems/Task/Search views? How to handle Simulator and Command Line Macros How do I Access Files Outside Project Dir - Working with Linked Resources Mapping Linux to Windows (/proj/ to Z:\\proj\\) Subversive vs Subclipse How do I associate a project with both DVT and CDT? Can I use vi/vim along with DVT? Can I perform dos2unix or unix2dos from DVT? How can I configure Eclipse to use a local CVS repository? I am using the Common Desktop Environment via Citrix and experiencing crashes. What can I do? How do I change the background color of the Editor? Some widget colors are not displayed properly. What can I do? How do I change the tooltip colors? How do I change Internet Proxy Settings? Eclipse does not start, there is no Workspace, metadata or log file created Workspace permissions How do I link mylyn with Bugzilla? How do I print source code? How do I disable Eclipse Software Sites? How do I revert to a previous version? What are the most common shortcuts in DVT? How does DVT integrate with emacs? How does DVT integrate with CVS? How to set an environment variable within a Run Configuration? How to run a remote Unix command from DVT Eclipse for Windows? Rebuild shortcut (Ctrl + Alt + R) does not work I want to use an alias in a DVT Generic Run Configuration, but it\u00e2\u0080\u0099s not recognized How to set multiple paths as sources of predefined projects ? Lines are suddenly changing indentation when I edit text or move the cursor through the editor. How to change the directory where the build log file is saved ? How to find the DVT logs on Linux/Unix ? How to create resource filters ? How to create custom shortcut and button for a Run Configuration? I know that file.foo is present in the project location, but I can\u00e2\u0080\u0099t see it in the Navigator View How to copy the full path to the file in the current editor? How to adjust the console logs filters matching parameters? When I switch to Block (Column) Selection mode the font changes In Block (Column) Selection mode I see strange editing artifacts How to modify the font size in the code editors? How to automatically checkout/lock files from the revision control system ? How can I see if a file is read-only? How can I open a file in DVT from the terminal? How can I open a file in DVT from Questa? How do I change the name of the xterm opened by a DVT Generic Run Configuration? I get errors while installing or updating a plugin from an update site What is New? 25.1.11 (18 June 2025) 25.1.10 (28 May 2025) 25.1.9 (13 May 2025) 25.1.8 (2 May 2025) 25.1.7 (9 April 2025) 25.1.6 (26 March 2025) 25.1.5 (12 March 2025) 25.1.4 (12 March 2025) 25.1.3 (26 February 2025) 25.1.2 (13 February 2025) 25.1.1 (21 January 2025) 24.2.28 (11 December 2024) 24.2.27 (26 November 2024) 24.2.26 (14 November 2024) 24.2.25 (31 October 2024) 24.2.24 (14 October 2024) 24.2.23 (11 October 2024) 24.1.22 (1 October 2024) 24.1.21 (18 September 2024) 24.1.20 (4 September 2024) 24.1.19 (22 August 2024) 24.1.18 (7 August 2024) 24.1.16 (25 July 2024) 24.1.14 (9 July 2024) 24.1.13 (26 June 2024) 24.1.12 (11 June 2024) 24.1.11 (29 May 2024) 24.1.10 (14 May 2024) 24.1.8 (24 April 2024) 24.1.7 (9 April 2024) 24.1.6 (27 March 2024) 24.1.5 (13 March 2024) 24.1.4 (28 February 2024) 24.1.3 (13 February 2024) 24.1.2 (1 February 2024) 24.1.1 (18 January 2024) 23.2.30 (21 December 2023) 23.2.29 (13 December 2023) 23.2.28 (28 November 2023) 23.2.27 (17 November 2023) 23.2.26 (14 November 2023) 23.2.25 (1 November 2023) 23.2.24 (17 October 2023) 23.2.23 (9 October 2023) 23.1.22 (22 September 2023) 23.1.20 (6 September 2023) 23.1.19 (25 August 2023) 23.1.18 (2 August 2023) 23.1.16 (18 July 2023) 23.1.15 (7 July 2023) 23.1.14 (22 June 2023) 23.1.13 (7 June 2023) 23.1.12 (23 May 2023) 23.1.11 (9 May 2023) 23.1.10 (25 April 2023) 23.1.9 (12 April 2023) 23.1.8 (29 March 2023) 23.1.7 (15 March 2023) 23.1.6 (1 March 2023) 23.1.5 (21 February 2023) 23.1.4 (8 February 2023) 23.1.3 (31 January 2023) 23.1.2 (25 January 2023) 23.1.1 (19 January 2023) 22.1.39 (20 December 2022) 22.1.38 (14 December 2022) 22.1.37 (6 December 2022) 22.1.36 (22 November 2022) 22.1.35 (17 November 2022) 22.1.34 (8 November 2022) 22.1.32 (1 November 2022) 22.1.31 (20 October 2022) 22.1.30 (11 October 2022) 22.1.29 (28 September 2022) 22.1.28 (28 September 2022) 22.1.27 (13 September 2022) 22.1.26 (7 September 2022) 22.1.25 (30 August 2022) 22.1.24 (22 August 2022) 22.1.23 (16 August 2022) 22.1.22 (2 August 2022) 22.1.21 (21 July 2022) 22.1.20 (11 July 2022) 22.1.19 (28 June 2022) 22.1.18 (15 June 2022) 22.1.17 (8 June 2022) 22.1.16 (31 May 2022) 22.1.14 (17 May 2022) 22.1.13 (9 May 2022) 22.1.12 (3 May 2022) 22.1.11 (18 April 2022) 22.1.10 (12 April 2022) 22.1.9 (30 March 2022) 22.1.8 (15 March 2022) 22.1.7 (2 March 2022) 22.1.6 (23 February 2022) 22.1.5 (16 February 2022) 22.1.4 (8 February 2022) 22.1.3 (31 January 2022) 22.1.2 (26 January 2022) 22.1.1 (18 January 2022) 21.1.53 (22 December 2021) 21.1.52 (14 December 2021) 21.1.51 (6 December 2021) 21.1.50 (23 November 2021) 21.1.49 (17 November 2021) 21.1.48 (16 November 2021) 21.1.47 (8 November 2021) 21.1.46 (2 November 2021) 21.1.45 (26 October 2021) 21.1.44 (19 October 2021) 21.1.43 (11 October 2021) 21.1.42 (4 October 2021) 21.1.41 (27 September 2021) 21.1.40 (21 September 2021) 21.1.39 (15 September 2021) 21.1.38 (8 September 2021) 21.1.36 (30 August 2021) 21.1.35 (23 August 2021) 21.1.34 (16 August 2021) 21.1.33 (9 August 2021) 21.1.32 (3 August 2021) 21.1.31 (27 July 2021) 21.1.30 (20 July 2021) 21.1.29 (12 July 2021) 21.1.28 (6 July 2021) 21.1.27 (28 June 2021) 21.1.26 (22 June 2021) 21.1.25 (16 June 2021) 21.1.24 (8 June 2021) 21.1.23 (3 June 2021) 21.1.22 (24 May 2021) 21.1.21 (18 May 2021) 21.1.20 (17 May 2021) 21.1.19 (10 May 2021) 21.1.18 (28 April 2021) 21.1.17 (26 April 2021) 21.1.16 (20 April 2021) 21.1.15 (19 April 2021) 21.1.14 (13 April 2021) 21.1.13 (5 April 2021) 21.1.12 (30 March 2021) 21.1.11 (22 March 2021) 21.1.10 (15 March 2021) 21.1.9 (8 March 2021) 21.1.8 (1 March 2021) 21.1.7 (22 February 2021) 21.1.6 (15 February 2021) 21.1.5 (5 February 2021) 21.1.4 (2 February 2021) 21.1.3 (25 January 2021) 21.1.2 (18 January 2021) 21.1.1 (11 January 2021) 20.1.44 (21 December 2020) 20.1.43 (8 December 2020) 20.1.42 (4 December 2020) 20.1.41 (20 November 2020) 20.1.40 (13 November 2020) 20.1.39 (9 November 2020) 20.1.38 (30 October 2020) 20.1.37 (23 October 2020) 20.1.36 (16 October 2020) 20.1.35 (8 October 2020) 20.1.34 (2 October 2020) 20.1.33 (28 September 2020) 20.1.32 (17 September 2020) 20.1.31 (11 September 2020) 20.1.30 (3 September 2020) 20.1.29 (28 August 2020) 20.1.28 (21 August 2020) 20.1.27 (14 August 2020) 20.1.26 (30 July 2020) 20.1.25 (24 July 2020) 20.1.24 (17 July 2020) 20.1.23 (9 July 2020) 20.1.22 (8 July 2020) 20.1.21 (2 July 2020) 20.1.20 (26 June 2020) 20.1.19 (18 June 2020) 20.1.17 (16 June 2020) 20.1.16 (12 June 2020) 20.1.15 (4 June 2020) 20.1.14 (28 May 2020) 20.1.13 (22 May 2020) 20.1.12 (21 May 2020) 20.1.11 (15 May 2020) 20.1.10 (11 May 2020) 20.1.9 (30 April 2020) 20.1.8 (16 April 2020) 20.1.7 (10 April 2020) 20.1.6 (2 April 2020) 20.1.5 (27 March 2020) 20.1.4 (20 March 2020) 20.1.3 (9 March 2020) 20.1.2 (28 February 2020) 20.1.1 (21 February 2020) 19.1.50 (7 February 2020) 19.1.49 (5 February 2020) 19.1.48 (29 January 2020) 19.1.47 (10 January 2020) 19.1.46 (6 January 2020) 19.1.45 (24 December 2019) 19.1.44 (20 December 2019) 19.1.43 (11 December 2019) 19.1.42 (6 December 2019) 19.1.41 (28 November 2019) 19.1.40 (12 November 2019) 19.1.39 (7 November 2019) 19.1.38 (31 October 2019) 19.1.37 (25 October 2019) 19.1.36 (21 October 2019) 19.1.35 (18 October 2019) 19.1.34 (11 October 2019) 19.1.33 (4 October 2019) 19.1.32 (20 September 2019) 19.1.31 (5 September 2019) 19.1.30 (29 August 2019) 19.1.29 (20 August 2019) 19.1.28 (14 August 2019) 19.1.27 (2 August 2019) 19.1.26 (26 July 2019) 19.1.25 (19 July 2019) 19.1.24 (11 July 2019) 19.1.23 (4 July 2019) 19.1.22 (1 July 2019) 19.1.21 (21 June 2019) 19.1.20 (7 June 2019) 19.1.19 (4 June 2019) 19.1.18 (31 May 2019) 19.1.17 (16 May 2019) 19.1.15 (9 May 2019) 19.1.14 (6 May 2019) 19.1.13 (25 April 2019) 19.1.12 (19 April 2019) 19.1.11 (16 April 2019) 19.1.10 (11 April 2019) 19.1.9 (5 April 2019) 19.1.8 (28 March 2019) 19.1.6 (22 March 2019) 19.1.5 (14 March 2019) 19.1.4 (8 March 2019) 19.1.3 (4 March 2019) 19.1.2 (28 February 2019) 19.1.1 (22 February 2019) 18.1.50 (27 February 2019) 18.1.49 (21 February 2019) 18.1.48 (18 February 2019) 18.1.47 (15 February 2019) 18.1.45 (13 February 2019) 18.1.44 (4 February 2019) 18.1.43 (1 February 2019) 18.1.42 (15 January 2019) 18.1.41 (13 December 2018) 18.1.40 (7 December 2018) 18.1.39 (29 November 2018) 18.1.38 (19 November 2018) 18.1.37 (15 November 2018) 18.1.36 (9 November 2018) 18.1.35 (2 November 2018) 18.1.34 (25 October 2018) 18.1.33 (18 October 2018) 18.1.32 (12 October 2018) 18.1.31 (2 October 2018) 18.1.30 (25  September 2018) 18.1.29 (13 September 2018) 18.1.28 (6 September 2018) 18.1.27 (30 August 2018) 18.1.26 (27 August 2018) 18.1.25 (9 August 2018) 18.1.24 (3 August 2018) 18.1.23 (26 July 2018) 18.1.22 (20 July 2018) 18.1.21 (6 July 2018) 18.1.20 (28 June 2018) 18.1.19 (21 June 2018) 18.1.18 (15 June 2018) 18.1.17 (14 June 2018) 18.1.16 (31 May 2018) 18.1.15 (17 May 2018) 18.1.14 (10 May 2018) 18.1.13 (7 May 2018) 18.1.12 (4 May 2018) 18.1.11 (27 April 2018) 18.1.10 (16 April 2018) 18.1.9 (12 April 2018) 18.1.8 (5 April 2018) 18.1.7 (2 April 2018) 18.1.6 (29 March 2018) 18.1.5 (22 March 2018) 18.1.4 (15 March 2018) 18.1.3 (8 March 2018) 18.1.2 (2 March 2018) 18.1.1 (22 February 2018) 17.1.45 (19 February 2018) 17.1.44 (8 February 2018) 17.1.43 (1 February 2018) 17.1.42 (25 January 2018) 17.1.41 (19 January 2018) 17.1.40 (11 January 2018) 17.1.39 (8 January 2018) 17.1.38 (18 December 2017) 17.1.37 (6 December 2017) 17.1.36 (24 November 2017) 17.1.35 (17 November 2017) 17.1.34 (10 November 2017) 17.1.33 (1 November 2017) 17.1.32 (25 October 2017) 17.1.31 (20 October 2017) 17.1.30 (13 October 2017) 17.1.29 (6 October 2017) 17.1.28 (28 September 2017) 17.1.27 (22 September 2017) 17.1.26 (14 September 2017) 17.1.25 (31 August 2017) 17.1.24 (24 August 2017) 17.1.23 (11 August 2017) 17.1.22 (10 August 2017) 17.1.21 (3 August 2017) 17.1.20 (28 July 2017) 17.1.19 (27 July 2017) 17.1.18 (21 July 2017) 17.1.17 (12 July 2017) 17.1.16 (30 June 2017) 17.1.15 (16 June 2017) 17.1.14 (12 June 2017) 17.1.13 (31 May 2017) 17.1.12 (26 May 2017) 17.1.11 (19 May 2017) 17.1.10 (15 May 2017) 17.1.9 (2 May 2017) 17.1.8 (18 April 2017) 17.1.7 (10 April 2017) 17.1.6 (31 March 2017) 17.1.5 (23 March 2017) 17.1.4 (20 March 2017) 17.1.3 (14 March 2017) 17.1.2 (3 March 2017) 17.1.1 (24 February 2017) 16.1.37 (24 February 2017) 16.1.36 (10 February 2017) 16.1.35 (1 February 2017) 16.1.34 (13 January 2017) 16.1.33 (3 January 2017) 16.1.32 (22 December 2016) 16.1.31 (9 December 2016) 16.1.30 (24 November 2016) 16.1.29 (14 November 2016) 16.1.28 (2 November 2016) 16.1.27 (28 October 2016) 16.1.26 (17 October 2016) 16.1.25 (9 October 2016) 16.1.24 (22 September 2016) 16.1.23 (14 September 2016) 16.1.22 (12 September 2016) 16.1.21 (26 August 2016) 16.1.20 (12 August 2016) 16.1.19 (5 August 2016) 16.1.18 (25 July 2016) 16.1.17 (15 July 2016) 16.1.16 (8 July 2016) 16.1.15 (30 June 2016) 16.1.14 (17 June 2016) 16.1.13 (10 June 2016) 16.1.12 (1 June 2016) 16.1.11 (23 May 2016) 16.1.10 (16 May 2016) 16.1.9 (9 May 2016) 16.1.8 (30 April 2016) 16.1.7 (25 April 2016) 16.1.6 (18 April 2016) 16.1.5 (8 April 2016) 16.1.4 (30 March 2016) 16.1.3 (10 March 2016) 16.1.2 (3 March 2016) 16.1.1 (24 February 2016) 15.1.41 (10 February 2016) 15.1.40 (26 January 2016) 15.1.39 (14 January 2016) 15.1.38 (7 January 2016) 15.1.37 (23 December 2015) 15.1.36 (11 December 2015) 15.1.35 (4 December 2015) 15.1.34 (28 November 2015) 15.1.32 (18 November 2015) 15.1.31 (16 November 2015) 15.1.30 (2 November 2015) 15.1.29 (30 October 2015) 15.1.28 (16 October 2015) 15.1.27 (8 October 2015) 15.1.26 (28 September 2015) 15.1.25 (22 September 2015) 15.1.24 (18 September 2015) 15.1.23 (9 September 2015) 15.1.22 (2 September 2015) 15.1.21 (25 August 2015) 15.1.20 (20 August 2015) 15.1.19 (18 August 2015) 15.1.18 (10 August 2015) 15.1.17 (3 August 2015) 15.1.16 (27 July 2015) 15.1.15 (10 July 2015) 15.1.14 (6 July 2015) 15.1.13 (19 June 2015) 15.1.12 (5 June 2015) 15.1.11 (20 May 2015) 15.1.10 (15 May 2015) 15.1.9 (8 May 2015) 15.1.8 (24 April 2015) 15.1.7 (21 April 2015) 15.1.6 (6 April 2015) 15.1.5 (30 March 2015) 15.1.4 (23 March 2015) 15.1.3 (16 March 2015) 15.1.2 (6 March 2015) 15.1.1 (27 February 2015) 3.5.39 (26 February 2015) 3.5.38 (23 February 2015) 3.5.37 (13 February 2015) 3.5.36 (9 February 2015) 3.5.35 (30 January 2015) 3.5.34 (16 January 2015) 3.5.33 (12 January 2015) 3.5.32 (18 December 2014) 3.5.31 (5 December 2014) 3.5.30 (28 November 2014) 3.5.29 (21 November 2014) 3.5.28 (16 November 2014) 3.5.27 (7 November 2014) 3.5.26 (31 October 2014) 3.5.25 (23 October 2014) 3.5.24 (10 October 2014) 3.5.23 (2 October 2014) 3.5.22 (9 September 2014) 3.5.21 (3 September 2014) 3.5.20 (28 August 2014) 3.5.19 (21 August 2014) 3.5.18 (1 August 2014) 3.5.17 (25 July 2014) 3.5.16 (8 July 2014) 3.5.15 (8 July 2014) 3.5.14 (24 June 2014) 3.5.13 (13 June 2014) 3.5.12 (10 June 2014) 3.5.11 (30 May 2014) 3.5.10 (22 May 2014) 3.5.9 (12 May 2014) 3.5.8 (30 April 2014) 3.5.7 (22 April 2014) 3.5.6 (15 April 2014) 3.5.5 (1 April 2014) 3.5.4 (21 March 2014) 3.5.3 (14 March 2014) 3.5.2 (11 March 2014) 3.5.1 (7 March 2014) 3.4.28 (24 February 2014) 3.4.27 (29 January 2014) 3.4.26 (8 January 2014) 3.4.25 (18 December 2013) 3.4.24 (2 December 2013) 3.4.23 (22 November 2013) 3.4.22 (15 November 2013) 3.4.21 (14 November 2013) 3.4.20 (8 November 2013) 3.4.19 (1 November 2013) 3.4.18 (30 October 2013) 3.4.17 (29 October 2013) 3.4.16 (11 October 2013) 3.4.15 (4 October 2013) 3.4.14 (25 September 2013) 3.4.13 (20 September 2013) 3.4.12 (11 September 2013) 3.4.11 (9 September 2013) 3.4.10 (26 August 2013) 3.4.9 (14 August 2013) 3.4.8 (12 August 2013) 3.4.7 (5 August 2013) 3.4.6 (26 July 2013) 3.4.5 (22 July 2013) 3.4.4 (9 July 2013) 3.4.3 (21 June 2013) 3.4.2 (14 June 2013) 3.4.1 (7 June 2013) 3.3.8 (24 May 2013) 3.3.7 (17 May 2013) 3.3.6 (27 April 2013) 3.3.5 (22 April 2013) 3.3.4 (15 April 2013) 3.3.3 (2 April 2013) 3.3.2 (22 March 2013) 3.3.1 (15 March 2013) 3.2.21 (8 March 2013) 3.2.20 (6 March 2013) 3.2.19 (5 March 2013) 3.2.18 (4 March 2013) 3.2.17 (20 February 2013) 3.2.16 (11 February 2013) 3.2.15 (28 January 2013) 3.2.14 (23 January 2013) 3.2.13 (23 January 2013) 3.2.12 (22 January 2013) 3.2.11 (11 January 2013) 3.2.10 (24 December 2012) 3.2.9 (11 December 2012) 3.2.8 (4 December 2012) 3.2.8 (4 December 2012) 3.2.7 (3 December 2012) 3.2.6 (19 November 2012) 3.2.5 (6 November 2012) 3.2.4 (26 October 2012) 3.2.3 (17 October 2012) 3.2.2 (12 October 2012) 3.2.1 (11 October 2012) 3.1.16 (5 October 2012) 3.1.15 (3 October 2012) 3.1.14 (27 September 2012) 3.1.13 (18 September 2012) 3.1.12 (13 September 2012) 3.1.11 (7 September 2012) 3.1.10 (1 September 2012) 3.1.9 (13 August 2012) 3.1.8 (7 August 2012) 3.1.7 (2 August 2012) 3.1.6 (24 July 2012) 3.1.5 (11 July 2012) 3.1.4 (10 July 2012) 3.1.3 (2 July 2012) 3.1.2 (15 June 2012) 3.1.1 (6 June 2012) 3.0.10 (23 May 2012) 3.0.9 (16 May 2012) 3.0.8 (9 May 2012) 3.0.7.9 (29 April 2012) 3.0.7.8 (24 April 2012) 3.0.7.7 (13 April 2012) 3.0.7.6 (30 March 2012) 3.0.7.5 (16 March 2012) 3.0.7.4 (8 March 2012) 3.0.7.3 (5 March 2012) 3.0.7.2 (1 March 2012) 3.0.7.1 (29 February 2012) 3.0.7 (13 February 2012) 3.0.6.6 (23 January 2012) 3.0.6.4 (10 January 2012) 3.0.6.3 (27 December 2011) 3.0.6.2 (19 December 2011) 3.0.6.1 (12 December 2011) 3.0.6 (1 December 2011) 3.0.5.5 (21 November 2011) 3.0.5.4 (8 November 2011) 3.0.5.3 (17 October 2011) 3.0.5.2 (23 September 2011) 3.0.5 (10 September 2011) 3.0.4.4 (9 September 2011) 3.0.4.3 (29 August 2011) 3.0.4.2 (4 August 2011) 3.0.4.1 (3 August 2011) 3.0.4 (30 July 2011) 3.0.3.3 (22 July 2011) 3.0.3.2 (14 July 2011) 3.0.3.1 (8 July 2011) 3.0.3 (1 July 2011) 3.0.2.1 (27 June 2011) 3.0.2 (17 June 2011) 3.0.1.1 (3 June 2011) 3.0.1 (27 May 2011) 3.0.0 (13 May 2011) 2.9.9.2 (6 May 2011) 2.9.9.1 (4 May 2011) 2.9.9 (30 April 2011) 2.9.8 (15 April 2011) 2.9.7.1 (1 April 2011) 2.9.7 (25 March 2011) 2.9.6.9 (1 March 2011) 2.9.6.8 (26 February 2011) 2.9.6.7 (31 January 2011) 2.9.6.6 (27 January 2011) 2.9.6.5 (7 January 2011) 2.9.6.4 (18 December 2010) 2.9.6.3 (28 November 2010) 2.9.6.2 (23 November 2010) 2.9.6.0 (17 November 2010) 2.9.5.9 (12 November 2010) 2.9.5.8 (5 November 2010) 2.9.5.7 (29 October 2010) 2.9.5.6 (26 October 2010) 2.9.5.5 (20 October 2010) 2.9.5.4 (11 October 2010) 2.9.5.3 (4 October 2010) 2.9.5.2 (1 October 2010) 2.9.5.1 (27 September 2010) 2.9.4 (14 September 2010) 2.9.3 (25 May 2010) 2.9.2 (7 May 2010) 2.8.9 (19 February 2010) 2.8.6 (22 December 2009) 2.8.5 (4 December 2009) 2.8.4 (3 December 2009) 2.8.3 (11 November 2009) 2.8.2 (10 November 2009) 2.8.0 (29 October 2009) 2.7.0 (23 September 2009) 2.6.0 (24 July 2009) 2.5.0 (16 May 2009) 2.4.0 (30 March 2009) 2.3.0 (27 January 2009) 2.0.0 (1 September 2008) 1.5.0 (18 May 2008) 1.4.0 (12 March 2008) How to Report an Issue? How to generate a thread dump from within DVT Eclipse? How to generate a thread dump from outside DVT Eclipse? How to generate a thread dump for Verissimo & Specador running in batch mode? Legal Notices Third Party Licenses Installation Checklist Back to top",
    "section_path": [],
    "tokens": 4756,
    "source": "scraped"
  },
  {
    "id": "784ea7d4-f16d-4521-8c49-667930f87dba",
    "title": "Macros and Quick Macros Views | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/macros-support/macros-and-quick-macros-views.html",
    "content": "Macros and Quick Macros Views | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Macros and Quick Macros Views The Macros View and Quick Macros View present all the macros in the project and allow you to quickly locate a macro definition in code. Macro Expansion Reminders (TODO Markers) Back to top",
    "section_path": [],
    "tokens": 73,
    "source": "scraped"
  },
  {
    "id": "71030413-873b-4be0-a9a9-9119b29f5d54",
    "title": "Supply Network Diagram | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/low-power-format-support/supply-network-diagram.html",
    "content": "Supply Network Diagram | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Supply Network Diagram The Supply Network Diagram shows all the power domains and power switches, and how they are connected via supply nets and ports. To generate the Supply Network Diagram : Click the Generate Diagram toolbar button and choose Supply Network Diagram Right-click on the top instance of your design in the Design Hierarchy View and choose Show Supply Network Diagram Tip To visualize a power domain and all its connections, from the Schematic Diagrams , Flow Diagrams and Block Diagrams right click on an instance included in the extent of the power domain and choose Show in Supply Network Diagram . Tip To quickly jump from the Supply Network Diagram the control signal of a power switch, select the control port, right click and choose Go to Source . Note For readability, the path to control signals is shortened in the diagram labels. Select the control port to see its full path in the Inspect View. Low Power Format Support Export HTML/PDF Documentation Back to top",
    "section_path": [],
    "tokens": 201,
    "source": "scraped"
  },
  {
    "id": "e4251bed-6340-481d-aacd-fd368b0e1fde",
    "title": "C/C++ support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/c-support.html",
    "content": "C/C++ support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide C/C++ support C and C++ support is provided on top of the C Development Tooling Eclipse (CDT) plugin. DVT provides the following features on top of CDT: Out of the box C/C++ project configuration by reusing Build Configurations C/C++ project creation through the DVT Command Line Interface DVT Auto-Linked C/C++ source files and headers located outside the project SystemVerilog DPI Hyperlinks C and C++ types in the DVT Types View C and C++ compiled files in the DVT Compile Order view C and C++ preprocessing symbols in the DVT Macros View Built-in Content Filters for common libraries (C/C++ system headers, SystemC, PSS C) Installation The CDT plugin is already bundled in DVT KIT distributions, and has to be enabled using the dvt_kit_installer.sh script: dvt_kit_installer.sh install CDT This command installs the CDT plugin and the DVT CDT Integration plugin as well. Project Natures Right click on a project and choose Change DVT Nature : The C/C++ Language nature enables basic CDT integration features: project configuration and SystemVerilog DPI cross-linking when the SystemVerilog nature is also enabled The C/C++ Language Extended nature enables advanced features like C/C++ content shown in the DVT views Project Build For a DVT project with any C/C++ Language nature, the build process includes a scan for C/C++ files and CDT re-indexing. Note By default the CDT Codan, the code analysis engine which performns semantic checks in C and C++ code, is not active. Using the +dvt_run_codan+FULL+INCR directive you can specify when CDT Codan analysis should be performed: FULL - at full build, INCR - at incremental build (for example when saving a file). During full build, DVT collects the following C/C++ specific directives from your build configuration file and uses them to configure CDT and to scan for all included C/C++ files: -I -D -L -l -imacros -include The gcc args mentioned above are also collected from the strings passed to the following build configuration directives: -CFLAGS -ccflags -ccargs The C/C++ sources located outside the project directory are automatically linked inside the project under the DVT Auto-Linked folder. The C/C++ sources located inside the project but not included by the C/C++ top files specified in the build configuration are automatically excluded from the CDT build. The following DVT specific build configuration directives are available: Directive Description +dvt_gcc+</path/to/gcc_executable> Specify location of GCC executable (used when scanning for included C/C++ files and injected in the CDT project configuration). +dvt_gcc_args+\u00e2\u0080\u009dargs string\u00e2\u0080\u009d Specify extra arguments for the GCC executable (used when scanning for included C/C++ files and injected in the CDT project configuration). +dvt_gcc_timeout+<timeout> Timeout in seconds when running GCC. Set 0 to disable timeout. Default: 40 seconds. Application Notes Design Elaboration Back to top",
    "section_path": [],
    "tokens": 476,
    "source": "scraped"
  },
  {
    "id": "4ea124bc-885b-4348-8ec8-74c12f03b4b7",
    "title": "Environment Variables | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/environment-variables.html",
    "content": "Environment Variables | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Environment Variables To define an environment variable you can use the following syntax: + dvt_setenv +< NAME > [ = VALUE ] Examples +dvt_setenv+UVM_HOME=/uvm/uvm-1.1 +dvt_setenv+SPECMAN_PATH=$SPECMAN_PATH:/path/to/my/vips To use the value of an environment variable called ENV_VAR you can use any of the following notations: UNIX: $ENV_VAR or ${ENV_VAR} Windows: %ENV_VAR% Makefile: $(ENV_VAR) TCL: $::env(ENV_VAR) or $env(ENV_VAR) Environment variables, either from the parent shell or explicitly defined, can be used to specify: top files directives that take a path as an argument, for example +incdir+ value for defines When an environment variable is not defined, but it is used, the behavior is as follows: for the value of a define directive, the define value is left as-is for top files and directives that take a path as an argument, an error is signaled and such top files and directives are ignored when used inside the value of an environment variable, it is expanded to the empty string Environment variables are visible to the DVT parsers, for example when used in the e language import statements. Environment variables are propagated to the external tools launched from DVT, for example by using Run Configurations or External Builders. When an environment variable is used inside a build file, only the +dvt_setenv+ directives above the usage line are taken into account. Implementation note The Dot \u00e2\u0080\u0098.\u00e2\u0080\u0099 segment in a path denotes the current directory, which is solved when the path is used, for example to specify a top file or incdir.\nIt is not solved when defining an environment variable.\nSee the example below: -------- In default.build -------- +dvt_setenv+MYVAR=.   // $MYVAR has the value '.' until used to specify a path $MYVAR/top1.e         // Equivalent with $DVT_PROJECT_LOC/top1.e -F other/file.f -------- In other/file.f -------- // $MYVAR is used here to specify a path, '.' shall be solved to $DVT_PROJECT_LOC/other/ $MYVAR/top2.e         // Equivalent with $DVT_PROJECT_LOC/other/top2.e Predefined environment variables Variable Value DVT_PROJECT_LOC Absolute path of the project directory. Comments Including Other Argument Files Back to top",
    "section_path": [],
    "tokens": 358,
    "source": "scraped"
  },
  {
    "id": "c1c030d7-287c-46ff-a160-35d181fe575e",
    "title": "Quick Assist Proposals | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/index.html",
    "content": "Quick Assist Proposals | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Quick Assist Proposals Quick assists provide fast access to code refactoring operations. To see the list of available Quick Assist Proposals simply press Ctrl + 1 . Use the Up and Down arrows to select a proposal, then press Enter to apply it. The proposals depend on the editing context. For example, to split a function into \u00e2\u0080\u0098extern\u00e2\u0080\u0099 prototype and implementation, place the editor cursor on the function declaration and press Ctrl + 1 . To extract a block of actions to a new method, select the block and press Ctrl + 1 . Tip Right - Click in the editor and go to the Refactor submenu to see all refactoring operations. Bind Method Call Arguments by Name Bind Method Call Arguments by Position Connect Instance Ports by Name Connect Instance Ports by Position Collapse Macro Expand Macro Expand .* Port Connections Extract to Variable Extract to Method Extract to Module Move Selection to New File Join Extern and Implementation Split into Extern and Implementation Rename in File Waive Compilation Problems Bind Method Call Arguments by Name Back to top",
    "section_path": [],
    "tokens": 213,
    "source": "scraped"
  },
  {
    "id": "1cb52086-6fad-4256-852f-4d76af4882a3",
    "title": "What are the most common shortcuts in DVT? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/what-are-the-most-common-shortcuts-in-dvt.html",
    "content": "What are the most common shortcuts in DVT? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide What are the most common shortcuts in DVT? If you type Ctrl + Shift + L a list with all available Eclipse shortcuts will pop-up. For more information: Common Shortcuts How do I revert to a previous version? How does DVT integrate with emacs? Back to top",
    "section_path": [],
    "tokens": 85,
    "source": "scraped"
  },
  {
    "id": "ef12541a-7670-42f8-9b86-d103db618642",
    "title": "Install DVT Using the Update Site | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/installation/update-site.html",
    "content": "Install DVT Using the Update Site | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Install DVT Using the Update Site To install DVT using the update site you must first make sure the Eclipse and Java versions are up to date. Eclipse Version You must use Eclipse 4.6 or newer . To check the Eclipse version use menu Help \u00e2\u0080\u00a3 About Eclipse Platform . In the snapshot the Eclipse version is 4.6. Java Version You must use Java 1.8 or newer . To check the Java version use menu Help \u00e2\u0080\u00a3 About Eclipse Platform , then click on Configuration Details and select Configuration tab. In the configuration look for java.runtime.version property. DVT Plug-in To check that the DVT plugin is installed use menu Help \u00e2\u0080\u00a3 About Eclipse Platform . You should see the DVT button. To see more details, for example the version, click the button. Install DVT Using a pre-packed Distribution Set the License On this page Eclipse Version Java Version DVT Plug-in Back to top",
    "section_path": [],
    "tokens": 189,
    "source": "scraped"
  },
  {
    "id": "4c9200b4-484a-411d-8784-671469b99a9a",
    "title": "Design Diagrams | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/diagrams/design-diagrams.html",
    "content": "Design Diagrams | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Design Diagrams Design Diagrams help you inspect and document the structure of a design element. You can create a design diagram in one of the following ways: Right + Click in the Types View or the Design Hierarchy View and select Show Diagram . Place the cursor over a type, instance or state variable in the editor, Right - Click and select Show > Diagram . Schematic Diagrams By default Show Diagram opens a schematic diagram that presents the internal structure: ports, sub-instances, combinational and sequential logic and connections. You can draw a nested schematic by increasing the depth from the diagram preferences. Flow Diagrams A flow diagram presents a high level view of internal connectivity. Multiple connections from one instance to another are collapsed in a single directional edge. Transform a schematic into a flow diagram using the preferences from the Diagram Toolbar . Block Diagrams A block diagram presents the ports. Transform a schematic into a block diagram using the preferences from the Diagram Toolbar . Finite-State Machine Diagrams Show Diagram on a state variable inside a module or entity will generate a Finite-State Machine (FSM) diagram. States and transitions are automatically detected in the enclosing scope by analyzing all the assignments and conditions in which the state variable is used. Multiple transitions between the same two states are merged into a single one with multiple conditions. Next state variables are supported. The \u00e2\u0080\u009cone-hot\u00e2\u0080\u009d case item pattern is supported. Method call transitions are not supported. The initial state is colored gray. Selecting any state or transition will highlight the previous and next states differently. You can change the look and feel of the diagram using the preferences from the Diagram Toolbar or you can change the default preferences from Windows \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Diagrams \u00e2\u0080\u00a3 FSM Diagrams . Graph Direction The direction of the diagram. Placement Strategy The algorithm used for placing blocks and edges. Opposite In/Out Edges for For which states should incoming and outgoing edges be constrained to opposite sides? The default is All States except Initial . Initial State Position The position of the initial state relative to the graph direction. The default is First . Show Explicit Loopback Edges Show explicit transitions to the same state as a loopback edge. Transition Labels The label displayed on transitions. It can be the Index of the transition or the Condition (merged transitions will have multiple conditions). The default is None . Hide Names in Conditions A list of signal names that will be filtered out of conditions. Strict text matching is used. You can inspect transitions in the diagram table. Select any entry in the table and the transition will be highlighted in the diagram. Any selection in the diagram will highlight the corresponding elements in the table. The conditions for all transitions are presented in the last column. Diagram Filters Note Filters only apply to Schematic and Flow diagrams. You can customize the diagram using the Filters button in the diagram editor toolbar. Use the drop-down menu at the top of the dialog to select from available filters. Use the buttons in the top-right corner of the dialog to create, duplicate, or delete the current filter. Use the checkboxes at the bottom of the dialog to further clean up the diagram. A filter is defined using filter rules (one per line). The general form of a filter rule is: command element_kinds matching regex [ using color_name_or_code ] command is one of hide , show , or color element_kinds is a comma-separated list of kinds. The available kinds are blocks , instances , types , signals , ports , input ports , output ports , and inout ports regex is a regular expression that matches the relevant diagram element labels color_name_or_code is a color specified by name , 6- or 3-digit hexadecimal code , comma-separated decimal RGB code or the keyword random . This is relevant only for color rules. Tip You can use content assist to write the filters ( CTRL + Space ). To apply a filter rule only to elements under a specific instance, you must provide the relevant path in the regex section of the rule: a path must always begin with the name of the top instance (or module) in the diagram (if instance is under top_instance , then top_instance/instance/\u00e2\u0080\u00a6 is valid, while instance/\u00e2\u0080\u00a6 is not) a path consists only of names of instances (with the possible exception of the top module) and \u00e2\u0080\u009c / \u00e2\u0080\u009d (i.e. you can\u00e2\u0080\u0099t use the module name in a path except if the diagram top is a module, and not an instance) each level is separated from the previous using \u00e2\u0080\u009c / \u00e2\u0080\u009d (valid: top_instance/inst1/inst2/\u00e2\u0080\u00a6 ; not valid: top_instance.inst1.inst2\u00e2\u0080\u00a6 ) regular expressions may be used in the path section of a rule (for example, top_instance/.*/some_instance ) if the regex contains \u00e2\u0080\u009c / \u00e2\u0080\u009d, everything before the last \u00e2\u0080\u009c/\u00e2\u0080\u009d is the path , the rest is used to match the relevant diagram elements (in the following example, the bolded text is the path: top_instance/.*/inst1/ .*clk.*) if the regex does not contain \u00e2\u0080\u009c / \u00e2\u0080\u009d, it applies to all elements of the appropriate element_kinds Tip You can hide the hierarchy under an instance with the filter \u00e2\u0080\u009chide blocks matching path/to/instance/.* \u00e2\u0080\u009d. With the predefined filter in the image above, the resulting diagram will be similar to the following: Design Diagram Actions Design Diagram actions are available in the Right - Click context menu. Action Diagram kind Element kind Description Go to Source Block Flow Schematic FSM Supply Network ALL Jump to the selected element source code (instances, state values, ports, power domains, connections, state transitions). Go to Declaration Flow Schematic Instance Jump directly to the module or entity declaration. Step into Flow Schematic Instance Show the diagram for the selected instance. Step out Flow Schematic Instance Show the diagram one level above the current diagram top (if available). Expand Schematic Instance Show the sub-instances of the selected instance, while keeping the initial diagram. Collapse Schematic Instance Hide all the sub-instances and signals from within the selected instance. Show Sources Schematic Instance Logic Gate Port Show the instances that drive the selected port. Note You can press S + Left - Click to trigger this action. Show Destinations Schematic Instance Logic Gate Port Show the instances that load from the selected port. Note You can press D + Left - Click to trigger this action. Delete Flow Schematic Instance Logic Gate Connection Port Delete the selected element. Note You can press DEL to trigger this action. Show Connections Flow Schematic Instance Logic Gate Connection Port Show all connections of the selected instances with other instances; when triggering this operation on a signal, the diagram shows that signal and all the instances it connects; when triggering this operation on a port, the diagram shows that port and all the instances connected through it. Note You can press C + Left + Click to trigger this action. Show Connections Between Flow Schematic Instance Show all connections between the selected instances, passing through logic. Trace Drive/Load/Drive and Load Schematic Connection Start a trace operation for the currently selected signal (see Trace Connections ). Show in Supply Network Diagram Block Flow Schematic Instance Generates the Supply Network Diagram, with focus on the current selected Power Domain Supply Network Diagram . Note When performing an action on an instance, signal or port, a purple highlight contour is added to it. Breadcrumb Navigation Bar The Design Breadcrumb Navigation Bar appears horizontally on top of source code editors and Design Diagrams . For source code editors, it displays the path to the design element (module or entity) under the cursor starting from the design top. For Design Diagrams , it displays the path to the diagram\u00e2\u0080\u0099s design element. The design hierarchy path is automatically tracked by DVT, for example when navigating from the Design Hierarchy View to source code, when using hyperlinks, when generating diagrams and so on. Editor : Click an instance to jump to the design element definition. Diagram : Click an instance to generate the design element diagram. Click the arrow to the side of a design element to see its child instances. Filter the list of child instances using the quick search box. Editor : Click a child instance to jump to the design element definition. Diagram : Click a child instance to generate the design element diagram. Hover an instance to get more information, for example its design element name or power domain information. A design element may have multiple instances with different paths in the design hierarchy. Click the Select Instance Path button to choose from the available paths. Right click on an instance > Open Instance to jump to its definition. Right click on an instance > Show Diagram to generate its design diagram. Right click on an instance > Reveal in Design Hierarchy to focus it in the Design Hierarchy View. Right click on an instance > Copy Hierarchy Path to copy its hierarchical path. Low Power Format Support DVT analyzes power format files (either UPF or CPF) and presents power domain information in: Power Domain View Design Hierarchy View - using labels and/or colors Schematic Diagrams , Flow Diagrams and Block Diagrams - using labels and/or colors Breadcrumb Navigation Bar - using colors and tooltips Tooltips in the Verilog and VHDL Editors Inspect View Power format project nature In order to work with power format files, you have to enable the Power Format nature for your project. In the New DVT Project Wizard check UPF/CPF For an existing project, right-click on it in the Project Explorer View , choose Change DVT Nature then check UPF/CPF The Power Format nature works only in conjunction with at least one of Verilog or VHDL natures. Power format files Use one of the following build configuration directives to specify a power format file to be analyzed: Compatibility mode Directive ANY +dvt_upf+<upf_file> +dvt_cpf+<cpf_file> ius.irun -lps_1801 <upf_file> -lps_cpf <cpf_file> vcs.vloganvcs.vhdlgan -upf <upf_file> questa.vlogquesta.vcom -pa_upf <upf_file> Power format analysis At full build, after elaborating the design, DVT analyzes (interprets) the provided power format file and elaborates the power domains.\nTCL and power domain errors are detected and reported during this phase. All analyzed power format files are decorated with a blue bullet.\nFiles outside the project directory are automatically linked under the DVT Auto-Linked folder. Note By default, the working directory of the TCL interpreter is the DVT project directory.\nTo change it, use +dvt_compilation_root within the invocation where the power format file is specified, for example: + dvt_init + dvt_compilation_root +/ path / to / new / compilation / root + dvt_upf / path / to / file . upf Note Environment variables defined using +dvt_setenv within the invocation where the power format file is specified are available in the TCL $::env array. Tip To print power format analysis debug information in the DVT Build Console add this directive to your build configuration file: +dvt_pf_debug Tip If a file called dvt_pre_interpret.tcl exists in any of the the User and Common Settings Location it will be interpreted before the provided power format file. If several such files exist, they will all be interpreted, in precedence order of the User and Common Settings Locations. This mechanism allows you to define TCL variables or functions for debugging or deployment purposes. Incremental power format analysis Whenever you change a power format file which was analyzed during the full build phase, DVT triggers a power format file analysis and a power domain elaboration. Whenever you change a design file (Verilog or VHDL) which was compiled during the full build phase, DVT triggers a power domain elaboration (analysis of power format files is not performed). The following Common Power Format (CPF) and Unified Power Format (UPF) commands are supported by DVT: CPF up to Version 2.1 create_power_domain -name <power_domain_name> -default -instances <instance_list> -exclude_instances <instance_list> set_hierarchy_separator <separator_character> set_instance <instance> include <cpf_file> UPF (IEEE Std 1801\u00e2\u0084\u00a2) up to Version 3.0 create_power_domain <power_domain_name> -elements <instance_list> -exclude_elements <instance_list> -include_scope -scope <scope> upf_version <version> set_scope <scope> load_upf <upf_file> -scope <scope> -version <version> Supply Network Diagram The Supply Network Diagram shows all the power domains and power switches, and how they are connected via supply nets and ports. To generate the Supply Network Diagram : Click the Generate Diagram toolbar button and choose Supply Network Diagram Right-click on the top instance of your design in the Design Hierarchy View and choose Show Supply Network Diagram Tip To visualize a power domain and all its connections, from the Schematic Diagrams , Flow Diagrams and Block Diagrams right click on an instance included in the extent of the power domain and choose Show in Supply Network Diagram . Tip To quickly jump from the Supply Network Diagram the control signal of a power switch, select the control port, right click and choose Go to Source . Note For readability, the path to control signals is shortened in the diagram labels. Select the control port to see its full path in the Inspect View. Sequences UML Diagrams UVM Components Diagrams On this page Schematic Diagrams Flow Diagrams Block Diagrams Finite-State Machine Diagrams Diagram Filters Design Diagram Actions Breadcrumb Navigation Bar Low Power Format Support Supply Network Diagram Back to top",
    "section_path": [],
    "tokens": 2237,
    "source": "scraped"
  },
  {
    "id": "eae61a0c-b662-459d-aa01-357973cfaf0e",
    "title": "Extract to Module | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/extract-to-module.html",
    "content": "Extract to Module | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Extract to Module A fragment of a module can be automatically extracted and encapsulated into a new instance. The fragment must be a contiguous region containing only instances, always blocks and assignments. Select the region in the editor, press Ctrl + 1 , select Extract to module from the list of quick assist proposals and press Enter . The selected piece of code will be moved to a new module in a new file. Fill in the name of the new module and file. The initial selection is replaced with an instance of the new module: The ports of the new module are automatically computed and connected in the instantiation. Note Implementation notes the new file is `included on the line above the declaration of the initial module signals which are not referenced anywhere outside the selection will be marked with a // FIXME after the extraction currently busses are propagated through a single port even if accessed through bit selects; in such a case, a // FIXME comment can help you easily identify the unique bit selects which you might consider propagating through distinct ports Tip You can also Right - Click in the editor and go to Refactor > Extract to module to trigger this functionality. Extract to Method Move Selection to New File Back to top",
    "section_path": [],
    "tokens": 252,
    "source": "scraped"
  },
  {
    "id": "2bbbf362-ba7c-4793-8387-a7aacda2ceac",
    "title": "Autoinstance Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/module-automatic-instantiation/autoinstance-using-autocomplete.html",
    "content": "Autoinstance Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Autoinstance Using Autocomplete You need to type the first letters of the module name, then press Ctrl + Space three (3) times. You can recognize module instances by their icon, it looks like a chip with ports ready to be glued in. You can customize what gets generated from menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Editor \u00e2\u0080\u00a3 Content Assist in the Auto-instantiation section. Autoinstance of library modules For performance reasons, only the modules which are actually used in the design are compiled from -y libdirs and -v libfiles. However, DVT can help you instantiate any of the available library modules: When picking a library module auto-instance proposal, the selected module is first compiled and then the instance is computed and inserted in code. Note Because only the libdirs and libfiles which are actually used in the design are scanned at compile time, the list of auto-instantiation proposals may contain an entry to discover modules in unused libraries. Module Automatic Instantiation Autoinstance Using Drag and Drop Back to top",
    "section_path": [],
    "tokens": 204,
    "source": "scraped"
  },
  {
    "id": "efd045fa-2245-4664-a096-6f0a16ccc174",
    "title": "UVM Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/index.html",
    "content": "UVM Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Support Runtime UVM Configuration Queries Static UVM Configuration Queries UVM Browser UVM Compliance Review UVM Content Filters UVM Field Editor Triggering Interface Problems Tips UVM Runtime Elaboration UVM Sequence Tree UVM Smart Log UVM Templates UVM Verification Hierarchy OVM to UVM Migration Triggering Preferences Review changes OVM Templates Runtime UVM Configuration Queries Back to top",
    "section_path": [],
    "tokens": 88,
    "source": "scraped"
  },
  {
    "id": "3e6707e9-8fe1-40a7-9da9-35743237965a",
    "title": "Whitespace | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-formatting/whitespace.html",
    "content": "Whitespace | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Whitespace Trim end of line whitespace (ro.amiq.vlogdt/format.whitespace.trim_end_of_line) - When enabled, end of line whitespace is deleted. Before After Trim Whitespace Lines (ro.amiq.vlogdt/format.whitespace.trim_whitespace_line) - When enabled, whitespace line are deleted. Before After Compact whitespace groups (ro.amiq.vlogdt/format.whitespace.compact) - When enabled, consecutive whitespace characters are trimmed to a single space character. It does not affect indentation, that is the whitespace at the beginning of a line is not affected by this option. Before After Compact consecutive empty lines (ro.amiq.vlogdt/format.whitespace.compact_consecutive_empty_lines) - When enabled, consecutive empty lines are compacted into groups of lines whose number is less than or equal to a specified value. It does not affect the empty lines inside multi-line comments. Maximum number of consecutive empty lines (ro.amiq.vlogdt/format.whitespace.maximum_nof_consecutive_empty_lines) - Consecutive empty lines are compacted when their number exceeds this value. Before After (Preference is set to \u00e2\u0080\u009c1\u00e2\u0080\u009d) Add whitespace before (ro.amiq.vlogdt/format.whitespace.add_before) - Space separated list of tokens to add whitespace before. Before After (\u00e2\u0080\u009c=\u00e2\u0080\u009d token) Add whitespace after (ro.amiq.vlogdt/format.whitespace.add_after) - Space separated list of tokens to add whitespace after. Before After (\u00e2\u0080\u009c=\u00e2\u0080\u009d token) Remove new line before (ro.amiq.vlogdt/format.whitespace.remove_nl_before) - Space separated list of tokens to remove new lines before. Before After (\u00e2\u0080\u009c=\u00e2\u0080\u009d token) Remove new line after (ro.amiq.vlogdt/format.whitespace.remove_nl_after) - Space separated list of tokens to remove new lines after. Before After (\u00e2\u0080\u009c=\u00e2\u0080\u009d token) Code Formatting Indentation Back to top",
    "section_path": [],
    "tokens": 248,
    "source": "scraped"
  },
  {
    "id": "5b3c5a1d-9a41-4ab8-8bef-dbd5861af923",
    "title": "IBM Clearcase Plugin | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/ibm-clearcase-plugin.html",
    "content": "IBM Clearcase Plugin | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide IBM Clearcase Plugin It is not recommended to add new elements as this might result in unexpected behavior (existing files can be lost/renamed, new files might be created). When working over a slow server connection, the Clearcase Plugin might report errors like: Exception in thread \u00e2\u0080\u009cClearCaseDialogProgressMechanism\u00e2\u0080\u009d org.eclipse.jface.util.Assert$AssertionFailedException: Assertion failed: An operation is already in progress. Save could not be completed Non existing package mti_fli Back to top",
    "section_path": [],
    "tokens": 100,
    "source": "scraped"
  },
  {
    "id": "71b57f84-783b-48af-b940-0a53ac903561",
    "title": "dvt_cli.sh | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/command-line-interface/dvt_clish.html",
    "content": "dvt_cli.sh | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide dvt_cli.sh With this script you can send commands to a running DVT from the terminal. If no running DVT instance is detected in the specified workspace, a new one is opened. Command Line Interface Syntax Back to top",
    "section_path": [],
    "tokens": 69,
    "source": "scraped"
  },
  {
    "id": "7932b16f-29ae-420a-8a72-df76d236127d",
    "title": "Rename File | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/rename-file.html",
    "content": "Rename File | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Rename File Renaming a file will automatically update its references across the project, such as include directives . There are multiple ways to perform this operation. From the Project Explorer Right click on a file and select Rename\u00e2\u0080\u00a6 Tip You can also press F2 after selecting a file. Inside an Editor Place your cursor inside the editor, Right click and then select Refactor > Rename File to rename the current file . Place your cursor on an included file name, Right click and then select Refactor > Rename File to rename the included file . You will be prompted to choose a new name for the selected file. Click OK to perform the refactoring operation, or Preview to see the changes that are about to be performed in the source code. In the Preview page you can select which changes will be performed, and then click Finish . (1) You can select a file/change to see the source differences produced by the refactoring. (2) Uncheck a file/change to prevent those changes from being applied. Tip Matches hidden inside a macro call cannot be automatically renamed.\nInstead, DVT will insert a FIXME comment above the macro call to indicate that it should be refactored by hand. (1) These matches are marked with the tag Inside Macro . (2) You can apply a filter to list only this type of matches. Rename Port Across the Design Hierarchy Bind Method Call Arguments by Name Back to top",
    "section_path": [],
    "tokens": 276,
    "source": "scraped"
  },
  {
    "id": "0cc30914-20c8-4420-a51d-9c2874052f99",
    "title": "Smart Log | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/external-tools-integration/smart-log.html",
    "content": "Smart Log | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Smart Log For any invocation you can either use predefined filter sets for specific tools, or define your own filters and style maps in order to view the simulation output like the one below. See also Smart Log - Filters Smart Log - Hyperlinks Smart Log - Styles Run Configurations Smart Log - Filters To define a new filter for a DVT Generic run configuration go to the Filters Tab, click New\u00e2\u0080\u00a6 and specify filter parameters. The main filter parameters are: Name - The name of the filter Severity - The severity of the filter. Pattern - The filter pattern.  Use ${file} to indicate a file hyper-link, and ${line} to indicate the line to jump to.  Use (?<TAG_NAME>) to tag a group that will be used to randomly or explicitly assign a style (green bold for example - see Smart Log - Styles ). In the Filters Tab you can also set other parameters such as: The maximum number of characters per line ( 1 ) The maximum number of consecutive lines ( 2 ) Whether links should jump to resources from the current working set ( 5 ) You can browse through predefined filters to see more examples ( 3 ). You can also add a filter pattern for your console title ( 4 ). This should contain capturing groups whose contents will be appended to the console title. For example the pattern in the image above: \u00e2\u0080\u009cDVT_CONSOLE_TITLEs+(w+)\u00e2\u0080\u009d will append  to the console title when it will match a text like \u00e2\u0080\u009cDVT_CONSOLE_TITLE my_title\u00e2\u0080\u009d in the console output. Smart Log - Hyperlinks Using the predefined filters enables you access to hyperlinks for files and also for some error codes of certain simulators. By clicking on a hyperlinked error code a dialog pops-up with the explanation of that error provided by the simulator help tool. DVT supports verror for Questa and nchelp for IUS. You can customize the name of these tools by setting the following environment variables: DVT_VERROR_TOOL_NAME and DVT_NCHELP_TOOL_NAME You can further customize this feature by creating your own regular expression for a custom hyperlink that launches a defined launch configuration. Use ${cmd:run_configuration:regular_expression} to define these custom hyperlinks in your filter pattern, where run_configuration is the name of the launch configuration that is going to be launched when clicking on the hyperlink and regular_expression is the regular expression whose matched result will be hyperlinked. For example when running a launch configuration that outputs the location of a log file like this one: in order to hyperlink the location of the file a pattern needs to be defined: To summarize the content of the log file and display just the number of errors, warnings and infos in a new console: the \u00e2\u0080\u009cSummarize_log\u00e2\u0080\u009d launch configuration is defined with the $DVT_HYPERLINK_COMMAND_CAPTURING_GROUP_0 environment variable Smart Log - Styles Assuming the filter MyTrace has a pattern Trace  (?<AGENT_KIND>[a-zA-Z_0-9]+) (?<INSTANCE>[a-zA-Z_0-9]+).* that contains 2 groups tagged <AGENT_KIND> and <INSTANCE>, DVT will randomly assign a color for each unique combination (AGENT_KIND_match, INSTANCE_match). You\u00e2\u0080\u0099ll get different colors for: Master M1 (<AGENT_KIND> group matched \u00e2\u0080\u009cMaster\u00e2\u0080\u009d and <INSTANCE> matched \u00e2\u0080\u009cM1\u00e2\u0080\u009d) Master M2 (<AGENT_KIND> group matched \u00e2\u0080\u009cMaster\u00e2\u0080\u009d and <INSTANCE> matched \u00e2\u0080\u009cM2\u00e2\u0080\u009d) Slave S1 (<AGENT_KIND> group matched \u00e2\u0080\u009cSlave\u00e2\u0080\u009d and <INSTANCE> matched \u00e2\u0080\u009cS1\u00e2\u0080\u009d) Slave S2 (<AGENT_KIND> group matched \u00e2\u0080\u009cSlave\u00e2\u0080\u009d and <INSTANCE> matched \u00e2\u0080\u009cS2\u00e2\u0080\u009d) You can manually assign colors by editing the .dvt/log_styles.xml file: You can easily share log styles using Managed Settings . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <section name=\"attributes\"> <item key=\"version\" value=\"1\"/> <list key=\"log_styles\"> <item value=\"PATTERN_NAME=MyTrace, AGENT_KIND=Master, INSTANCE=M1, COLOR=#FF8000, FONT_STYLE=BOLD, BORDER_STYLE=NONE\"/> <item value=\"PATTERN_NAME=MyTrace, AGENT_KIND=Master, INSTANCE=M2, COLOR=#008000, FONT_STYLE=BOLD, BORDER_STYLE=NONE\"/> <item value=\"PATTERN_NAME=MyTrace, AGENT_KIND=Slave, INSTANCE=S1, COLOR=#800080, FONT_STYLE=BOLD, BORDER_STYLE=NONE\"/> <item value=\"PATTERN_NAME=MyTrace, AGENT_KIND=Slave, INSTANCE=S2, COLOR=#8080FF, FONT_STYLE=BOLD, BORDER_STYLE=NONE\"/> </list> </section> For example the first line means \u00e2\u0080\u009cIf pattern MyTrace matched and AGENT_KIND is \u00e2\u0080\u0098Master\u00e2\u0080\u0099 and INSTANCE is \u00e2\u0080\u0098M1\u00e2\u0080\u0099 set color to \u00e2\u0080\u00a6\u00e2\u0080\u009d. You can use regular expressions, for example AGENT_KIND=M*. You can specify the COLOR , the FONT_STYLE (BOLD or ITALIC), and the BORDER_STYLE (DOT or SOLID or NONE). Note If you want to also use the random color palette available for the predefined filters, you should add the following item in the .dvt/log_styles.xml file: Run Configurations External Builders On this page Smart Log - Filters Smart Log - Hyperlinks Smart Log - Styles Back to top",
    "section_path": [],
    "tokens": 729,
    "source": "scraped"
  },
  {
    "id": "2b62e5be-66c2-4e01-9899-586c607c4b16",
    "title": "Build Configurations | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/index.html",
    "content": "Build Configurations | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Build Configurations In order to provide advanced functionality (like hyperlinks, autocomplete, design and class hierarchy, error signaling, etc.) DVT analyzes the source code files in your project. This analysis process is called build and it is performed by the DVT internal builder (also referred to as internal builder or DVT builder or DVT parser ). For convenience, build is synonym with code compilation or code analysis . The internal builder performs an initial full build of your project (a full build can also be triggered on demand). As you change sources, DVT performs an incremental build (incremental compilation) , that is it analyzes only the changes. Unless the build automatically preference is turned off, an incremental build is performed as soon as you save or as soon as DVT detects some idle time after you changed the code. DVT includes standard compliant code parsers. During the build process it creates an internal representation of the code. This representation is called the internal DVT dictionary , index , database or model . This model is partially serialized on the disk, so that subsequent tool invocations don\u00e2\u0080\u0099t require a full build. See Build Persistence for more details. In order to build, the internal builder uses the arguments that you specify in the current build file. A build file is one of the <name>.build files located in the .dvt folder of your project. Blue bullet decorations indicate if a file is compiled, for example in the Navigator View. This is a compiled file. This file is not compiled. Non-top files default.build Auto-config Simulator Log-config Emulating compiler invocations Multiple .build Files Compatibility Modes List of Compatibility Modes How to Specify the Compatibility Mode Default DVT Compatibility Mode Specifying a <syntax> Examples gcc Compatibility Mode ius.irun Compatibility Mode Examples ius.perspec Compatibility Mode questa.vcom Compatibility Mode questa.vlog Compatibility Mode questa.qrun Compatibility Mode vcs.vhdlan Compatibility Mode vcs.vlogan Compatibility Mode xcelium.xrun Compatibility Mode How to specify <syntax> for - default_ext <syntax> and - <syntax>_ext directives Examples Paths Strings Comments Environment Variables Including Other Argument Files Build Persistence DB Access Considerations DVT Auto-Linked Run a Script Before Build All Build Directives e Language Test Files e Language SPECMAN_PATH Adding VIPs to $SPECMAN_PATH using sn_which.sh SystemVerilog OVM or UVM Library Compilation Xilinx Libraries Compilation Precompilation support for Xilinx Libraries Intel(Altera) Quartus Libraries Compilation Precompilation support for Intel(Altera) Quartus Libraries Questa Libraries Compilation Use of External Programs Basic Tutorial Non-top files Back to top",
    "section_path": [],
    "tokens": 435,
    "source": "scraped"
  },
  {
    "id": "600aa291-1835-4a62-8eb4-61650168859a",
    "title": "Strings | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/strings.html",
    "content": "Strings | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Strings You may use single quoted (\u00e2\u0080\u0099) or double quoted (\u00e2\u0080\u009d) strings to group a piece of text so that it will be considered a single directive argument. Example: + define + FOO = 'my macro' To use a quotation mark \u00e2\u0080\u009c in a string, you should escape it using backslash \\ like this: + define + MOO = \"Hello \\\" Moo \\\" \" You can also use \" as string delimiter, and any \u00e2\u0080\u009c inside the string defined like this are considered as part of the string, like this: + define + MOO = \\ \"Hello \" Moo \" \\\" Note When in vcs compatibility mode, the escaping only works in files included with -file (see Including Other Argument Files ). Paths Comments Back to top",
    "section_path": [],
    "tokens": 158,
    "source": "scraped"
  },
  {
    "id": "88daffc6-e500-4be4-a9c7-9d14d905266b",
    "title": "Inspect Overrides in the Layers View | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/override-constraints/inspect-constraint-overrides-in-the-layers-view.html",
    "content": "Inspect Overrides in the Layers View | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Inspect Overrides in the Layers View Position the cursor on the constraint name and press Shift + F3 or right click and choose Show \u00e2\u0080\u00a3 Layers from the menu. The Layers View is populated with all the constraint declarations and implementations across the object oriented hierarchy. You can choose to see supertype, subtype or full layers. See also Layers View . Inspect Overrides in the Quick Type Hierarchy View Override Using the Dialog Back to top",
    "section_path": [],
    "tokens": 112,
    "source": "scraped"
  },
  {
    "id": "4aa97141-1c3c-46b3-a150-129b7be0d227",
    "title": "Reference | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/reference.html",
    "content": "Reference | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Reference List of Commands AI Assistant provides a list of commands that you can quickly invoke using Quick Access ( Ctrl + 3 ) in Eclipse and Command Palette ( Ctrl + Shift + P ) in VS Code. Some of these commands can also be invoked from the editor\u00e2\u0080\u0099s context menu or using the buttons available in the chat view. In general, the commands are filtered based on the context in which the action is possible. Commands for built-in blueprints appear in the list prefixed with DVT AI Blueprint. The rest of the commands are prefixed with DVT AI. Show All Commands Lists all AI Assistant specific commands. Stop Generation Stop LLM reply generation. Set Language Model Set the default LLM that will be used from now on for new sessions. Start a New Session from Blueprint List all the built-in and custom blueprints. The selected blueprint will start a new session. Start a New Chat Session Start an empty chat session. Run Last Session in Chat Rerun the last session only in chat, regardless of where it ran previously. Open Protect File Open the AI protect file. Send File to Prompt Focus the AI chat prompt and insert the current file as a symbol (e.g. #file:<filename>). Send Selected Lines to Prompt as Anchor Focus the AI chat prompt and insert the currently selected lines. The selected lines will be inserted as a symbol (e.g. #file:<filename>:<startLine>-<endLine>). If the file content changes from the command invocation until the prompt is sent to the LLM, the symbol expansion will include the updated content. Send Selected Lines to Prompt as Code Block Focus the AI chat prompt and insert the currently selected lines. The selected lines will be inserted as a code block surrounded by ``` delimiters. Edit Code Completion Blueprint Create a custom Code Completion blueprint, offering the ability to customize the prompt that is sent to the LLM. Edit Predefined Blueprint Customize the behavior of a predefined blueprint. Edit Predefined Snippet Customize the behavior of a predefined snippet. Predefined Blueprints AI Assistant comes with a set of built-in blueprints for common tasks: Explain the selected code (chat) Asks the LLM to explain the selected code in a concise manner. The user request defined by the blueprint and the LLM reply appear in the chat. You can change the request, regenerate the reply or continue the conversation. Add comments to the selected code (editor) Asks the LLM to add comments above the selected code. Changes appear in the editor. You can review and accept or revert the generated code. Suggest improvements for the selected code (editor) Asks the LLM to suggest improvements for the selected code. Improvements should appear as comments above the line that needs to be improved. Changes appear in the editor. You can review and accept or revert the generated code. Analyze and fix the selected code (editor) Asks the LLM to find and fix any problems identified in the selected code Fixes should appear in the editor alongside a comment explaining the bug and the fix. Changes appear in the editor. You can review and accept or revert the generated code. Note All built-in blueprints provide additional context to the LLM (e.g. the whole file containing the selection). Custom Blueprints AI Assistant allows you to define custom blueprints. The easiest way to create a custom blueprint is by: Saving a chat request using the Save Message as Blueprint button Saving a chat session using the Save Chat Session as Blueprint button A blueprint file has the following format: import { SessionBlueprint } from \"../@api/v3\" export default { // API version version : 3 , // Unique name used to identify the blueprint and to overwrite a built-in or custom blueprint name : 'Write a 4-bit counter' , // The assistant's reply to the blueprint's messages will target the specified component // ('chat' | 'editor') target : 'editor' , // Editor action when the assistant's reply targets the editor // ('replace' | 'insert' | 'insert-before-selection' | 'insert-after-selection') action : 'replace' , // The messages (requests and replies) used to create the new session: // - At least one message must be present // - User and assistant messages must alternate // - Sessions started from this blueprint will automatically pull a reply from the LLM when the last message is a user message // - When targeting the editor, the last blueprint message must be a user message to which the LLM will reply in the editor messages : [{ // Roles can be 'user' or 'assistant' role : 'user' , content : `Write a 4-bit counter in @language.` }] } satisfies SessionBlueprint The blueprint must be a valid TypeScript file with the .ts extension. AI Assistant looks for the blueprint files in these locations: $DVT_HOME/config/ai/blueprints/*.ts $DVT_AI_DIR/blueprints/*.ts $HOME/.dvt/ai/blueprints/*.ts <project>/.dvt/ai/blueprints/*.ts Predefined Snippets AI Assistant provides a library of prompt snippets with different intents: Structured information from DVT\u00e2\u0080\u0099s database. Specific code sections from your project. Reusable instructions for the LLM. Snippets are presented with their full syntax and options. Snippet parts starting with a vertical bar \u00e2\u0080\u0098|\u00e2\u0080\u0099 are optional. @language Languages used in the code selection or in the project (e.g.\u00c2\u00a0SystemVerilog, VHDL). @selected <type:\u00e2\u0080\u00a6> | wrap between <prefix:string> <suffix:string> | indicate cursor position Type options: code, file, container, element, action_block, method, port_list, class, module, interface, package, entity, architecture, configuration. Code sections based on the editor selection or cursor position. The selection will be adjusted to represent the specified type (e.g.\u00c2\u00a0the method where the cursor is placed, the entire class or module or the full content of the file). When indicate cursor position is used, a comment ( [[CURSOR IS HERE]] ) is added at the end of the line that contains the cursor. This is only available for @selected file . @usages of selected element | show <lines:number> surrounding lines | limit to <max:number> | separate with <separator:string> | wrap between <prefix:string> <suffix:string> @usages of <sym:symbol> | show <lines:number> surrounding lines | limit to <max:number> | separate with <separator:string> | wrap between <prefix:string> <suffix:string> Usages of the selected element or specified #symbol throughout your project. By default, the entire scope of the usage will be attached. Use show <lines:number> surrounding lines to show the line that contains the usage and lines lines before and after. By default, 5 usages will be collected from your project, use limit to <max:number> to change this number. Wildcards ( * ) can be used in the name of the symbol. @filename of selected file @filename of <symbol:symbol> | separate with <separator:string> The file name (last segment in file path) of the active editor or the file name of the specified #symbol\u00e2\u0080\u0099s definition. Wildcards ( * ) can be used in the name of the symbol. @examples of <type:\u00e2\u0080\u00a6> | limit to <max:number> | separate with <separator:string> | wrap between <prefix:string> <suffix:string> Type options: uvm_agent, uvm_component, uvm_driver, uvm_env, uvm_mem, uvm_monitor, uvm_object, uvm_reg, uvm_reg_adapter, uvm_reg_backdoor, uvm_reg_block, uvm_reg_field, uvm_reg_fifo, uvm_reg_file, uvm_reg_frontdoor, uvm_reg_map, uvm_reg_predictor, uvm_reg_sequence, uvm_scoreboard, uvm_sequence, uvm_sequence_item, uvm_sequencer, uvm_test. Code sections with classes implementing the specified UVM component. By default, 5 examples will be collected from your project, use limit to <max:number> to change this number. @outline of selected <type:\u00e2\u0080\u00a6> | wrap between <prefix:string> <suffix:string> @outline of <symbol:symbol> | wrap between <prefix:string> <suffix:string> | separate with <separator:string> Type options: file, container. Tree structured outline of the selected file/container (based on the editor selection or cursor position) or of the specified #symbol. Wildcards ( * ) can be used in the name of the symbol. Useful for providing summarized information about specific parts of the project without sending the full source code. @symbol <sym:symbol> | limit to <max:number> | separate with <separator:string> | wrap between <prefix:string> <suffix:string> Symbols from the current project that match a specific query. An alternative for #symbols that offers control over the number of results and the way they are wrapped before being sent to the LLM. Wildcards ( * ) can be used in the name of the symbol. @recent code sections | limit to <max:number> | separate with <separator:string> | wrap between <prefix:string> <suffix:string> | exclude active editor @recent code sections from open editors | limit to <max:number> | separate with <separator:string> | wrap between <prefix:string> <suffix:string> | exclude active editor Recently visited code sections from any file or restricted to the currently opened editors. Useful for providing information about the current task based on the code sections recently visited. By default, the last 5 code sections will be provided, use limit to <max:number> to change this number. If exclude active editor is used, code sections from the active editor will not be included in the output of the snippet. @design hierarchy | expand up <up_levels:number> | expand down <down_levels:number> @verification hierarchy | expand up <up_levels:number> | expand down <down_levels:number> Tree structure representation of the design or verification hierarchy starting from the current editor scope. @problems from selected <type:\u00e2\u0080\u00a6> | limit to <max:number> | filter by severity <severity:\u00e2\u0080\u00a6> | exclude problematic code Type options: code, container, file. Severity options: error, warning. Compilation problems reported by DVT inside the selected code, container or file. By default, the problematic code/file will be included as well. To prevent this, use exclude problematic code . @dependencies of selected <type:\u00e2\u0080\u00a6> | show as <show_as:\u00e2\u0080\u00a6> | fit into <max:number> chars | separate with <separator:string> | wrap between <prefix:string> <suffix:string> @dependencies of <sym:symbol> | show as <show_as:\u00e2\u0080\u00a6> | fit into <max:number> chars | separate with <separator:string> | wrap between <prefix:string> <suffix:string> Type options: container, file. Type and macro dependencies used inside the selected container/file or inside the specified #symbol. Only the types of declared elements are collected along with definition of used macros. Wildcards ( * ) can be used in the name of the symbol. fit into <max:number> chars : used to limit the size of the entire snippet expansion. show as <show_as:\u00e2\u0080\u00a6> options: outline, code. @replicate selected pattern <N:number> times Reusable task asking the LLM to replicate the currently selected code pattern N times. Useful for generating repetitive sections of code that follow a pattern (e.g. 1 2 3 \u00e2\u0080\u00a6). @reply only with code Reusable instruction asking the LLM to reply only with valid code in the language of current code selection or project. It also forbids the LLM to use markdown to format its reply. Useful in editor sessions that redirect the replies to the editor. @kind of selected container Kind of the container  (e.g. class, module) within the current editor selection or cursor position. @name of selected container Name of the container within the current editor selection or cursor position. @auto context | extended format Project information and additional code snippets that are relevant for the current task. Custom Snippets AI Assistant allows you to define custom snippets. The easiest way to create a custom snippet is by saving a chat request using the \u00e2\u0080\u009cSave Message as Snippet\u00e2\u0080\u009d button. A snippet file has the following format: import { PromptSnippet } from \"../@api/v3\" ; export default { // API version version : 3 , // Unique name used to identify the snippet and to overwrite a built-in or custom snippet name : 'Intro' , // Snippet signature used to refer to this snippet signature : '@intro' , // Whether to expand snippets and symbols nested in the prompt string expand : true , // The prompt string (snippet expansion) prompt : 'Act as a @language engineer.' } satisfies PromptSnippet The snippet must be a valid TypeScript file with the .ts extension. AI Assistant looks for the snippet files in these locations: $DVT_HOME/config/ai/snippets/*.ts $DVT_AI_DIR/snippets/*.ts $HOME/.dvt/ai/snippets/*.ts <project>/.dvt/ai/snippets/*.ts Protecting Code Advanced LLM Configuration On this page List of Commands Predefined Blueprints Custom Blueprints Predefined Snippets Custom Snippets Back to top",
    "section_path": [],
    "tokens": 1974,
    "source": "scraped"
  },
  {
    "id": "c1f9543f-1150-4a5c-a2a7-8e634b405090",
    "title": "Connect Instance Ports by Name | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/connect-instance-ports-by-name.html",
    "content": "Connect Instance Ports by Name | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Connect Instance Ports by Name You can easily convert the port connections of an instance from positional to named. Place the cursor on an instance and press Ctrl + 1 , select Connect instance ports by name from the list of quick assist proposals and press Enter . The instance ports are connected by name. Tip You can also Right - Click in the editor and go to Refactor > Connect Instance Ports by Name . Bind Method Call Arguments by Position Connect Instance Ports by Position Back to top",
    "section_path": [],
    "tokens": 125,
    "source": "scraped"
  },
  {
    "id": "271eac27-ef54-4efa-85b8-36f48c2492e1",
    "title": "Global Code Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-templates/global-code-templates.html",
    "content": "Global Code Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Global Code Templates To see the list of global code templates go to menu Window \u00e2\u0080\u00a3 Preferences then select the DVT \u00e2\u0080\u00a3 Code Templates preference page. Click the New button to define a new template. Note The template name is important for autocomplete proposal filtering based on already typed text! See also Code Templates in Autocomplete . Method Code Templates Project Level Code Templates Back to top",
    "section_path": [],
    "tokens": 100,
    "source": "scraped"
  },
  {
    "id": "84348a41-3520-4448-8f35-d1dbc6905899",
    "title": "Diagram Toolbar | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/diagrams/diagram-toolbar.html",
    "content": "Diagram Toolbar | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Diagram Toolbar Select Types (select starting types for diagram) Select Instances (choose which design element instances are relevant) Filter (hide or highlight specific diagram elements using regex) Preferences (change diagram preferences) Save As (save diagram as image) Refresh Zoom In Zoom Out Fit Canvas Pin (pin diagram window) Inspect Panel (show or hide inspect panel) Transition Table (show or hide transition table) Diagram Actions Diagram Magnifier Back to top",
    "section_path": [],
    "tokens": 101,
    "source": "scraped"
  },
  {
    "id": "96995f08-9e90-44ba-a9a2-5c455e0a4ea0",
    "title": "Inactive Generates Code Highlight | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/inactive-generates-code-highlight.html",
    "content": "Inactive Generates Code Highlight | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Inactive Generates Code Highlight DVT editor marks the unelaborated generate code (i.e. generate branches that are inactive) with a colored background. You can enable/disable the highlight and choose the highlight color: navigate to Window \u00e2\u0080\u00a3 Preferences then expand DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Editor . In the panel on the right side, you can find the Inactive generate branches group. Note The inactive generates code depends on the editor current design instance path shown in the Design Breadcrumb . You have the option to change the instance path, and therefore the highlight, from the Select Instance Path breadcrumb button. Icons and Decorations Lazy Bring up Resources Back to top",
    "section_path": [],
    "tokens": 142,
    "source": "scraped"
  },
  {
    "id": "faa6292f-af30-48ca-b776-cd3f01d33cdd",
    "title": "Code Templates in Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-templates/code-templates-in-autocomplete.html",
    "content": "Code Templates in Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Code Templates in Autocomplete Type the first letters from the code template name, then press Ctrl + Space twice to see code template proposals. Proposals are suggested using Global Code Templates and Project Level Code Templates . SystemVerilog: e Language: VHDL: Code Templates Constraint Code Templates Back to top",
    "section_path": [],
    "tokens": 83,
    "source": "scraped"
  },
  {
    "id": "7339bb32-62a5-45fc-92a9-0510d1b12e73",
    "title": "Generating External Tool Scripts from the DVT Build Configuration | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/compile_script.html",
    "content": "Generating External Tool Scripts from the DVT Build Configuration | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Generating External Tool Scripts from the DVT Build Configuration You can integrate DVT with external tools like compilers, simulators or linters via Run Configurations and External Builders . Sometimes a good portion of the DVT build configuration file (.dvt/default.build) can be reused by the external tools.\nFor example, an external compiler invocation is very similar to the content of each +dvt_init section from the default.build file,\nas it contains the same set of top files and compiler directives.\nHowever, most of the time there are tool, scripting or OS specific differences that do not allow a direct reuse. For such situations, DVT provides the ${dvt_compile_script:<script_template.ftl>:<script.sh>} variable. It takes two mandatory arguments, provided as absolute paths or relative to the project root: script_template.ftl - a FreeMarker template of the script script.sh - the filename where DVT will generate the resulting script In the script template you can access structured data describing the active build configuration.\nFor example, the list of all +dvt_init sections and for each section the library name or list of all directives.\nWhen the external tool command gets executed, the template is processed and the script is generated.\nThe variable itself is resolved to the full path of the generated script file, which can be used in the external tool command line. The following API is accessible in the FreeMarker template: isIncremental() Returns true if the script generation was triggered through an external builder\u00e2\u0080\u0099s incremental build command. getIncrementalFile() Returns the path to the incrementally compiled file - see isIncremental(). getInvocations() A list of invocation objects. Each +dvt_init section from the build configuration file is modeled by an invocation object. In the case of an external builder\u00e2\u0080\u0099s incremental command, only the invocations in which the incrementally compiled file is specified. invocation.getToolCompat() The compatiblity mode, one of DVT, IUS_IRUN, QUESTA_VCOM, QUESTA_VLOG, VCS_VHDLAN, VCS_VLOGAN invocation.getCompilationRoot() The compilation root if specified by +dvt_compilation_root or the DVT project\u00e2\u0080\u0099s location otherwise. invocation.getDirectives() A list of directives specified in the corresponding +dvt_init section. A directive is comprised of its name and arguments, if any, separated by space. The content of -f included files is not available in the model. The -f directives are returned as-they-are. invocation.replaceEnv(String input) A utility method to perform environment variable substitution in the scope of the current +dvt_init section. Any +dvt_setenv directives specified within the invocation are taken into account. invocation.getLibName() The library name if specified by -work or \u00e2\u0080\u009cwork\u00e2\u0080\u009d otherwise. invocation.getIndex() The index of the invocation, where the first implicit invocation is #0. getLibPathSet() A set of unique library name and path pairs. libPath.getPath() Returns the library path. libPath.getLib() Returns the library name. Tip An Eclipse plugin provides IDE functionality (syntax highlight, errors as you type, etc) for working with FreeMarker templates. Note Template processing errors prevent the execution of the external tool. They are reported in a pop-up dialog, and more details can be found in the FreeMarker page of the Console View. Example: External Builder for QuestaSim on Windows OS This example illustrates how to use the ${dvt_compile_script} variable to configure QuestaSim as an external compiler on Windows OS. Click the drop-down arrow to the side of the Rebuild Project (External Builders) toolbar button and choose Configure\u00e2\u0080\u00a6 . Create a New\u00e2\u0080\u00a6 > External Builder (Generic) and fill in the full, incremental and clean commands. On the Filters tab, enable the Questa filter category, and any other filters that may be relevant for you. Tip The external builder configuration is saved in the .dvt/external_builders.xml file,\nyou can skip the steps above and simply create the file with the content listed below. Create the script templates for full, incremental and clean commands.\nListings of the files used in this example are provided below. Note The bin directory of the QuestaSim installation should be included in the %PATH% variable. Note The ${env_var:DVT_HOME}binutilsbusybox program which is included in the DVT distribution allows scripts to be written in bash. .dvt/external_builders.xml <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <configurations> <configuration ATTR_AUTO_COMMAND= \"${env_var:DVT_HOME}\\bin\\utils\\busybox sh ${dvt_compile_script:.dvt/qw_incr.ftl:.dvt/qw_incr.sh}\" ATTR_BUILDER_ENABLED= \"false\" ATTR_BUILDER_NAME= \"questa_compile\" ATTR_CLEAN_COMMAND= \"${env_var:DVT_HOME}\\bin\\utils\\busybox sh ${dvt_compile_script:.dvt/qw_clean.ftl:.dvt/qw_clean.sh}\" ATTR_FILTERS_KIND= \"Questa,\" ATTR_FULL_COMMAND= \"${env_var:DVT_HOME}\\bin\\utils\\busybox sh ${dvt_compile_script:.dvt/qw_full.ftl:.dvt/qw_full.sh}\" ATTR_WORKING_DIRECTORY= \"\" > <patterns/> <environment_variables ATTR_APPEND_ENVIRONMENT_VARIABLES= \"true\" /> </configuration> </configurations> .dvt/qw_compile_full.ftl #!/bin/bash < #list getInvocations() as invocation> echo \"Invocation no ${ invocation .getIndex() } \" < #assign compilationRoot = invocation.getCompilationRoot()> cd \" ${ compilationRoot } \" < #assign libName = invocation.getLibName()> vmake ${ libName } & >/dev/null || vlib ${ libName } < #if (invocation.getToolCompat() == \"questa.vcom\")> vcom.exe \\ < #elseif (invocation.getToolCompat() == \"questa.vlog\")> vlog.exe \\ </#if> < #list invocation.getDirectives() as directive> < #if (!directive?matches(\"\\\\+dvt_.*\"))> < #if (directive?contains(\"\\\\\"))> \" ${ invocation .replaceEnv(directive) } \" < #sep>\\</#sep> < #else> ${ invocation .replaceEnv(directive) } < #sep>\\</#sep> </#if> </#if> </#list> </#list> .dvt/qw_compile_incr.ftl #!/bin/bash < #list getInvocations() as invocation> echo \"Invocation no ${ invocation .getIndex() } \" < #assign compilationRoot = invocation.getCompilationRoot()> cd \" ${ compilationRoot } \" < #assign libName = invocation.getLibName()> vmake ${ libName } & >/dev/null || vlib ${ libName } < #if (invocation.getToolCompat() == \"questa.vcom\")> vcom.exe \\ < #elseif (invocation.getToolCompat() == \"questa.vlog\")> vlog.exe -incr \\ </#if> < #list invocation.getDirectives() as directive> < #if (!directive?matches(\"\\\\+dvt_.*\") && (directive?starts_with(\"+\") || directive?starts_with(\"-\")))> ${ directive } < #sep>\\</#sep> </#if> </#list> \" ${ getIncrementalFile () } \" \\ </#list> .dvt/qw_compile_clean.ftl #!/bin/bash <#list getLibPathSet() as libPath> cd \"${libPath.getPath()}\" vdel -lib ${libPath.getLib()} -all > /dev/null </#list> FPGA Support Incremental Compilation Back to top",
    "section_path": [],
    "tokens": 915,
    "source": "scraped"
  },
  {
    "id": "023bc849-e3dc-4834-8633-d7532c17ac1b",
    "title": "In Block (Column) Selection mode I see strange editing artifacts | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/in-block-column-selection-mode-i-see-strange-editng-artifacts.html",
    "content": "In Block (Column) Selection mode I see strange editing artifacts | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide In Block (Column) Selection mode I see strange editing artifacts Please make sure the Text Editor Block Selection Font is a monospaced font: go to General \u00e2\u0080\u00a3 Appearance \u00e2\u0080\u00a3 Colors and Fonts -  in the list on the right, under the Basic category you should see Text Editor Block Selection Font The font should be monospaced When I switch to Block (Column) Selection mode the font changes How to modify the font size in the code editors? Back to top",
    "section_path": [],
    "tokens": 120,
    "source": "scraped"
  },
  {
    "id": "07bf5249-9db9-48eb-9c2c-e7c4596e2261",
    "title": "Declare Method | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/declare-method.html",
    "content": "Declare Method | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Declare Method An error is triggered when calling a method which does not exist. Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Declare function \u00e2\u0080\u00a6 or Declare task \u00e2\u0080\u00a6 from the list of quick fix proposals and press Enter . The method stub declaration is inserted in the appropriate scope. Note The method signature (return type, argument names and types) is automatically detected from context. Note The implementation stub contains a TODO reminder which shows up the Tasks View. See Track Tasks using TODO Markers . Tip You may change the function\u00e2\u0080\u0099s return type, as well as the name and type of each argument. Press Tab key to switch between the edit boxes, and Enter when done. Tip You can change the method signature by editing the Method Code Templates Declare Extern Prototype Declare Variable Back to top",
    "section_path": [],
    "tokens": 177,
    "source": "scraped"
  },
  {
    "id": "fe7b4eeb-e7ad-4203-ba12-7d7aaf896087",
    "title": "Working in Chat | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/working-in-chat.html",
    "content": "Working in Chat | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Working in Chat AI Assistant provides a dedicated chat view where you can exchange messages with the LLM on any topic. You can start a new chat session in several ways: Using Start a New Chat Session command. Using Start a New Session from Blueprint command, where you can select any built-in or custom blueprint that targets the chat. Using the built-in blueprint commands starting with DVT AI Blueprint and targeting the chat. Cloning an existing session from the chat view\u00e2\u0080\u0099s Sessions page. Using Run Last Session in Chat command. The chat view has two pages, one with the actual chat and another one with all the sessions: Sessions page allows you to switch between sessions and to manage previous sessions. Chat page allows you to exchange messages with the LLM. It\u00e2\u0080\u0099s divided in two sections, the messages area with pairs of user requests and LLM replies and the prompt area where you input your requests. The prompt area allows you to write your requests and has several features. Highlight: @snippets and #symbols are highlighted so you can easily identify them. Indicates that the actual request will have a different content after the prompt will be expanded. To preview the message before it\u00e2\u0080\u0099s being sent use the Preview Message before Sending button. Autocomplete: Speeds-up @snippet and #symbol insertion. Automatically appears when needed (e.g.\u00c2\u00a0after writing @ or #). Can be triggered using Ctrl + Space . List of Buttons, Shortcuts and Commands The view has a toolbar with the following buttons: Show All Sessions / Show Last Chat Session Go to the list of sessions and back. Start a New Chat Session Start an empty chat session. Save Chat Session as Blueprint Create a new blueprint with all the messages from this session. The prompt has the following buttons: Send (Ctrl + Enter or Shift + Enter) Send the request to LLM. Preview Message before Sending Open an editor with the exact request that will be sent to the LLM. @snippets and #symbols are expanded, warnings or errors might pop-up if expansion fails. The sent User requests have the following buttons: Save Message as Blueprint Create a new blueprint with this user message. Save Message as Snippet Create a new snippet with this user message. View Sent Message Open an editor with the exact request that was sent to the LLM (@snippets and #symbols expanded). Resend Message Resend the same request with the snippets expanded in the current context (e.g when @selected code is present, using resend after selecting a new code section will send a different request to the LLM). Branches the session into a new version from this message onward. Edit and Resend Message Edit and resend the message, snippets will be expanded in the current context (e.g when @selected code is present, using edit and resend after selecting a new code section will send a different request to the LLM). Branches the session into a new version from this message onward. Start a New Editor Session from Message Start a new editor session with this message as a request. Replaces the current editor selection with the reply. When there\u00e2\u0080\u0099s no selection the reply is inserted at cursor position. Force the insert mode using Ctrl + click . Previous / Next Requests Navigate through session versions branched from this request. The LLM replies have the following buttons: Regenerate Regenerate the reply with the same LLM. Branches the session into a new version from this message onward. Switch Language Model Regenerate the reply with a different LLM. Branches the session into a new version from this message onward. Previous / Next Reply Navigate through session versions branched from this reply. Insert at Cursor Insert the code block in the editor at cursor position. Open a compare editor to preview the changes using Ctrl + click . Button appears only on code blocks generated by LLM. Copy to Clipboard Copy the code block in the clipboard. Button appears only on code blocks generated by LLM. Key Terms Working in Editor On this page List of Buttons, Shortcuts and Commands Back to top",
    "section_path": [],
    "tokens": 715,
    "source": "scraped"
  },
  {
    "id": "29ed6d77-c00a-4827-b678-bccd500e0f37",
    "title": "Debug Specific Configurations | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/debugger-integration/debug-specific-configurations.html",
    "content": "Debug Specific Configurations | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Debug Specific Configurations In Debug Mode two more tabs are available for a launch configuration: Connection where you can control: the Message timeout - when a message to the simulator is dropped, if not answered the Delta Between Messages - the delay between two consecutive messages sent to the simulator. You can tune this parameter depending on your platform performance or network latency. Source where you can control where to search for the source files whenever the debugger stops. Watch Expressions Custom Dialogs Back to top",
    "section_path": [],
    "tokens": 119,
    "source": "scraped"
  },
  {
    "id": "77faf259-6edb-410c-afab-e69f80c7a3eb",
    "title": "Breadcrumb Navigation Bar | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/breadcrumb-navigation-bar/index.html",
    "content": "Breadcrumb Navigation Bar | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Breadcrumb Navigation Bar The breadcrumb navigation bars appear horizontally on top or at the bottom of source code and diagram editors. You can show/hide the breadcrumb navigation bars using the Set Enabled Breadcrumbs toolbar button. Note You can at any time use keyboard shortcuts to easily navigate in the Breadcrumb Navigation Bars. To do so, simply go to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Keys , search for the associated commands and choose some convenient key binding for the desired breadcrumb navigation. To navigate between the breadcrumb elements, use the TAB and SHIFT + TAB keyboard shortcuts. To inspect elements on the same level of the hierarchy, use the ARROW DOWN key. To expand a particular level in the hierarchy, use the ARROW RIGHT key. Design Breadcrumb Verification Breadcrumb Scope Breadcrumb Filesystem Breadcrumb Trace Path Design Breadcrumb Back to top",
    "section_path": [],
    "tokens": 173,
    "source": "scraped"
  },
  {
    "id": "72a4166a-ec6b-4122-a440-3cb38a7472ad",
    "title": "Implement Missing Pure Virtual Methods | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/implement-missing-pure-virtual-methods.html",
    "content": "Implement Missing Pure Virtual Methods | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Implement Missing Pure Virtual Methods An error is triggered when a non-virtual class does not implement all the inherited pure virtual methods. Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Implement Missing Pure Virtual Methods from the list of quick fix proposals and press Enter . All missing implementations are created: Tip You can change the method signature by editing the Method Code Templates Note The implementation stubs contain a TODO reminder which shows up the Tasks View. See Track Tasks using TODO Markers . Implement Extern Method Import Type Back to top",
    "section_path": [],
    "tokens": 135,
    "source": "scraped"
  },
  {
    "id": "05bbcc32-2ffe-4600-861c-a61e4bf17510",
    "title": "Paths | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/paths.html",
    "content": "Paths | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Paths You can specify absolute or relative paths. Relative paths are resolved relative to the compilation root . By default the compilation root is the project directory. However, when using the -F directive to include another argument file the compilation root might change (for more details see Including Other Argument Files ). You can use environment variables when specifying paths. You can use ant-like path patterns when specifying top files and incdirs : ? matches a single character, for example top?.sv matches top1.sv and topA.sv but not top_1.sv * matches a sequence of characters from a file or directory name, for example top*/*.sv matches all files with .sv extension from all the directories starting with top , +incdir+/path/to/incdir_* will set as incdirs all directories from /path/to/ having the incdir_ prefix ** matches a sequence of directories from a path (recursively), for example **/*.sv matches all files with .sv extension from the whole project directory tree When multiple files are specified using path patterns, a shallow analysis is performed in order to figure out the proper compilation order. Tip Computing all files that match a given path pattern might be time consuming, especially on slow filesystems or when using recursive patterns (like **/*.sv).\nBy default, the filesystem scan times out after 5 seconds. Use +dvt_path_pattern_timeout+<timeout> to control the timeout value(in seconds) of this operation. Tip Figuring out the proper compilation order of files expanded from a path pattern might be time consuming, especially when the wildcard matches hundreds/thousands of files. By default, sorting times out after 5 seconds. Use +dvt_path_pattern_sorting_timeout+<timeout> to control the timeout value(in seconds) of this operation. Compatibility Modes Strings Back to top",
    "section_path": [],
    "tokens": 305,
    "source": "scraped"
  },
  {
    "id": "c0b35521-99b5-48a8-a0eb-4aeba0022634",
    "title": "Add New Parameter to Module | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/add-new-parameter-to-module.html",
    "content": "Add New Parameter to Module | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Add New Parameter to Module To add a new parameter to a module, place the editor cursor on the module name, Right + Click and select Refactor > Add parameter . In the Add parameter wizard you can tune the name, type, width and the value of the new parameter. Click Ok to perform the refactoring or Preview to see the changes that are about to be performed in the source code. Note An empty parameter override is added to all the instances of the selected module along with a FIXME comment which shows up in the Tasks View. See Track Tasks using TODO Markers . Tip In the Preview page you can select what changes should be performed. Add New Port to Module Refactoring Scripts Back to top",
    "section_path": [],
    "tokens": 164,
    "source": "scraped"
  },
  {
    "id": "faa166e1-185e-428c-9bf4-be4d0686961e",
    "title": "Preprocessed Files Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/preprocessed-files-support.html",
    "content": "Preprocessed Files Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Preprocessed Files Support This application note describes how to use DVT IDE with Verilog or SystemVerilog source files which contain preprocessing code written in a different language (either general-purpose like perl, jinja2, python, ruby, php or even proprietary). Typically, in such a flow, the source files get preprocessed and pure SystemVerilog code is generated. Subsequently, all tools in the toolchain (compiler/simulator/linter/\u00e2\u0080\u00a6) actually use the generated files. Note For simplicity, from here on, files containing preprocessing code are referred to as (p) files while generated files are referred to as (g) files . DVT IDE also compiles the pure SystemVerilog (g) files, however editing and navigation is done in the (p) files. Although DVT is agnostic of the preprocessing language, you need to provide it the mapping of (p) to (g) files. The available mapping mechanisms are described in detail below. In the pure Verilog/SystemVerilog code sections of (p) files, all of the advanced DVT navigation and editing features are available (errors reported as you type, auto-complete, quick fix proposals etc.). The preprocessing code sections of (p) files are marked with a distinct background color. Compilation problems detected in the corresponding section of the (g) file are back-annotated. Inside (g) files, code generated from a preprocessing code section is marked with a colored background. To avoid manually editing (g) files by mistake, they are by default treated as read-only. Navigation between (p) and (g) files The code which gets generated from a particular preprocessing section is shown in the Inspect View . Similarly, you can see the preprocessed code which generates a particular code section.\nClick on the filename link to navigate to the associated code section. You can also navigate from anywhere inside the (p) file to the corresponding code section of the (g) file and vice versa: Right Click in the editor -> Show -> PVerilog Preprocessed/Generated File . Integration of the preprocessing tool You can define a Run Configurations to invoke the preprocessing tool. You can instruct DVT to run this configuration every time you save the preprocessing file. Use this directive in the build configuration file: + dvt_pverilog_run_on_save + run_preprocess + dvt_pverilog_run_on_save + \"run configuration name\" Note that you need to enclose the run configuration name in quotes if it contains whitespace characters. The run configuration script or command can use the following environment variables: $DVT_PVERILOG_G_FILE  path to the generated (g) file\n$DVT_PVERILOG_P_FILE  path to the preprocessing (p) file Tip For convenience you can also use Custom Shortcut and Button for a Run Configuration to quickly apply preprocessing. Preferences Go to Window > Preferences then DVT > SystemVerilog > Editor . To configure background highlighting, adjust the PVlog Preprocessing code and PVlog Generated code preferences in the Code highlighting color group. You can also configure the Treat PVerilog generated files as read-only preference in the Editing group. Mapping preprocessing (p) to generated (g) files You must specify how (p) files are mapped to (g) files using one of the following directives in the build configuration file: Direct mapping +dvt_pverilog_map+<(p) file path>=<(g) file path> For example: +dvt_pverilog_map+$SOURCE/file.svp=$GENERATED/file.sv You may specify this directive multiple times for several file pairs. Map by extension +dvt_pverilog_ext_map+<(p) files extension>=<(g) files extension> For example: + dvt_pverilog_ext_map +. svp =. sv A (p) file is mapped to a (g) file if they have the same basename, mapped extensions, and if the (p) file resides in any of the Scan locations for (p) files . If multiple such files exist, there is no guarantee on the chosen pair. You may specify this directive multiple times for different extension pairs. Map by pattern tag +dvt_pverilog_pattern_tag_map+<(p) pattern1>=<(g) pattern2> For example: + dvt_pverilog_pattern_tag_map +< tag >. svp =< tag > _suffix . sv A (p) file is mapped to a (g) file if their names match the specified patterns and if the (p) file resides in any of the Scan locations for (p) files . A pattern is defined by an alternation of constant fragments and tags. You may specify this directive multiple times for different pattern pairs. Map by path prefix +dvt_pverilog_path_map+<path prefix of (p) files>=<path prefix of (g) files> For example: +dvt_pverilog_path_map+${PREPROCESS_SOURCE}=${PREPROCESS_TARGET} A (p) file is mapped to a (g) file if they have the same subpath relative to the (p) path prefix respectively to the (g) path prefix. You may specify this directive multiple times for different path prefix pairs. Map by comment +dvt_pverilog_comment_map+\u00e2\u0080\u009d<pattern>\u00e2\u0080\u009d For example: + dvt_pverilog_comment_map + \"Source file: (?<PFILE>\\S+)\" You must specify a regular expression pattern containing a named capturing group called PFILE. The mapping is inferred from the (g) file, assuming it contains a comment pointing to the corresponding (p) source file. Scan locations for (p) files By default, in order to find the suitable (p) files for +dvt_pverilog_ext_map and +dvt_pverilog_pattern_tag_map, all source files located inside the project are scanned, recursively. You can specify multiple scan locations using +dvt_pverilog_scan_location_add+<path>, for example when sources reside in multiple independent locations: # Specify scan roots in addition to the project location + dvt_pverilog_scan_location_add +/ additional / scan / location1 + dvt_pverilog_scan_location_add +/ additional / scan / location2 The project location is by default a scan location. To override this behavior, specify the +dvt_pverilog_scan_location_clear directive first: # Don't scan the default project location, only the specified scan roots + dvt_pverilog_scan_location_clear + dvt_pverilog_scan_location_add +/ scan / location1 + dvt_pverilog_scan_location_add +/ scan / location2 Note By default, DVT compiles the (p) files. You can use the +dvt_pverilog_mode+<mode> directive to specify which files should be compiled.\nFor example, to compile the generated files, use +dvt_pverilog_mode+generated . Incremental Compilation Output and logging On this page Navigation between (p) and (g) files Integration of the preprocessing tool Preferences Mapping preprocessing (p) to generated (g) files Scan locations for (p) files Back to top",
    "section_path": [],
    "tokens": 985,
    "source": "scraped"
  },
  {
    "id": "d4394c68-95d7-46d7-8db1-a6291f7dbfd1",
    "title": "Create File From Build Config Editor | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/create-file-from-build-config-editor.html",
    "content": "Create File From Build Config Editor | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Create File From Build Config Editor A build configuration error is triggered when a non-existing file is specified for compilation or included as an argument file (for example using -f). Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Create file \u00e2\u0080\u00a6 in \u00e2\u0080\u00a6 from the list of quick fix proposals and press Enter . The file is created in the chosen location and opened in a new editor. Note A content assist pop up showing code templates is automatically triggered. Note The list may contain several proposals, for the compilation root and for each +incdir. Create Class In New File Create Included File Back to top",
    "section_path": [],
    "tokens": 149,
    "source": "scraped"
  },
  {
    "id": "ada1dd03-2327-4d89-8f0b-18a03b3a951a",
    "title": "Content Filters | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-filters/index.html",
    "content": "Content Filters | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Content Filters Apply Content Filters to remove irrelevant information displayed in views.\nSee Content Filters Examples for a list of use cases and examples. Toggle the content filtering functionality (on/off) with this toolbar button: . All views have a special indication that is: enabled if some content has been filtered disabled if no content has been filtered or content filters off For example in Types View: By default, elements from the UVM, OVM and VMM libraries are filtered. See Predefined Content Filters for details. You can define custom Content Filters in the .dvt/content_filters.xml file. To quickly create .dvt/content_filters.xml with some example filters, right click on the project and go to New \u00e2\u0080\u00a3 Example\u00e2\u0080\u00a6 then DVT Examples \u00e2\u0080\u00a3 DVT Content Filters XML . See also Content Filters XML syntax . Content Filters XML syntax Filtering by Element Type Content Filters Examples Predefined Content Filters Troubleshooting Content Filters XML syntax Back to top",
    "section_path": [],
    "tokens": 183,
    "source": "scraped"
  },
  {
    "id": "fa6abaf2-b749-488f-ab24-bb924ff7799d",
    "title": "OVM Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ovm-support/ovm-templates.html",
    "content": "OVM Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide OVM Templates DVT offers autocomplete templates for OVM components. Just type in the editor ovm then hit Ctrl + Space twice and a drop-down list will offer you the available templates. After you pick the desired template, you can fill in the template parameters (e.g. company prefix, component name etc.). Quick OVM Documentation Access UVM Support Back to top",
    "section_path": [],
    "tokens": 91,
    "source": "scraped"
  },
  {
    "id": "d359ab69-87f1-4a17-aef3-8fb40afc9f26",
    "title": "Code Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-assist/code-templates.html",
    "content": "Code Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Code Templates Code templates are presented in content assist. Press the first letters from the template name then click Ctrl + Space twice to get a list of available templates. Content assist for CamelCase and Underscore Module Automatic Instantiation Back to top",
    "section_path": [],
    "tokens": 74,
    "source": "scraped"
  },
  {
    "id": "42bf79ea-e4ec-4ad6-a640-244feb18ca3c",
    "title": "Macros Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/macros-support/index.html",
    "content": "Macros Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Macros Support Inactive Code Highlight Overview Settings Macro Expansion Overview Triggering Tips IMPORTANT NOTE Macros and Quick Macros Views Commands Inactive Code Highlight Back to top",
    "section_path": [],
    "tokens": 58,
    "source": "scraped"
  },
  {
    "id": "5cc1c102-a93b-4a6e-99d4-eb94f89590bb",
    "title": "UVM Smart Log | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/uvm-smart-log.html",
    "content": "UVM Smart Log | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Smart Log DVT ships with predefined filters for UVM that allow you to view colored and hyper-linked logs like the one below. To turn on UVM Smart Log: Select the predefined UVM filters as indicated below: UVM Sequence Tree UVM Templates Back to top",
    "section_path": [],
    "tokens": 78,
    "source": "scraped"
  },
  {
    "id": "bd48f940-bb82-407f-b3a7-30b153f6eafc",
    "title": "Constraint Code Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-templates/constraint-code-templates.html",
    "content": "Constraint Code Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Constraint Code Templates The following features can be used in DVT to generate new constraints: Quick Fix Constraint Override Autocomplete To customize the way a generated constraint looks you can edit the constraint_implementation or constraint_prototype code templates. ${qualifiers} Can be static or empty. ${identifier} Constraint name. Includes class_name:: qualifier for extern constraint implementations. ${todo_comment} Comment inserted inside the constraint block. ${body} The body of the constraint. ${qualifiers} Extern, static or both. Can be empty. ${identifier} Constraint name. Code Templates in Autocomplete Method Code Templates Back to top",
    "section_path": [],
    "tokens": 120,
    "source": "scraped"
  },
  {
    "id": "7e0ecee1-fb2b-4ce6-96bd-29c80dac0268",
    "title": "Use Assignment Pattern for Struct Type Variable | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-assist/use-assignment-pattern-for-struct-type-variable.html",
    "content": "Use Assignment Pattern for Struct Type Variable | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Use Assignment Pattern for Struct Type Variable If content assist is triggered when assigning a value to a struct type variable, it will provide an additional Use assignment pattern proposal. Upon choosing it, an assignment pattern with all the fields of the struct being assigned will be created, including fields of internal structs. Cycle between the placeholder tbd_val values with Tab to set the fields to your desired values. Press Enter to finish setting the values. Additionally, you can change whether you want the assignment pattern to be multiline or not from Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Editor \u00e2\u0080\u00a3 Content Assist in the Insertion section. By default, this proposal is written on multiple lines. Implement Extern Functions Using Autocomplete Quick Fix Proposals Back to top",
    "section_path": [],
    "tokens": 165,
    "source": "scraped"
  },
  {
    "id": "bf6af15e-7c60-48fd-a7a3-3763ff1412d9",
    "title": "Editor Right Click Menu | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/editor-right-click-menu.html",
    "content": "Editor Right Click Menu | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Editor Right Click Menu Folding Collapse All Levels Fold to statement level. Show Active Preprocessing Show First Level Collapse all levels then expand one level. Expand All Levels Unfold code. Toggle Current Line Fold/unfold. Define Custom Region Create a folding marker for the selected region. Macros See Macro Expansion Source Jump to Pair Bracket Format Source See Code Formatting Toggle Comment Comment/uncomment selection or current line. OVM Field Editor See OVM Field Editor UVM Field Editor See UVM Field Editor Override Methods See Override Functions Emacs Code Factory See Code Factory Show Declaration See use Hyperlinks to Move Around in the Code Call Hierarchy See Call Hierarchy View Design Hierarchy See Design Hierarchy View Diagram See Diagrams Layers See Layers View Type Hierarchy See Type Hierarchy View UVM Sequence Tree See UVM Sequence Tree Verification Hierarchy See Verification Hierarchy View Quick Compile Order See Quick Compile Order View Quick Layers See Quick Layers View Quick Macros See Quick Macros View Quick Outline See Quick Outline View Quick Type Hierarchy See Quick Type Hierarchy View Quick Types See Quick Types View Constraints See Show Constraints Usages Readers Writers See Show Usages, Readers or Writers Including File Jumps to the location where the current file is `included. References See Show Usages, Readers or Writers Trace See Trace Connections Refactor Rename See Rename Refactoring Add Port See Add Port to Module from Selected Field or Add New Port to Module Editor Notification Hyperlinks On this page Folding Macros Source Code Factory Show References Trace Refactor Back to top",
    "section_path": [],
    "tokens": 289,
    "source": "scraped"
  },
  {
    "id": "6e4525b9-51c8-4232-8f36-e7ba8e2ed05c",
    "title": "Extract to Module | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/extract-to-module.html",
    "content": "Extract to Module | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Extract to Module A fragment of a module can be automatically extracted and encapsulated into a new instance. The fragment must be a contiguous region containing only instances, always blocks and assignments. Select the region in the editor, press Ctrl + 1 , select Extract to module from the list of quick assist proposals and press Enter . The selected piece of code will be moved to a new module in a new file. Fill in the name of the new module and file. The initial selection is replaced with an instance of the new module: The ports of the new module are automatically computed and connected in the instantiation. Implementation notes the new file is `included on the line above the declaration of the initial module signals which are not referenced anywhere outside the selection will be marked with a // FIXME after the extraction currently busses are propagated through a single port even if accessed through bit selects; in such a case, a // FIXME comment can help you easily identify the unique bit selects which you might consider propagating through distinct ports Tip You can also Right + Click in the editor and go to Refactor > Extract to module to trigger this functionality. Extract to Method Move Selection to New File Back to top",
    "section_path": [],
    "tokens": 251,
    "source": "scraped"
  },
  {
    "id": "7a0e9a3a-9702-4f12-9630-6c87d72d9a45",
    "title": "Examples | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/settings-management/examples.html",
    "content": "Examples | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Examples To understand how settings from all levels are merged we can use the following layout for common, user and project levels: > common_settings/ > waivers.xml > preferences.ini > eclipse.ini > run_sim.launch > user_settings/ > preferences.ini > run_compile.launch > project/ > .dvt/ > \u00e2\u0080\u00a6\u00e2\u0080\u00a6\u00e2\u0080\u00a6.. > waivers.xml DVT is invoked using the following command: dvt . sh - heap_size 4096 m For the above example DVT will start using the flags specified in the common level eclipse.ini but the memory allocation threshold will be the one specified in the command (4096 MB) because the command line arguments have precedence. The DVT session will contain the run_sim run configuration and also the run_compile run configuration because these are accumulated from all levels. Workspace preferences will result from merging the preferences.ini from both common and user levels but if there are any conflicts the user level preferences will have precedence. Non-conflicting preferences are accumulated from both levels. When operating on the opened project, the compilation problems will be waived using the accumulated waivers from common level and project level (project/.dvt/waivers.xml). Use Cases Deprecated Settings Management (before DVT 3.5) Back to top",
    "section_path": [],
    "tokens": 219,
    "source": "scraped"
  },
  {
    "id": "3a6c37b8-c04a-4616-a235-1eba090c0af4",
    "title": "How can I open a file in DVT from the terminal? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-can-i-open-a-file-in-dvt-from-the-terminal.html",
    "content": "How can I open a file in DVT from the terminal? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How can I open a file in DVT from the terminal? You can use the Command Line Interface like this: dvt_cli.sh -workspace ~/dvt_workspace openFile $( readlink -f my/file.sv ) The command can be shortened by defining this alias in your ~/.cshrc : alias dvtopen 'dvt_cli.sh -workspace ~/dvt_workspace openFile `readlink -f \\!*`' or by defining this function in your ~/.bashrc : dvtopen () { dvt_cli.sh -workspace ~/dvt_workspace openFile $( readlink -f $1 ) ; } Then the command gets much shorter: dvtopen my/file.sv How can I see if a file is read-only? How can I open a file in DVT from Questa? Back to top",
    "section_path": [],
    "tokens": 145,
    "source": "scraped"
  },
  {
    "id": "6e8d7b92-37db-443a-b802-7dccb5e08a54",
    "title": "Macro Expansion | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/macros-support/macro-expansion.html",
    "content": "Macro Expansion | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Macro Expansion Overview You can inspect the code generated by the expansion of a macro in two ways: inline: DVT replaces the macro call with the generated code in place; the expanded code is guarded by pragmas that allow DVT to collapse the code back to the original in a separate editor: DVT opens a new editor window that shows the generated code Triggering To expand Place the cursor on a macro call in the editor, right click, select from the pop-up menu Macros and then the desired expand type. Expansion also works for an entire region of code, and all macros in the selection will be expanded. DVT also marks inline macro expansions in the code and collects them in the tasks view to allow easy tracking. You can choose to expand only the first level (i.e. further macro calls inside the top level macro are not expanded) or all levels. You can quickly collapse a macro expansion by right-clicking on its marker. Note You can also expand all macros in the current file by placing the cursor anywhere in the editor and selecting either Expand All Macros Inline , for expansion in the source file, or Expand All Macros , for expansion in a temporary file. To collapse Place the cursor on the expansion start pragma, and select Collapse Inline Expansion. Warning Do not modify the pragmas generated by DVT because this might break the collapse functionality! DVT will notify you if the macro expansion in the editor does not match the current macro definitions. This may happen either because the expansion or the macro definitions have been modified since the macro was expanded. A compare window will display the differences between the editor expansion and the expansion with current macro definitions. Note You can also collapse all macro expansions in the current file by placing the cursor anywhere in the editor and selecting Collapse All Inline Expansions . Tips Shortcuts There are some handy keyboard shortcuts you can use for triggering: Expand one level inline Ctrl + Shift + = Collapse inline expansion Ctrl + Shift + - Selection Expansion also works for an entire region of code, and all macros in the selection will be expanded. Markers DVT also marks inline macro expansions in the code and collects them in the tasks view to allow easy tracking. Quick collapse You can quickly collapse a macro expansion by right-clicking on its marker. IMPORTANT NOTE Warning Do not modify the pragmas generated by DVT because this might break the collapse functionality! The pragmas are: @DVT_EXPAND_MACRO_INLINE_START @DVT_EXPAND_MACRO_INLINE_ORIGINAL @DVT_EXPAND_MACRO_INLINE_END Inactive Code Highlight Macros and Quick Macros Views On this page Overview Triggering Tips IMPORTANT NOTE Back to top",
    "section_path": [],
    "tokens": 480,
    "source": "scraped"
  },
  {
    "id": "c0566032-4375-4a10-9a6a-a9b1261bfe93",
    "title": "Create Class In New File | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/create-class-in-new-file.html",
    "content": "Create Class In New File | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Create Class In New File An error is triggered when trying to extend a non existing class. Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Create class \u00e2\u0080\u0098\u00e2\u0080\u00a6\u00e2\u0080\u0099 in new file from the list of quick fix proposals and press Enter . A wizard will pop up. Fill in the name and the directory path of the new file. The class is created and the new file opens. Note An include statement is added inside the scope of the child class. Note If the extended class is parameterizable, the definition is computed accordingly with its value or type parameters. Correct Spelling In Comments and Strings Create File From Build Config Editor Back to top",
    "section_path": [],
    "tokens": 156,
    "source": "scraped"
  },
  {
    "id": "4dea081b-aba6-4ab9-af00-71457bdf97ed",
    "title": "Debugger Integration | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/debugger-integration/index.html",
    "content": "Debugger Integration | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Debugger Integration The DVT Debugger Integration allows you to debug your code from within the IDE: add breakpoints, control the simulation (stop, resume, step), inspect variables and so on. You can launch your simulation as usual, or from within DVT using Run Configurations . All you need to do on the simulator side is load a specific DVT debugger library and, depending on the simulator, pass some debug enablement switches. DVT provides a dedicated DVT Debug perspective that helps you perform simulation debug related activities. DVT will prompt you to switch to this perspective whenever you launch or connect to a simulation in debug mode. Simulation Prerequisites Launch a Debug Simulation Connect to an Existing Simulation Breakpoints Threads, Call Stack, Stepping Variables Watch Expressions Debug Specific Configurations External Documentation Simulation Prerequisites Back to top",
    "section_path": [],
    "tokens": 166,
    "source": "scraped"
  },
  {
    "id": "4a2de5d7-43a1-45e0-834a-f4e3693d51c6",
    "title": "Expand .* Port Connections | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/expand--port-connections.html",
    "content": "Expand .* Port Connections | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Expand .* Port Connections You can easily expand .* wildcard named port connections to explicit named port connections. Place the editor cursor either on a module or interface instance declaration and press Ctrl + 1 , select Expand .* port connections from the list of quick assist proposals and press Enter . The .* connections are expanded to named port connections. Note You can customize the look and feel of the explicit named port connections from Window > Preferences > DVT > SystemVerilog > Editor > Content Assist . Tip You can also Right - Click in the editor and go to Refactor > Expand .* Port Connections . Expand Macro Extract to Variable Back to top",
    "section_path": [],
    "tokens": 151,
    "source": "scraped"
  },
  {
    "id": "8303f280-eaab-4cd7-affc-4357ec5a7e4c",
    "title": "Non-top files | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/non-top-files.html",
    "content": "Non-top files | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Non-top files Some of the source files in your project might not be part of the full compilation (they are not referenced from the .dvt/default.build). For example code fragments which have not been integrated yet, or components which are part of a different build configuration than the active one (see Multiple .build Files ).\nFor convenience, all such files are called non-top files . You can easily identify non-top files as they are missing the blue bullet decoration in Eclipse / the C decoration in VS Code. In order to provide advanced functionality when editing non-top files, DVT compiles them ad-hoc when opened, in the global scope.\nAs a result, new problems might be reported and DVT\u00e2\u0080\u0099s internal database is updated, which is reflected in the contents of views, autocomplete, design and class hierarchies etc. When you are done editing a non-top-file and close the editor, all the content contributed by that file is removed: problem markers, types and API, etc. Note Verilog non-top-files are compiled as if part of a library called \u00e2\u0080\u009cnon-top-files\u00e2\u0080\u009d. Note The message of problems reported in non-top files are prefixed with an underscore. This is an indication that problems may be caused by compiling a file ad-hoc out of context. Note By default, the non-top-files compilation is enabled. You can disable it by specifying the +dvt_disable_nontop_files_compilation directive. Build Configurations default.build Back to top",
    "section_path": [],
    "tokens": 260,
    "source": "scraped"
  },
  {
    "id": "5ddf3533-f585-4a5c-8048-1d95b71dc0d6",
    "title": "Xilinx Libraries Compilation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/xilinx-libraries-compilation.html",
    "content": "Xilinx Libraries Compilation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Xilinx Libraries Compilation In order to compile Xilinx libraries: specify the required libraries using the +dvt_init_xilinx directive specify the Xilinx installation path (ISE or Vivado), unless $DVT_XILINX_HOME system variable is set For example: + dvt_init_xilinx + UNISIM + UNIMACRO_VER + dvt_setenv + DVT_XILINX_HOME =/ apps / xilinx / Vivado / 2014.2 / The available libraries are UNISIM, UNIMACRO, UNIFAST, XILINXCORELIB, CPLD, SIMPRIM, SECUREIP_VER, UNISIMS_VER, UNIFAST_VER, UNIMACRO_VER, SIMPRIMS_VER, XILINXCORELIB_VER, UNI9000_VER, CPLD_VER, RETARGET, XPM. Precompilation support for Xilinx Libraries By default, the Verilog/SystemVerilog Xilinx Libraries are automatically precompiled in order to speed up the full build of the project. Note To disable the default precompilation of Xilinx Libraries you can use the +dvt_disable_library_precompilation+XILINX directive. SystemVerilog OVM or UVM Library Compilation Intel(Altera) Quartus Libraries Compilation On this page Precompilation support for Xilinx Libraries Back to top",
    "section_path": [],
    "tokens": 166,
    "source": "scraped"
  },
  {
    "id": "e918e949-0398-499b-9f98-8a8ff84cd696",
    "title": "Syntax | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/command-line-interface/syntax.html",
    "content": "Syntax | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Syntax Usage dvt_cli.sh [-h[elp]] [-s[ilent]][-noexit] [-nostart] [-timeout <sec>] [-net_timeout <sec>] [-workspace <dir>] [-eclipsespace <dir>] [-heap_size <size>] [-stack_size <size>] [-options <opt>] [-import_workspace_settings <dir>] [-force_import_workspace_settings <dir>] [-eclipse_ini <file>] [-eclipse_args <args> --] [-vscode] [-ls_id <id>] <command> -h[elp] Show this help. -s[ilent] Suppress script output (WARNING, INFO), allow only ERRORS and DVT CLI command results. -noexit If the script starts a new DVT do not exit until DVT is closed. (Not supported on Windows) -nostart Do not start a new DVT, if no DVT is found wait -timeout <seconds> before ending. -timeout <sec> Maximum number of seconds to wait for a DVT session to start. Default is 100. -net_timeout <sec> Maximum number of seconds to wait for a response from DVT after a session has started. Default is 10. -workspace <dir> Path to the Eclipse workspace. If not specified $DVT_WORKSPACE_PATH will be used.\nIf $DVT_WORKSPACE_PATH is not set it will use the last workspace where a DVT was started. -eclipsespace Path to a custom Eclipse storage directory to be used instead of ~/.eclipse. (Not supported on Windows) -heap_size <size> Set the Java heap size (syntax is <N>[g|G|m|M|k|K]). Default is 3072m. -stack_size <size> Set the Java thread stack size (syntax is <N>[g|G|m|M|k|K]). Default is 4m. -options <opt> Comma separated list of options (only for Linux): disable_browser - do not use SWT browser component and skip auto - config disable_swt_auto_config - do not auto - config SWT GTK version and SWT browser engine disable_chromium - do not use bundled Chromium browser engine disable_xulrunner - do not use bundled XULRunner browser engine disable_webkit - do not use OS 's WebKit browser engine disable_cairo - do not use Cairo advanced graphics library disable_force_gtk2 - do not force Eclipse to use GTK2 disable_gtk_theme - do not use custom GTK2 themes generated through DVT disable_force_classic_theme - do not force Eclipse to use the classic theme disable_gtk_scroll_overlay - use traditional scrollbars instead of scrollbars overlayed on top of content disable_shutdown_timeout - do not force stop JVM when shutdown exceeds 5 seconds dump_allocated_swt_resources - dump SWT allocated resources when 'No more handles' error is thrown disable_chromium_mtml - do not use Chromium multithreaded message loop disable_chromium_launcher_library - do not use Chromium launcher library disable_chromium_early_init - do not use early init for Chromium browser engine disable_chromium_web_security - do not enforce same - origin policy for Chromium browser engine dump_allocated_swt_resources - dump SWT allocated resources when 'No more handles' error is thrown -import_workspace_settings <dir> Path to the workspace from where settings will be imported. (Not supported on Windows) -force_import_workspace_settings <dir> Same as -import_workspace_settings, but it will overwrite target workspace settings. (Not supported on Windows) -eclipse_ini <file> Path to an eclipse.ini file to be used instead of the default eclipse.ini. See: http://wiki.eclipse.org/Eclipse.ini . -eclipse_args <args> A list of eclipse.ini arguments to be passed directly to the Eclipse binary. To indicate the end of list use \u00e2\u0080\u0093 argument.\nSee: http://wiki.eclipse.org/Eclipse.ini . -vscode Launches DVT IDE for VS Code by invoking  dvt_code.sh using the same arguments. -ls_id <id> Specifies the id of the Language Server to which the command should be sent. Only works when -vscode is provided. <command> The CLI command and arguments to be sent to DVT. dvt_cli.sh Examples Back to top",
    "section_path": [],
    "tokens": 557,
    "source": "scraped"
  },
  {
    "id": "b833d817-a8ec-4ca2-a9c7-017768949145",
    "title": "Customizing the Dialog Output | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/custom-dialogs/customizing-the-dialog-output.html",
    "content": "Customizing the Dialog Output | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Customizing the Dialog Output Because the id of a widget can be any string, you can construct a wide variety of output formats simply by changing the form of the id. Some common use-cases are: Bash style dash arguments, e.g.: id=\u00e2\u0080\u009d -name \u00e2\u0080\u009c => -name value Simulator style plus arguments, e.g.: id=\u00e2\u0080\u009d +incdir+\u00e2\u0080\u009d => +incdir+value Make style equals arguments, e.g.: id=\u00e2\u0080\u009d name=\u00e2\u0080\u009d => name=value The dvt:Container widget This widget acts just like a Composite (i.e. you can surround sets of widgets or composites with it), but also takes some configuration parameters that are applied for all the widgets it contains. To specify values for checkboxes use checkboxOffValue and checkboxOnValue parameters: XML <dvt:Container layout= \"layout:grid;\" parameters= \"checkboxOnValue: -cov 1;checkboxOffValue: -cov 0\" > <Button id= \" \" style= \"CHECK\" text= \"Collect coverage\" selection= \"true\" /> </dvt:Container> <dvt:Container layout= \"layout:grid;\" parameters= \"checkboxOnValue: -wave 1;checkboxOffValue: -wave 0\" > <Button id= \" \" style= \"CHECK\" text= \"Dump wave\" /> </dvt:Container> Output: -cov 1 -wave 0 The default separator for list elements is ; . To change it, use listSeparator parameter: XML <dvt:Container parameters= \"listSeparator: -f \" > <dvt:DirectoryFilesListing id= \" -f \" rootDirectory= \"/tmp/files\" /> </dvt:Container> Output: -f file_1 -f file_3 -f file_5 -f file_7 To prevent the widget id from being output when the value is empty use noIdForEmptyValues parameter: XML <dvt:Container parameters= \"noIdForEmptyValues:true\" > <Text id= \" -text \" ></Text> </dvt:Container> To quote values use quoteWith parameter: XML <dvt:Container layout= \"layout:grid;numColumns:2;\" parameters= \"quoteWith:'\" > <Label text= \"Text:\" ></Label> <Text id= \" -text \" style= \"BORDER\" text= \"text with whitespace that needs to be quoted\" /> </dvt:Container> Output: -text \u00e2\u0080\u0098text with whitespace that needs to be quoted\u00e2\u0080\u0099 Note If you wish to quote a string with double quotes you should escape the double quote character from XML syntax as follows: <dvt:Container parameters=\u00e2\u0080\u009dquoteWith:&quot;\u00e2\u0080\u009d> To show information about the value of a certain widget in the console title use showInTitle parameter: XML <dvt:Container parameters= \"showInTitle:true\" > <Label text= \"Seed:\" ></Label> <Text id= \" -seed \" style= \"BORDER\" text= \"42223\" /> </dvt:Container> Output To disable a set of widgets based on the selection state of a radio button, checkbox or the value of a combobox or text widget, wrap the set of widgets you want to disable in a <dvt:Container> and specify which widget dictates its enablement using the enabler attribute. You can refer to a widget with its standard XML XPath within the dialog xml: XML <Group text= \"Radio buttons\" layout= \"layout:fill;type:VERTICAL;\" > <Button id= \" -test random\" style= \"RADIO\" text= \"Run a random test\" selection= \"true\" /> <Button style= \"RADIO\" text= \"Run a specific test\" /> </Group> <dvt:Container enabler= \"/Composite/Composite[1]/Group[1]/Button[2]\" layout= \"layout:fill;type:HORIZONTAL;\" > <sv:ClassSelector id= \" -test \" question= \"Pick test\" baseClassName= \"uvm_test\" /> </dvt:Container> Output XML <Combo items= \"run_random_test;run_specific_test\" layoutData= \"horizontalAlignment:CENTER;\" > </Combo> <dvt:Container enabler= \"/Composite/Composite[1]/Combo == run_specific_test\" layout= \"layout:fill;type:HORIZONTAL;\" > <sv:ClassSelector id= \" -test \" question= \"Pick test\" baseClassName= \"uvm_test\" /> </dvt:Container> Output You can combine the states of multiple buttons or comboboxes/text widgets using logical operators, and you can refer the same widget from multiple <dvt:Container> widgets: XML <Group text= \"Resolution\" layout= \"layout:row;type:VERTICAL;\" > <Button style= \"RADIO\" text= \"800x600\" selection= \"true\" /> <Button style= \"RADIO\" text= \"1024x768\" /> <Button style= \"RADIO\" text= \"1280x1024\" /> <Button style= \"RADIO\" text= \"1600x1200\" /> </Group> <Group text= \"Refresh Rate (Hz)\" layout= \"layout:row;type:VERTICAL;\" > <Button style= \"RADIO\" text= \"70\" /> <dvt:Container enabler= \"/Composite/Composite[1]/Group[1]/Button[1] || /Composite/Composite[1]/Group[1]/Button[2] || /Composite/Composite[1]/Group[1]/Button[3]\" > <Button style= \"RADIO\" text= \"80\" /> </dvt:Container> <dvt:Container enabler= \"!/Composite/Composite[1]/Group[1]/Button[3] &amp;&amp; !/Composite/Composite[1]/Group[1]/Button[4]\" > <Button style= \"RADIO\" text= \"90\" /> </dvt:Container> <dvt:Container enabler= \"/Composite/Composite[1]/Group[1]/Button[1]\" > <Button style= \"RADIO\" text= \"100\" /> </dvt:Container> </Group> <Group text= \"Color depth (bpp)\" layout= \"layout:row;type:VERTICAL;\" > <dvt:Container enabler= \"/Composite/Composite[1]/Group[1]/Button[1] || /Composite/Composite[1]/Group[1]/Button[2]\" > <Button style= \"RADIO\" text= \"16\" /> </dvt:Container> <dvt:Container enabler= \"/Composite/Composite[1]/Group[1]/Button[3] || /Composite/Composite[1]/Group[1]/Button[4]\" > <Button style= \"RADIO\" text= \"32\" /> </dvt:Container> </Group> Output Note To easily obtain the XPath to a specific widget run the dialog once, and identify the widget(s) inside the <dialog_name>.snapshots.xml file which is automatically generated/updated by DVT after each run. Further customization can easily be achieved by using a simple script for processing arguments. E.g. with the following bash snippet you can convert any argument to any desired form: #!/bin/bash # # bash_arg_converter.sh # while [ $# -gt 0 ] ; do case $1 in -custom_* ) argname = \" $1 \" shift argval = \" $1 \" ## Customize here to desired format ## echo -n \" $argname $argval \" ;; * ) echo -n \" $1 \" ;; esac shift done In the configuration command box use the following instead of ${dvt_dialog_prompt}: ./bash_arg_converter.sh ${dvt_dialog_prompt:customdialog.swtxml} How to avoid quoting problems In the .swtxml file it is recommended to use \\&quot; for nested quotes and for the Launch Command (Run Configurations > Launch Command) the variable ${dvt_dialog_prompt:customdialog.swtxml} should be surrounded by quotes, like in the image below: Quick Steps SWT/XML Reference Back to top",
    "section_path": [],
    "tokens": 838,
    "source": "scraped"
  },
  {
    "id": "3f9b6df9-5bf1-49a5-8368-22127965bfde",
    "title": "External | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-formatting/external.html",
    "content": "External | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide External When enabled, all other code formatting options are disabled and code formatting is performed using the given command. Format Multiple Files Preferences Keys Back to top",
    "section_path": [],
    "tokens": 58,
    "source": "scraped"
  },
  {
    "id": "6ab8986f-d649-4197-be3e-79783ae0f452",
    "title": "Template Configuration | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/project-templates/template-configuration.html",
    "content": "Template Configuration | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Template Configuration template-config.xml You may use the template-config.xml file in the template directory to: specify default values and description for the parameters define template parameter filters template-config.xml file syntax <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <!DOCTYPE template-config PUBLIC \"-//DVT//template_config\" \"template_config.dtd\"> <template-config version= \"1\" > <parameter-config name= \"pn\" default-value= \"i2c\" description= \"Package Name\" /> <parameter-filter type= \"REJECT\" identifier= \"__main__\" path= \"*.py\" /> </template-config> The <parameter-config> tag allows you to define default values and description for parameters. Attributes: name : the parameter name, excluding surrounding double underscores / x_\u00e2\u0080\u00a6_x (mandatory) default-value : the default value to be used when generating a project from template description : the description to be displayed in the wizard when generating a project from template If a config is specified multiple times for the same parameter, the last one has precedence.\nIf a template.config file is also present in the template it has a lower priority (that is, it is analyzed before the template-config.xml). The <parameter-filter> tag allows you to skip replacement of particular identifiers in particular template files. Attributes: type : ALLOW or REJECT (mandatory) identifier : a simple pattern to be matched against the full template parameter identifier (including surrounding underscores or x_\u00e2\u0080\u00a6_x ) path : a simple pattern to be matched against the full path of the template file At least one of the identifier or path attributes must exist.\nFilters are cumulative. For example in a particular file you can allow only identifiers matching __tp_*__ like this: < parameter - filter type = \"REJECT\" identifier = \"*\" path = \"*/template/file.sv\" /> < parameter - filter type = \"ALLOW\" identifier = \"__tp_*__\" path = \"*/template/file.sv\" /> The following parameters are predefined: __user__ expands to current user name __date__ expands to current date __year__ expands to current year template.config Starting with DVT 19.1.37, this file is deprecated, use template-config.xml instead. You may use the template.config file in the template directory to specify default values and description for the parameters: name,value,description pkg_prefix,ti_i2c,The verification component prefix PKG_PREFIX,TI_I2C,For defines Some parameters are predefined: __user__ expands to current user name __date__ expands to current date __year__ expands to current year How to generate code from a project template Add from Template On this page template-config.xml template.config Back to top",
    "section_path": [],
    "tokens": 400,
    "source": "scraped"
  },
  {
    "id": "59065fcb-5348-4765-a0ef-8b92bee69a6d",
    "title": "How can I see if a file is read-only? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-can-i-see-if-a-file-is-read-only.html",
    "content": "How can I see if a file is read-only? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How can I see if a file is read-only? To enable read-only decorators for Navigator(1), Editor(2) and Refactoring Preview(3) go to: Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT and select the Show read-only decorators checkbox. How to automatically checkout/lock files from the revision control system ? How can I open a file in DVT from the terminal? Back to top",
    "section_path": [],
    "tokens": 97,
    "source": "scraped"
  },
  {
    "id": "c34b962e-467d-4a3b-8219-6dc3e6117895",
    "title": "OVM Field Editor | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ovm-support/ovm-field-editor.html",
    "content": "OVM Field Editor | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide OVM Field Editor The OVM Field Editor enables you to inspect and edit OVM field registrations. It allows you to quickly add, remove and edit the registration macros and presents field statistics (total no. of fields, no. of registered fields, no. of warnings/errors). Triggering Triggering the OVM Field Editor for a certain class: place the cursor anywhere inside the class definition, right click and select Source > UVM Field Editor from the pop-up menu. If you place the cursor on a field, the OVM Field Editor will show up with the respective field selected. If there are no previously registered macros, the ovm_*_utils_begin and ovm_*_utils_end macros shall be determined based on the class found at the cursor position. For a class that inherits from ovm_sequence, a pop-up dialog will ask you to select the desired sequencer from the available ones. Interface On the left side of the Field Editor Dialog there is a list containing all the fields in the class. You can register/unregister the class by clicking on the checkbox in the Class group. When the class is registered you can register or unregister fields by checking the corresponding checkboxes. When selecting a field you can also find information about the macro used for registration in the OVM Registration Macro group. If it\u00e2\u0080\u0099s not the desired macro you can fix it using the Fix button. On the right side you can see the flag status of the registered fields. Its main features are highlighted and explained below: Summary information regarding registrations: no. of registered fields, total no. of fields in class, no. of errors, no. of warnings. Content Filters matched indication Class checkbox that allows you to toggle the registration state. Field type Field name Field icon. The field icons have the following meanings: Icon Meaning The class is not registered The class is registered The field is a virtual interface The field is instantiated and is a UVM Component The field is instantiated and is a UVM Object The field is a port The field is an array The field is not registered. The field is registered. The field is registered and affected by a warning. The field is registered and affected by an error. Field registration checkbox that allows you to toggle the registration state. Select/Deselect all buttons. Used to register/unregister all the fields in a class. Fix button. Used to fix a macro registration if the right one isn\u00e2\u0080\u0099t used The UVM Registration Macro that is currently used for the selected field. Message area: displays error/warning messages. Field operation checkbox. If checked, the flag will be added to the registration. Field operation controls: allow you to select / clear all of the checkboxes. Print radix radio button. If checked, the radix will be set in the registration. At most one radix can be specified. Tooltip: hover with the mouse pointer any field operation checkbox or print radix radio button to obtain information about the flag. Clear print radix: allows you to unset the print radix (set all radio buttons off). Problems OVM Field Editor reports the following problems: Message Severity This field is registered with <current_macro_name> instead of <macro_determined_by_dvt> Error Radix flag is specified more than once. Error The flags for the field registration are incorrectly specified. They should be OR-ed together using \u00ef\u00bf\u00bd (pipe character). Error DVT could not determine a registration macro for this field. ovm_field_object will be used. Warning Tips Shortcut You can quickly trigger by using Shift + Alt + G . Fixing problems To fix a problem, press the fix button if it\u00e2\u0080\u0099s a wrong registration macro or unregister and register the field. Note Registering and unregistering the field will reset the flags/registration macro. Multiple selection You can\u00e2\u0080\u0099t use multiple selection to perform registration/unregistration of more fields. Note If you want you can register/unregister all the fields using the Select/Deselect all buttons. OVM Compliance Review OVM Smart Log On this page Triggering Interface Problems Tips Back to top",
    "section_path": [],
    "tokens": 690,
    "source": "scraped"
  },
  {
    "id": "38edc3f3-4547-4171-b7ea-cffce50a954a",
    "title": "Compilation Speed-up | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/compilation-speed-up.html",
    "content": "Compilation Speed-up | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Compilation Speed-up Several DVT directives can optimize build times by either condensing the scope of the full build analysis or by restricting certain features within specific code segments. This application note addresses questions related to performance, specifically regarding the duration of the full build process and the amount of memory used. How to exclude files from compilation? You can achieve this by using the +dvt_skip_compile directive . This allows DVT to bypass specific files completely during build. Benefits of this approach include reduced build times and lower memory usage. However, this may lead to false errors when DVT does not compile definitions for certain types (such as classes, modules, typedefs, etc.). To address these errors, you may need to use Compile Waivers . The directive is available in multiple variations: +dvt_skip_compile+<simple_pattern> +dvt_skip_compile+not+<simple_pattern> +dvt_skip_compile+regex+<regex_pattern> +dvt_skip_compile+regex+not+<regex_pattern> For simple patterns, wildcards like * (to match any sequence of characters) and ? (to match a single character) are available. The provided patterns are matched against file absolute paths. Examples To exclude every file located within the /dir1/ directory + dvt_skip_compile +*/ dir1 /* To exclude everything but files within the /dir1/ directory + dvt_skip_compile + not +*/ dir1 /* To exclude files in both the /dir1/ and /dir2/ directories, you have two options. You can sequentially use two directives: + dvt_skip_compile + not +*/ dir1 /* + dvt_skip_compile + not +*/ dir2 /* Alternatively, you can achieve the same effect with a single regular expression directive: + dvt_skip_compile + regex + not + ( .*/ dir1 /.*|.*/ dir2 /.* ) This approach allows you to tailor the compilation process precisely, ensuring that only the desired files are compiled, thereby reducing build time and memory usage. Note If +dvt_skip_compile+not is the first skip directive DVT encounters, it automatically assumes that a +dvt_skip_compile+ directive has been applied beforehand. Note The +dvt_skip_compile directive affects only the +dvt_init section it resides in. To extend the same skip compile directives to every +dvt_init section , you should employ the +dvt_prepend_init directive. + dvt_prepend_init + dvt_skip_compile +*/ dir1 /* + dvt_init ... build configuration directives ... + dvt_init ... build configuration directives ... The order of skip compile directives dictates the selection of files to bypass during compilation. Thus, employing the setup below leads to the exclusion of all files in the dir1 directory, aside from those in the dir1/dir2 subdirectory. + dvt_skip_compile +*/ dir1 /* + dvt_skip_compile + not +*/ dir1 / dir2 /* Skipped files are decorated distinctively in the Navigator View / Explorer View. DVT Eclipse: DVT for VS Code: How to exclusively compile the API? Shallow compilation can be used to speed up full build in scenarios where you\u00e2\u0080\u0099re working with third-party IPs or internal code that doesn\u00e2\u0080\u0099t change. It instructs DVT to partially parse the code, focusing on the API and bypassing the details. This means, for example, that within modules, it will only analyze ports and parameters, and for functions and tasks, solely the signature (arguments and their types). This strategy of partial parsing through shallow compilation leads to significant improvements in efficiency, reducing both the duration of builds and the demand on memory resources. Obviously, the optimization gains from shallow compilation are not as substantial as those offered by the +dvt_skip_compile directive . However,  modules and functions are included in the Autocomplete suggestions, features such as \u00e2\u0080\u009cOpen Declaration\u00e2\u0080\u009d hyperlinks function correctly, and perhaps most crucially, it does not introduce new errors, eliminating the necessity for Compile Waivers. This ensures a smoother coding experience, with essential code navigation and completion features readily accessible without the complication of additional errors, like NON_EXISTING_* or UNDECLARED_* errors which may appear when using +dvt_skip_compile directive. To enable the shallow compilation, use the following directive: + dvt_shallow_compile +< scope > [ + not |+ regex |+ regex + not ] +< pattern > Within this structure, <scope> can be any of the following: FILE : All the modules and functions in files whose absolute paths match the specified <pattern> will be shallow compiled. MODULE : All modules with fully qualified names that match the specified <pattern> will be shallow compiled. FUNCTION : All functions with fully qualified names that match the specified <pattern> will be shallow compiled. This directive grants precise control over shallow compilation\u00e2\u0080\u0099s scope, enabling the selective application to files, modules, or functions based on their specified names or paths. A fully qualified name is defined by its encompassing hierarchical scope path. For instance, consider a function named foo located within my_class , which resides in my_pkg ; the fully qualified name would be my_pkg::my_class.foo . For simple patterns, wildcards like * (to match any sequence of characters) and ? (to match a single character) are available. The order of shallow compile directives dictates which modules or functions are to undergo shallow compilation. Thus, employing the setup below leads to the shallow compilation of all functions in the my_pkg package, aside from those that contain my_func in their fully qualified name. + dvt_shallow_compile + FUNCTION + my_pkg :: * + dvt_shallow_compile + FUNCTION + not +* my_func * Note If +dvt_shallow_compile+not* is the initial shallow directive DVT encounters, it automatically assumes that a +dvt_shallow_compile+FILE+* directive has been applied beforehand. Note The +dvt_shallow_compile directive affects only the +dvt_init section it resides in. To extend the same skip compile directives to every +dvt_init section, you should employ the +dvt_prepend_init directive. + dvt_prepend_init + dvt_shallow_compile + MODULE +* + dvt_init ... build configuration directives ... + dvt_init ... build configuration directives ... Examples Shallow compile everything +dvt_shallow_compile+FILE+* Shallow compile the entire design except the testbench top +dvt_shallow_compile+MODULE+* +dvt_shallow_compile+MODULE+not+fully_qualified_name_of_tb_top Shallow compile a specific portion of the project - all files that meet a certain pattern +dvt_shallow_compile+FILE+*pattern* Shallow compile all functions within a given package +dvt_shallow_compile+FUNCTION+vip_pkg::* Shallow compile everything but exclude a specific package +dvt_shallow_compile+FILE+* +dvt_shallow_compile+FUNCTION+not+compiled_pkg::* Visual indicators are added in multiple places: A notification at the top of the editor Not available in VS Code An \u00e2\u0080\u009c[S]\u00e2\u0080\u009d indicator in the views: Compile Order, Types, Design Hierarchy, Verification Hierarchy An \u00e2\u0080\u009c[S]\u00e2\u0080\u009d indicator in the diagrams: Schematic Diagrams, UVM Component Diagrams A \u00e2\u0080\u009c(shallow)\u00e2\u0080\u009d indicator in the Console View during full build Note Instances of modules or UVM components that have been shallow compiled will not have any children nodes in Design Hierarchy and Verification Hierarchy VIew. Note Some features may not be fully operational within the shallow compiled sections of code. For example, refactoring a class variable name will not change its references within a shallow compiled function. Similarly, showing the usages of a package parameter will not show its usages within a shallow compiled module. Any references in non-shallow compiled code will work as expected. How to improve the elaboration time? To improve the elaboration time, you can configure it with the directives found in the Elaboration Debugging documentation page. Design Elaboration Precompilation Support On this page How to exclusively compile the API? How to improve the elaboration time? Back to top",
    "section_path": [],
    "tokens": 1182,
    "source": "scraped"
  },
  {
    "id": "cdad9020-5db0-46c7-8680-d54375dd3725",
    "title": "Code Formatting | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-formatting/index.html",
    "content": "Code Formatting | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Code Formatting In order to format a selected region of code or an entire file, use the Format Source action. Press Ctrl + Shift + F or use editor\u00e2\u0080\u0099s right click menu Source \u00e2\u0080\u00a3 Format Source . All code formatting preferences are available at menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Editor \u00e2\u0080\u00a3 Formatting . Whitespace Indentation Vertical Alignment Vertical Align Patterns (ro.amiq.vlogdt/format.vertical_align.vregex) Line Wrapping Disable Format for Code Sections Format Multiple Files External Preferences Keys Automatic Indentation As You Type Add from Template Whitespace Back to top",
    "section_path": [],
    "tokens": 122,
    "source": "scraped"
  },
  {
    "id": "40b326c3-5fc4-4933-a57b-3c051d014de3",
    "title": "Threads, Call Stack, Stepping | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/debugger-integration/threads-call-stack-stepping.html",
    "content": "Threads, Call Stack, Stepping | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Threads, Call Stack, Stepping From the Debug View you can: See all the threads and the call stack of the current thread. Switch to another thread: right click > Set Thread Active (e Language Only). Move up and down in the call stack. The Variables View is automatically updated and presents the variables in the current frame (function/task/process/method/tcm). The Editor always highlights and indicates the currently executed line. The buttons in the Debug section of the toolbar allow you to: Skip all breakpoints Resume (continue) a stopped simulation Suspend (stop in debugger) a running simulation Terminate a simulation, if launched by means of a DVT Generic Debug Configuration Disconnect from a simulation Step into, step over, step out (step return) Breakpoints Variables Back to top",
    "section_path": [],
    "tokens": 159,
    "source": "scraped"
  },
  {
    "id": "a02c1a8c-5931-4978-ac7c-f6bf380f992a",
    "title": "Declare Extern Prototype | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/declare-extern-prototype.html",
    "content": "Declare Extern Prototype | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Declare Extern Prototype An error is triggered when an implementation does not have a corresponding declaration, for example in the case of functions. Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Declare extern function prototype \u00e2\u0080\u00a6 from the list of quick fix proposals and press Enter . The method prototype is inserted in the appropriate scope. Note The method signature (return type, argument names and types) is automatically detected from the context. Note Depending on the context, several quick fix proposals might be available: declare extern function prototype declare extern task prototype declare extern constraint prototype (implicit or explicit) Tip You can change the method signature or constraint block by editing the Method Code Templates or Constraint Code Templates . Create Interface Class In New File Declare Method Back to top",
    "section_path": [],
    "tokens": 171,
    "source": "scraped"
  },
  {
    "id": "ff9ae97d-9b10-468c-b094-ce8a0e8aabbb",
    "title": "Connect Instance Ports by Position | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/connect-instance-ports-by-position.html",
    "content": "Connect Instance Ports by Position | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Connect Instance Ports by Position You can easily convert the port connections of an instance from named to positional. Place the cursor on an instance and press Ctrl + 1 , select Connect instance ports by position from the list of quick assist proposals and press Enter . The instance ports are connected by position. Tip You can also Right - Click in the editor and go to Refactor > Connect Instance Ports by Position . Connect Instance Ports by Name Collapse Macro Back to top",
    "section_path": [],
    "tokens": 121,
    "source": "scraped"
  },
  {
    "id": "afd1260f-de3f-41ac-93e0-15b58a44000b",
    "title": "Format Multiple Files | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-formatting/format-multiple-files.html",
    "content": "Format Multiple Files | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Format Multiple Files In order to format multiple files at once, use the Format Source Files action. Select the files or directories you want to format in the Project Explorer , right click and choose Format Source Files . The selected directories are scanned recursively for source code files.\nSource code files are: files which were compiled by the DVT builder (e Language, SystemVerilog, VHDL, etc) files which were not compiled by DVT but have an extension which is mapped to a content type which in turn is mapped to one of the enabled DVT project natures Note If any of the affected files are read-only, you will be prompted to make them writable. Tip Remaining read-only files will be skipped. A list of all skipped files can be found in the Format Multiple Files Console . Note You can at any time configure a keyboard shortcut to easily format source files from an entire project. To do so, simply go to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Keys , search for the Format Project and choose a convenient key binding. Disable Format for Code Sections External Back to top",
    "section_path": [],
    "tokens": 223,
    "source": "scraped"
  },
  {
    "id": "8322b35b-2c72-4567-8331-f9b8f8debd1b",
    "title": "e Language SPECMAN_PATH | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/e-language-specman_path.html",
    "content": "e Language SPECMAN_PATH | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide e Language SPECMAN_PATH The SPECMAN_PATH environment variable is used by the e Language parser to find imported files.\nIt comprises of a list of search directories, separated by the OS-specific path separator character (\u00e2\u0080\u0098:\u00e2\u0080\u0099 colon on Linux and \u00e2\u0080\u0098;\u00e2\u0080\u0099 semicolon on Windows). It can be defined or altered by using the +dvt_setenv+ directive. When relative paths are provided, they are automatically transformed into paths relative to the compilation root directory. By default the compilation root is the project directory. For more details see Paths . Examples: Action Linux Windows Define/overwrite shell-inherited value +dvt_setenv+SPECMAN_PATH=/my/specman/path1:/my/specman/path1 +dvt_setenv+SPECMAN_PATH=/my/specman/path1;/my/specman/path1 Append to shell-inherited value +dvt_setenv+SPECMAN_PATH=$SPECMAN_PATH:/my/specman/path +dvt_setenv+SPECMAN_PATH=$SPECMAN_PATH;/my/specman/path Prepend to shell-inherited value +dvt_setenv+SPECMAN_PATH=/my/specman/path:$SPECMAN_PATH +dvt_setenv+SPECMAN_PATH=/my/specman/path;$SPECMAN_PATH Append <project_root>/e directory to the SPECMAN_PATH +dvt_setenv+SPECMAN_PATH=$SPECMAN_PATH:e +dvt_setenv+SPECMAN_PATH=$SPECMAN_PATH;e Backward-compatibility note: starting with DVT version 3.2, if a .build file is used to configure the project, the .edt_specman_path file is ignored. Adding VIPs to $SPECMAN_PATH using sn_which.sh You can specify a list of VIPs that should automatically be located by DVT using sn_which.sh and added to the $SPECMAN_PATH (if available in the console where DVT was started). The Specman version defines (e.g define SPECMAN_VERSION_###) are also detected using the same mechanism. By default, the following VIPs are located and added automatically: evc_util, vr_ad, ovm_e, uvm_e e Language Test Files SystemVerilog OVM or UVM Library Compilation On this page Adding VIPs to $SPECMAN_PATH using sn_which.sh Back to top",
    "section_path": [],
    "tokens": 255,
    "source": "scraped"
  },
  {
    "id": "11a03761-3d4f-423e-8642-fdb430a416a2",
    "title": "Create Interface Class In New File | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/create-interface-class-in-new-file.html",
    "content": "Create Interface Class In New File | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Create Interface Class In New File An error is triggered when trying to implement a non existing interface class. Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Create interface class \u00e2\u0080\u0098\u00e2\u0080\u00a6\u00e2\u0080\u0099 in new file from the list of quick fix proposals and press Enter . A wizard will pop up. Fill in the name and the directory path of the new file. The interface class is created and the new file opens. Note An include statement is added inside the scope of the child class. Note If the implemented interface class is parameterizable, the definition is computed accordingly with its value or type parameters. Create Included File Declare Extern Prototype Back to top",
    "section_path": [],
    "tokens": 156,
    "source": "scraped"
  },
  {
    "id": "70161034-eeaa-482a-b36c-b82e6ae0777c",
    "title": "Custom Dialog Snapshots | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/custom-dialogs/custom-dialog-snapshots.html",
    "content": "Custom Dialog Snapshots | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Custom Dialog Snapshots All the values that you enter in various input fields of a Custom Dialog are automatically saved as a \u00e2\u0080\u009csnapshot\u00e2\u0080\u009d. In other words, the snapshot stores the Custom Dialog state. The next time you open the Custom Dialog, you\u00e2\u0080\u0099ll see the values that you previously entered, as they are restored from the snapshot. At any time you can explicitly save the dialog state as a snapshot with a meaningful name. Both automatically saved and explicitly saved snapshots are stored in the <project_root>/.dvt/<dialog_name>.snapshots.xml file. Besides being a snapshots repository, this file is a mean to share snapshots with colleagues working on the same project. In addition, as another mean to share, you can  \u00e2\u0080\u009ccopy to clipboard\u00e2\u0080\u009d the current dialog inputs and send them, for example by email or instant messaging, to a colleague who will \u00e2\u0080\u009cpaste from clipboard\u00e2\u0080\u009d to fill-in the dialog inputs with your values. If you chose a snapshot and change a few values, to avoid overwriting the original snapshot, a new timestamped version is automatically created. For example, assuming you select snapshot \u00e2\u0080\u009cbug_235\u00e2\u0080\u009d and change the seed input field, you will get a new timestamped snapshot called \u00e2\u0080\u009cbug_235 [2015-02-20 14:02:53]\u00e2\u0080\u009d. This is to avoid breaking the original snapshot. You can explicitly save \u00e2\u0080\u009cbug_235 [2015-02-20 14:02:53]\u00e2\u0080\u009d as \u00e2\u0080\u009cbug_235\u00e2\u0080\u009d to update the original snapshot. You can at any time explicitly save \u00e2\u0080\u009cbug_235\u00e2\u0080\u009d after you change some values. When there are no changes compared with the saved snapshot, a timestamped snapshot will not be created. When there are changes, if a previous timestamped snapshot already exists, it will be deleted and a new timestamped snapshot is created. This is to avoid accumulating many timestamped snapshots. A \u00e2\u0080\u009cdefault\u00e2\u0080\u009d snapshot is always available and it contains the dialog state as specified in the Custom Dialog XML definition. It cannot be overwritten. Actions To load an existing snapshot select the desired one from the combo (see #1). The dropdown menu (see #2) provides the following actions: Save - Save the dialog state into the current snapshot Save as\u00e2\u0080\u00a6 - Save the dialog state as a new snapshot (or overwrite an existing one) Copy To Clipboard - Copies to clipboard the xml dialog state Paste From Clipboard - Loads from clipboard the xml dialog state Custom Dialog Snapshots File Syntax (XML) <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <dialog-snapshots last-snapshot=\"#LAST_RUNNED_SNAPSHOT#\" version=\"1\"> <-- #COMMENT# --> <snapshot name=\"#SNAPSHOT_NAME_1#\" > <element path=\"#ELEMENT_PATH_1#\" value=\"#ELEMENT_VALUE_1\" /> ... <element path=\"#ELEMENT_PATH_N#\" value=\"#ELEMENT_VALUE_N\" /> </snapshot> ... <snapshot name=\"#SNAPSHOT_NAME_N#\" timestamp=\"true\"> <!-- A timestamped snapshot. Timestamped snapshots are maintained by DVT.--> <!-- Avoid defining timestamped snapshots! --> ... </snapshot> </dialog-snapshots> #LAST_RUNNED_SNAPSHOT# Mandatory Name of the last ran snapshot #COMMENT# Any valid XML comment (must not contain --> ) #SNAPSHOT_NAME# Mandatory Uniquely identifies the snapshot #ELEMENT_PATH# Mandatory Uniquely identifies a widget from the custom dialog It is standard XML XPath that has the following structure: \u00e2\u0080\u009c/Composite/Composite[1]/Group[1]/Button[1]\u00e2\u0080\u009d #ELEMENT_VALUE# Mandatory Value of the widget selected by #ELEMENT_PATH# SWT/XML Reference Command Line Interface On this page Custom Dialog Snapshots File Syntax (XML) Back to top",
    "section_path": [],
    "tokens": 529,
    "source": "scraped"
  },
  {
    "id": "7b83d814-48b7-4404-b728-6bd7731459e3",
    "title": "Install DVT Using a pre-packed Distribution | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/installation/distribution.html",
    "content": "Install DVT Using a pre-packed Distribution | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Install DVT Using a pre-packed Distribution The recommended way of installing DVT is by using a pre-packed distribution available on the site under the Download page. For Linux distributions you can choose one of the 4 distribution flavors depending on the GTK version installed in your OS: Eclipse 4.22 - requires GTK+ 3.22.0 Eclipse 4.19 - requires GTK+ 3.22.0 Eclipse 4.11 - requires GTK+ 3.10.0 Eclipse 4.7 - requires GTK+ 2.24.0 or GTK+ 3.0.0 Eclipse 4.6 - requires GTK+ 2.18.0 or GTK+ 3.0.0 Installation Checklist Install DVT Using the Update Site Back to top",
    "section_path": [],
    "tokens": 130,
    "source": "scraped"
  },
  {
    "id": "ee58b94c-b0f2-4914-adb8-b1cf0fdc3a52",
    "title": "How to modify the font size in the code editors? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-to-modify-the-font-size-in-the-code-editors.html",
    "content": "How to modify the font size in the code editors? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to modify the font size in the code editors? You can increase/decrease the font size in code editors using these buttons, on the main toolbar: You can can also modify the font settings from Window \u00e2\u0080\u00a3 Preference \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Appearance \u00e2\u0080\u00a3 Colors and Fonts .\nFor global settings (used by all editors), select Basic \u00e2\u0080\u00a3 Text Font and for editor specific settings, select (e , Verilog, VHDL) Language \u00e2\u0080\u00a3 Editor \u00e2\u0080\u00a3 Text Font . In Block (Column) Selection mode I see strange editing artifacts How to automatically checkout/lock files from the revision control system ? Back to top",
    "section_path": [],
    "tokens": 140,
    "source": "scraped"
  },
  {
    "id": "3f53021e-2bcf-44e1-b315-30e2d08167a7",
    "title": "Legal Notices | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/legal/index.html",
    "content": "Legal Notices | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Legal Notices Copyright (C) 2005-2025 AMIQ EDA s.r.l. (AMIQ). All rights reserved. License: This product is licensed under the AMIQ\u00e2\u0080\u0099s End User License Agreement (EULA). Trademarks: The trademarks, logos and service marks contained in this document are the property of AMIQ or other third parties. AMIQ\u00e2\u0084\u00a2, DVT IDE\u00e2\u0084\u00a2, Verissimo Linter\u00e2\u0084\u00a2, Specador Documentation Generator\u00e2\u0084\u00a2 are trademarks of AMIQ. Eclipse\u00e2\u0084\u00a2 and Eclipse Ready\u00e2\u0084\u00a2 are trademarks of Eclipse Foundation, Inc. All other trademarks are the property of their respective holders. Restricted Permission: This publication is protected by copyright law. AMIQ grants permission to print hard copy of this publication subject to the following conditions: The publication may not be modified in any way. Any authorized copy of the publication or portion thereof must include all original copyright, trademark, and other proprietary notices and this permission statement. Disclaimer: This publication is for information and instruction purposes. AMIQ reserves the right to make changes in specifications and other information contained in this publication without prior notice. The information in this publication is provided as is and does not represent a commitment on the part of AMIQ. AMIQ does not make, and expressly disclaims, any representations or warranties as to the completeness, accuracy, or usefulness of the information contained in this document. The terms and conditions governing the sale and licensing of AMIQ products are set forth in written agreements between AMIQ and its customers. No representation or other affirmation or fact contained in this publication shall be deemed to be a warranty or give rise to any liability of AMIQ whatsoever. How to Report an Issue? Third Party Licenses Back to top",
    "section_path": [],
    "tokens": 299,
    "source": "scraped"
  },
  {
    "id": "d2c67b14-b75e-44b4-8843-8bd70cfb2a9c",
    "title": "Connect Instance Ports by Position | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/connect-instance-ports-by-position.html",
    "content": "Connect Instance Ports by Position | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Connect Instance Ports by Position You can easily convert the port connections of a instance from named to positional. Place the cursor on an instance and press Ctrl + 1 , select Connect instance ports by position from the list of quick assist proposals and press Enter . The instance ports are connected by position. Tip You can also Right + Click in the editor and go to Refactor > Connect Instance Ports by Position . Connect Instance Ports by Name Expand .* Port Connections Back to top",
    "section_path": [],
    "tokens": 123,
    "source": "scraped"
  },
  {
    "id": "7e4e1017-63bb-4e57-8614-963f4f6a9473",
    "title": "Line Wrapping | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-formatting/line-wrapping.html",
    "content": "Line Wrapping | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Line Wrapping When enabled, this option splits the lines of code that exceed the specified number of characters. Line Width (ro.amiq.vlogdt/format.line_wrap.threshold) - A line is wrapped when it exceeds this value. Before After Wrap single line comments and move above when needed (ro.amiq.vlogdt/format.line_wrap.sl_comments) - When enabled, if a single line comment exceeds the line width, it will be moved above and further wrapped, if needed. It is moved above in order not to break the association between an entity and its description. DVT automatically considers any comment above or in-line with an entity as its description that appears in tooltips, auto-complete or generated documentation. Before After Wrap multi line comments (ro.amiq.vlogdt/format.line_wrap.ml_comments) - When enabled, multi line comments are wrapped to fit the line width. Before After Vertical Alignment Disable Format for Code Sections Back to top",
    "section_path": [],
    "tokens": 168,
    "source": "scraped"
  },
  {
    "id": "a404e53d-34b0-4c6a-8e21-bcf11b840d1b",
    "title": "Method Code Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-templates/method-code-templates.html",
    "content": "Method Code Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Method Code Templates The following features can be used in DVT to generate new methods: Quick Fix Quick Assist Generate Getters and Setters Function Override Autocomplete To customize the way a generated method looks you can edit the method_implementation , method_override_body or method_prototype code templates. ${qualifiers} One or more of local/protected, virtual, static. Can be empty. ${kind} Either function or task. ${lifetime} Method variable lifetime, static or automatic. Can be empty. ${return_type} Function return type. Can be empty. ${identifier} Method name. Includes class_name:: qualifier for extern method implementations. ${arguments} List of method arguments. Can be empty. ${body} The method body. If auto-generated, the method_override_body code template is used. ${end_keyword} Either endfunction or endtask. ${unqualified_identifier} Method name. ${qualifiers} One or more of local/protected, virtual, static. Can be empty. ${kind} Either function or task. ${lifetime} Method variable lifetime, static or automatic. Can be empty. ${return_type} Function return type. Can be empty. ${identifier} Method name. ${arguments} List of method arguments. Can be empty. Constraint Code Templates Global Code Templates Back to top",
    "section_path": [],
    "tokens": 202,
    "source": "scraped"
  },
  {
    "id": "88fc4b5d-3328-48e8-95df-da65a3ed31a5",
    "title": "Views | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/views.html",
    "content": "Views | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Views Call Hierarchy View The Call Hierarchy view presents the call tree of a function or task . Place the editor cursor on the desired element, right-click , and choose Show \u00e2\u0080\u00a3 Call Hierarchy , or press Ctrl + Alt + H . Using the buttons in the toolbar(see below), you can select the Call Hierarchy Strategy based on your needs. The Callee Hierarchy Strategy shows method calls in the selected function or task. You can expand nodes in the tree to further inspect the hierarchy. Note Conditional ( if / case ) and fork blocks are also shown. You can hide them using the Filters\u00e2\u0080\u00a6 toolbar button. Note To show labeled blocks in the view use the Filters\u00e2\u0080\u00a6 toolbar button. Note When calling a virtual method on a base class handle, any of the child overrides of that method may be executed, depending on the runtime object type. In addition to the method call, you may choose to see all calls from overrides , using the Filters\u00e2\u0080\u00a6 toolbar button. The Caller Hierarchy Strategy shows method calls of the selected function or task. Note When calling a virtual method on a base class handle, any of the child overrides of that method may be executed, depending on the runtime object type. In addition to the method call, you may choose to see all method calls of the parent function implementation , using the Filters\u00e2\u0080\u00a6 toolbar button. Note When using the Caller Hierarchy Strategy , the view compacts all function/task calls from the same scope into a single node, with multiple lines specified in the line column. If you want to see all the function calls from the same scope, you can open the Inspect Panel and select the node in the Call Hierarchy View. Note The same input appears in the Inspect View , if you wish to use it instead. Tip When using the Caller Hierarchy Strategy , if the Call Hierarchy is triggered on a field, it shows field references in functions/tasks on the first level, then method calls from the second level onwards. Tip Double click on any node to jump to the method call . In Caller Hierarchy Strategy the editor will jump to the first method call if multiple are available in the same scope. Tip Use Up and Down arrow keys to navigate the view, Left to collapse and Right to expand. Tip Right-click on a node to: Remove from View Remove selected node from the tree. Expand Children Expand all children of the selected node. Expand Multiple Levels Expand a custom number of levels from the selected node. Go to First Call Jump to the first call of a recurrent method call. Go to Declaration Jump to the declaration of the selected method. Toolbar Caller Hierarchy Switch strategy to caller. Also refreshes the view. Callee Hierarchy Switch strategy to callee. Also refreshes the view. Refresh View Recompute the call tree if dirty (see below). Link with editor Link tree selection with editor. Filters Hide conditional, fork or override nodes. Changing filters requires refresh (see below). Prepend Package Name Show package name in labels. Expand Multiple Levels Expand a custom number of levels. Toggle Inspect Panel Show/hide the inspect panel embedded in the view. Analyze all root method extensions Analyzes root method extensions (disabled, only available for e Language). Icons Conditional block (if / case) fork block Function call Predefined function call Static function call Function override Task call Static task call Task override Field node Constructor call Predefined constructor call Let call Macro call Recurrent method call Call to undeclared method Labeled block Refresh The Call Hierarchy view is not automatically updated at incremental build or when modifying filters. When you decide it\u00e2\u0080\u0099s time to recompute the view contents, simply click the Refresh toolbar button. Note Refresh may not retain the state of the method call tree. Checks View The Checks View presents all the immediate, concurrent, deferred immediate assert and assume constructs in the project. Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Checks Double click on a check and jump to the source location. immediate assert concurrent assert deferred immediate assert immediate assume concurrent assume deferred immediate assume Quick Search . You can use CamelCase , Simple Regex or Hierarchical Search to locate a specific element. By default, hierarchical search will show all descendants: Check Kind Filters . You may choose to hide immediate, concurrent assertions or assumptions - see the image below: Code Templates View The Code Templates is located near the Navigator and Hierarchy views or you can open it from Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Code Templates . To insert a template in a code editor, you can either: drag and drop it in the editor at a specific location double click on it click on Insert into editor button right-click on it > Insert Note If you choose one of the last three actions mentioned above, the template will be inserted in the current editor at the current cursor\u00e2\u0080\u0099s positon. Please make sure you have an opened editor and the cursor is at the right position before adding the template! Insert the selected template into the current editor Create a new template Edit the selected template Remove the selected template (NOTE: you cannot undo this operation!) Refresh the view (if it doesn\u00e2\u0080\u0099t automatically update when you modify templates/projects etc.) Collapse/expand all Filter templates (you can filter them by: nature, context, name, project, description) Templates\u00e2\u0080\u0099 natures A global template A project template Templates\u00e2\u0080\u0099 contexts Preview the template\u00e2\u0080\u0099s pattern (it automatically updates when clicking on a template) To create a new template, click on Create a New Template button on the toolbar: Template\u00e2\u0080\u0099s name Check Automatically insert if you want the template to expand automatically on Ctrl + Space when there is no other matching template available. It is usually good idea to leave the checkbox checked, otherwise you would get a template proposal \u00e2\u0080\u009cpopup\u00e2\u0080\u009d Each template must be created under a project available in the current workspace (select [ global ] for a global template) Assign a nature - only natures relevant to the selected project will be displayed Template\u00e2\u0080\u0099s context - only contexts relevant to the selected nature will be displayed Templates\u00e2\u0080\u0099s description Code Pattern - embed variables in ${} e.g. ${variable_name} to enable the template proposal wizard when inserting the template into an editor Insert variables - here you can find some useful misc. predefined variables Compile Order view The Compile Order View presents the hierarchy of compiled files as it results from the `include compiler directives, starting from the project top files. Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Compile Order . Double click on a file to open it. You can use CamelCase or Simple Regex to locate a specific element. The Compile Order View label presents the following statistics: Total The total number of compiled files (the largest compiled file index).  Note: Files compiled in optimized mode, -v and -y library files are added to this count. Unique The number of unique files in Compile Order View.  If a file is compiled multiple times with multiple compile indices, it will only be counted once to determine \u00e2\u0080\u009cunique\u00e2\u0080\u009d value. Optimized The number of files compiled in optimized mode (files that are `included in the project multiple times, in the same invocation and same pre-processing context). For projects with multiple natures , only the Total appears in the Compile Order label. Each language node contains information about total , unique and optimized for that language. Right click on a file then Go To Include to jump to the include location. Note Library files compiled using -y and -v directives are aggregated under a dedicated section in the Compile Order, and consequently there may be discontinuities in the compile index: Build Config Hierarchy Press Show Build Config button to open the build config hierarchy as it results from the \u00e2\u0080\u0098-f\u00e2\u0080\u0099 compile directives, starting from the active build configuration . Note Each invocation section will be added under the coresponding build configuration file. Quick Compile Order View Press Ctrl + I to quickly open a compiled file. The Quick Compile Order View will pop-up and and present a filterable list of all the compiled files in the project. You can use CamelCase or Simple Regex to locate a specific element. Select a file and press Enter or click to open it. Config DB View The Config DB View shows all operations performed on the UVM Configuration Database via uvm_config_db set and get method calls. Open the view from the UVM menu > Show Config DB . The view is populated only after setting a runtime elaborated Verification top. By default, set and subsequent get calls for a specific configuration setting are clustered together and shown under the Setters and Getters section. Setters without Getters and Getters without Setters are shown in separate sections. To see set and get calls in a flat list sorted by execution index, click the Sort By Execution toolbar button. The view columns represent: Call: The configuration method, either set or get , followed by the execution index between square brackets. Type: The configuration object type. Context: The verification hierarchy path to the context component. Instance name: The verification hierarchy to which the configuration is applicable. Field name: The configuration target field name. Value: The actual value of the configuration object. The quick search bar applies to any of the view\u00e2\u0080\u0099s columns. Note The view presents only set and get calls up to the end of elaboration phase. Using the Filters toolbar button you can: Hide unassociated UVM Config DB Setters (setters without getters) Hide associated UVM Config DB Setters and Getters Hide unassociated UVM Config DB Getters (getters without setters) Hide UVM Config DB Setters for read only resources Tip Double-click to go to the set or get method call. Tip Right-click on a node to copy the content of the Instance Name or Field Name columns to the clipboard. Console View Any invocation (for example a DVT Generic run) output is dumped to the Console View . The Console View is automatically raised at any invocation.You can also go to menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Console to open the Console View. Click on hyperlinks in the Console View to jump directly to the to source location. Coverage View The Coverage View presents all the coverage groups and items in your project. Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Coverage . Double click on a group or item and jump to the source location. cover group simple item cross item transition item Quick Search . You can use CamelCase , Simple Regex or Hierarchical Search to locate a specific element. By default, hierarchical search will show all descendants: Cover Group . Cover Items . Design Hierarchy View The Design Hierarchy View presents recursively the instances in a Verilog module or the instances in a VHDL entity or component implementation. Cross-language design hierarchies are also supported. Position the editor cursor on the name of a design element and press Shift + F4 or right-click and choose Show \u00e2\u0080\u00a3 Design Hierarchy from the context menu. The Design Hierarchy View opens with the chosen element set as the top of the hierarchy. You can also go to menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Design Hierarchy to open the view. Cancel Current Operation Stops the view operation in progress, for example a search. Select Top A drop-down menu/pop-up dialog to select from top modules for Verilog or top architectures for VHDL. For Verilog, a top element is a module that instantiates other design elements and it is not itself instantiated. Similar for VHDL top architectures. History List Click to see the previously inspected elements. Show/Hide Ports Shows or hides the ports of the selected element. You can set the ports panel to the right or below the hierarchy. Show PD Shows or hides power domain information. You can choose to see the power domain names in the node labels, and distinctive foreground or background colors for all nodes belonging to the same power domain. Prepend Library Prepend to the node label the name of the library to which the instance belongs. You can scroll through the tree of instances using: the mouse scroll wheel the Up arrow , Down arrow , PgUp , PgDn keys the vertical button bar on the right side of the tree go to top of tree up one page up one element down one element down one page go to bottom of tree Note The up/down buttons are grayed out when reaching the top/bottom of the tree. You can double-click on an instance to go to its declaration. Double-click on a port to go to where it is connected. Right-click on an instance in the hierarchy and you have the following options : Show Usages (References) Search for the references of the selected instance. More details Show Usages, Readers or Writers Show Design Hierarchy Show the design hierarchy starting from the selection. Show Diagram Show the design diagram for the current selection. More details Design Diagrams Copy Copy the label text of the selected instance to clipboard. Copy Hierarchy Path Copy the hierarchy path of the selected instance to clipboard. You can change the segment separator from Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT . Right-click on a port and you have the following options : Trace Drive / Load / Drive and Load / In Subinstance See Trace Connections View . Show Usages (References) Search for the references of the selected port. More details Show Usages, Readers or Writers Readers / Writers See Show Usages, Readers or Writers Show Diagram Show the Finite-State Machine for the current selection. More details Finite-State Machine Diagrams Show Connections Diagram Show the Schematic Diagram of the selected port and all the instances connected to it Copy Copy the label text of the selected port to clipboard. Copy Hierarchy Path Copy the hierarchy path of the selected port to clipboard. You can change the segment separator from Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT . You can use the filters to locate a specific instance or port. You may use slash \u00e2\u0080\u0098/\u00e2\u0080\u0099 characters to filter hierarchically one level and \u00e2\u0080\u0098//\u00e2\u0080\u0099 to filter hierarchically all the levels. You may use the dot \u00e2\u0080\u0098.\u00e2\u0080\u0099 character to filter instances that contain a specific port. The ports that match the filter are promoted to the top of the ports panel. See Quick Search in Views for more details. No filter. Filter by instance name. All instances that contain the filter text are shown. Filter strict hierarchy. All instances that contain the filter text and are in a direct hierarchical relationship (father/son) are shown. Filter non-strict hierarchy. All instances that contain the filter text and are in a direct or indirect hierarchical relationship (ancestor/../../descendant) are shown. Filter strict hierarchy and show all descendants. Same results as for filter strict hierarchy, but including all descendants of the matched instances. Filter strict hierarchy and show direct descendants. Same results as for filter strict hierarchy, but including the sons of the matched instances. Filter by port name. All instances with ports that contain the filter text are shown. Filter by hierarchy and port name. Hierarchical filtering and port filtering may be combined. Note To switch to the Old Design Hierarchy View  (pre DVT 20.1.1) go to Window > Preferences > DVT and enable Switch to Old Design Hierarchy View Factory Overrides View The Factory Overrides View shows the UVM create calls affected by factory overrides. Open the view from the UVM menu > Show Factory Overrides . The view is populated only after setting a UVM Runtime Elaboration Verification top. The view content is grouped in three categories: Direct: Lists all the overrides applied by the UVM factory while creating components or objects during the UVM elaboration. Each entry corresponds to the application of a particular override. Chain: Groups together all the chained factory overrides that get applied during the creation of a UVM component or object which is subject to multiple overrides. Unused: Lists all the factory overrides which were not applied during the UVM elaboration. Note Overrides meant to be applied after the end of elaboration phase will show up as Unused . The view columns represent: Applicable To: The verification hierarchy to which the override is applicable. Original Type: The type to be overridden. Override Type: The type created by the factory. Override Path: The verification hierarchy path of the created object. Override Chain: The types that make up the override chain, for example if foo overrides bar , and xyz overrides foo , then the chain will show foo > bar > xyz. The quick search bar applies to any of the view\u00e2\u0080\u0099s columns. From the Filters toolbar button you can toggle the visibility of each section. Use the Toggle Inspect Panel toolbar button to see an Inspect Panel embedded in the view. It shows the relevant code sections for the currently selected table row, namely the set override calls and the corresponding create calls. Tip Double click any node to go to the create call. Tip Use Up and Down arrow keys to navigate the view, Left to collapse and Right to expand. Tip Right-click on a node to: Open Override Call Jump to the applied override call. Open Original Type Declaration Jump to the original type. Open Override Type Declaration Jump to the override type. Open Instantiation Jump to the create call. Copy Hierarchy Path Copy the content of the Override Path column to the clipboard. Inspect View Inspect View shows detailed information about various elements in DVT. Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Inspect . To inspect an element, simply select it in a view or click on its name in the editor. Information about the selected element will be presented in the view. Each element shown in the Inspect View starts with an information line regarding the file and line number of the element. The Inspect View highlights the relevant source code lines of the selected element. These lines may be surrounded with additional source code to provide a context, if necessary. You can customize the number of lines shown by going to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Number of context lines in Inspect View , or by using the key mappings detailed in the Hotkeys chapter below. For convenience, you can see the Inspect View embedded in diagrams by clicking the Inspect Panel\u00e2\u0080\u00a6 button in the toolbar. Hotkeys The following key mappings are available while interacting with the Inspect View. CTRL + ALT + [ Decrease the number of context lines shown CTRL + ALT + ] Increase the number of context lines shown CTRL + K Cycle through highlighted inputs shown inside the view WaveDrom Timing Diagrams WaveDrom is a tool that draws timing diagrams (waveforms) from a simple textual description written in JSON .\nDVT renders WaveDrom waveforms in the Inspect View .\nThe waveform diagram is updated on the fly (as you type). The waveform description can be: either embedded in comments, surrounded by @WAVEDROM_START\u00e2\u0080\u00a6@WAVEDROM_END pragmas or in files with *.json or *.json5 extensions When the waveform description is found in a file with a valid extension, the Inspect View will process it\u00e2\u0080\u0099s content and render the diagram when opened.\nThe waveform description file can also be embedded in comments using the @WAVEDROM_FILE pragma, followed by its location. The location of the file will be solved relatively to the project root. To save the diagram as an SVG file, right-click on it in the Inspect View. DVT offers the ability to view WaveDrom diagrams through tooltips, by hovering over any waveform written inside DVT editors. Tip The WaveDrom documentation is available here . Note To specify additional file extensions, use the +dvt_wavedrom_file_ext_add+<extension> build config directive.\nTo clear the extensions list use +dvt_wavedrom_file_ext_clear . Note To specify additional search file locations to use in junction with @WAVEDROM_FILE pragma, use the +dvt_wavedrom_files_location_add+<location> build config directive. To clear the extensions list use +dvt_wavedrom_files_location_clear . Note By default, only waveform descriptions of maximum 5000 characters are rendered.\nYou can change this threshold from menu Window > Preferences then DVT > Editors. Note DVT uses WaveDrom version 3.5.0. Layers View For an extern declaration you can quickly see where it is implemented using the Layers View . Position the cursor on the element\u00e2\u0080\u0099s name and press Shift + F3 or right click and choose Show \u00e2\u0080\u00a3 Layers from the menu. The Layers View is automatically raised at any invocation. You can also open it from Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Layers . Double click on a layer and jump to the corresponding source location. Right click on a layer to see its Usages . You can use CamelCase or Simple Regex to locate a specific element. Show History List Click to see the previously inspected layers (see the image below): Quick Layers View Position the cursor on the element\u00e2\u0080\u0099s name and press Ctrl + Shift + O . The Quick Layers View will pop-up and present a filterable list with all of the selected element\u00e2\u0080\u0099s layers. You can use CamelCase or Simple Regex to locate a specific element. Select a layer and press Enter or click to jump to the corresponding source location. Macros View The Macros View presents all the preprocessing macros in the project. Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Macros . Double click on a macro to jump to its definition. Right click on a macro to view its Usages . You can use CamelCase or Simple Regex to locate a specific element. Preprocessing define Preprocessing undefine Preprocessing ifdef, ifndef Quick Macros View Press Ctrl + Shit + D to quickly jump to a specific macro definition. The Quick Macros View will pop-up and and present a filterable list of all the preprocessing macros in the project associated with the active editor or the current selected project from the Navigator (if no editor is open). You can use CamelCase or Simple Regex to locate a specific element. Select a macro and press Enter or click to jump to its definition. Outline View The Outline View presents an overview of the editor contents. Open the view from menu Window > Show View > Other\u00e2\u0080\u00a6 > General > Outline . You can click on an entity to jump to its location inside the current file. You can use CamelCase or Simple Regex to locate a specific element. Filters\u00e2\u0080\u00a6 Select what elements to show Alphabetical Sort If alphabetical sort is on, all the entities are sorted by name. By default the entities are presented in the definition order. Category Sort If category sort is on, entities are arranged by categories (fields, methods etc.), instead of being mixed as they appear in the file. Expand All Collapse All Quick Outline View Press Ctrl + O to open the Quick Outline dialog. It presents an overview of your file. You can use CamelCase or Simple Regex to locate a specific element. Outline View Preferences You can configure the Outline View contents from menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Outline View . Power Domain View The Power Domain View shows detailed information about each power domain created in the project including instances, isolation strategies and retention rules. Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Power Domain . The power domains and their details are displayed in a hierarchical tree format. Toggle the Inspect Panel to visualize more details of the currently selected element. Tip Double click an element to jump to its declaration. Tip To see the including Power Domain of any element, right click \u00e2\u0080\u00a3 Show PD definition Problems View If a project contains errors, for example syntax errors, it will be indicated using decorators : You can use the Problems View to inspect the errors.  Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Problems . Double clicking on some error will jump to the source location. Quick Query View Press Ctrl + Alt + Q to quickly open the Quick Query View , which provides a filterable list of all the types, macros and compiled files in the project. This view supports semantic search, allowing to look for a specific element. In order to do this, structure your query in the following manner: query_key:search_pattern . You can use CamelCase or Simple Regex for the search_pattern . Tip Use Content Assist to see all the available query keys ( CTRL + Space ). DVT supports the following query keys: checker class configuration covergroup enum extends file generate interface library macro module package primitive program struct type typedef union Note The extends:search_pattern query can be used to search for classes which extend other classes that have a name matching the search_pattern . Note You can use the type:search_pattern query in order to search for all the types (classes, structs, modules etc.) defined in your project. Additionally, there are UVM-specific queries that have the following format: uvm_class_name:search_pattern , where uvm_class_name is one of the following: uvm_agent uvm_component uvm_driver uvm_env uvm_mem uvm_monitor uvm_object uvm_reg uvm_reg_adapter uvm_reg_backdoor uvm_reg_block uvm_reg_field uvm_reg_fifo uvm_reg_file uvm_reg_frontdoor uvm_reg_map uvm_reg_predictor uvm_reg_sequence uvm_scoreboard uvm_sequence uvm_sequence_item uvm_sequencer uvm_test Select an element and press Enter or click to navigate to it. Note By default, the Quick Query View will display 100 items from each category (types, macros, files). You can customize this value by going to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Maximum number of elements per category in Quick Query View . Registers View The Registers View shows all the UVM registers within the register model hierarchy. Open the view from the UVM menu > Show Registers . By default the view content is presented as a tree rooted in the register model and comprising of register blocks, register files, and individual registers as leaves. For each register, the view presents its name , access rights and source code comment .\nIf setting a UVM Runtime Elaboration Verification top, the view also shows the address and associated sequencer for each register. Toggle the Inspect Panel to visualize the bitfield diagram of the currently selected register. Tip Double click to go to the register\u00e2\u0080\u0099s create call. Tip From the Display Mode dropdown you can switch to a flat list view, where the name represents a hierarchical path from the reg model to the reg. Tip If setting a UVM Runtime Elaboration Verification top, you can choose the Address Radix to be Decimal or Hexadecimal . Tip If setting a UVM Runtime Elaboration Verification top, by default the view is sorted alphabetically. Use the toolbar button to Sort by address . Tasks View You can embed reminders in your source files by adding comments prefixed by certain \u00e2\u0080\u009ckeywords\u00e2\u0080\u009d called task tags . There are three predefined tags: FIXME - high priority TODO - normal priority XXX - low priority All reminders are listed in the Tasks View . If it is not visible, open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Tasks . Double click on a task to jump to the marker definition. You can define custom reminder tags and assign them priorities: Navigate to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Task Tags You can specify if the tags should be considered case-sensitive and if the tag name should be displayed in Tasks View. Click the Add\u00e2\u0080\u00a6 button on the right, enter the name of your tag and select its priority Click OK in the New Task Tag and Preferences dialogs DVT will recognize the new tag and highlight it in code comments. Note it is recommended to rebuild the project so that DVT rescans all files for reminders. Trace Connections View The Trace Connections View presents a hierarchy similar with the Design Hierarchy View : The connected instances are displayed, the rest are filtered out. You can use Show Root and Show Full Hierarchy options to show the entire design. The connected instances are colored, the rest are grayed-out. Port icons indicate the direction of the signal. Sources and destinations are marked with red/green decorations. You can search for a specific connected instance or signal with Quick Search in Views . The toolbar buttons allow you to change the trace kind : Trace Drive and Load shows the connected instances across the drive and load paths (how is this signal connected in the design)? Trace Drive shows the connected instances across the drive paths (who drives this port?). Trace Load shows the connected instances across the load paths (who does this port drive?). Other buttons: Show Root shows the path to the hierarchy root , even if the signal doesn\u00e2\u0080\u0099t reach it. It provides the enclosing context for deep traces, for example when tracing a signal many levels below the top module. This option is enabled by default. Show Full Hierarchy shows the full hierarchy, whether it is reached by the traced signal or not (how is this signal connected in the whole design context?). Show As List to view only the sources and destinations as a list. Show/Hide Signals shows or hides the ports or internal signals of the currently selected instance. Show Diagram to view a graphical representation of signal traces. At any time you can see the traced signal (the port or internal signal you are currently tracing). It is indicated in the info label.\nThe two connected instances that are bold colored in the tree represent: The instance with the traced signal . The instance with the signal shown in the trace path. More details Trace Path . Double-click on an element to go to code: For a connected instance, go to its declaration. For a port, go to where it is connected in the trace path . For a signal, go to where it is declared. When the signals panel is hidden, right-click on an instance in the tree to show the context menu. When visible, right-clicking on a port or internal signal to show the context menu. The options in the context menu are : Trace > trace kind Trace signals found on the drive or load paths of the current traced signal . Go to Go to the port connections or signal declarations of the selected instance. The same as double-clicking on a particular signal in the signals panel. Show Path Show the trace path from the traced port to the selected port or internal signal. More details Trace Path . Types View The Types View presents all the types (classes, structs, units, entities etc.) defined in your project. Open the view from menu Window > Show View > Other\u00e2\u0080\u00a6 > DVT > Types . Click on the Show Members button to show the Members pane . Double click on a type or type member to jump to its definition. Right click on a type or type member to search for Show Usages, Readers or Writers or further inspect the Type Hierarchy View or the Verification Hierarchy View , where applicable. You can perform Search for Members . Toolbar Show/Hide Members Toggles the visibility of the members pane. Use the drop-down to chose placement (to the right side or below the types tree). Sort by Category Click to sort by category. Default sort order is alphabetical. Expand All Expand all nodes in types tree. Collapse All Collapse all nodes in types tree. Note Type containers are also shown in the view, for example libraries, generate statements, etc. See this for more information on Types, Type Containers and Type Members. Quick Types View Press Ctrl + Shift + T to quickly open a specific type definition for the project associated with the active editor or the current selected project from the Navigator (if no editor is open). The Quick Types View will pop-up and and present a filterable list of all the types in the project associated with the active editor or the current selected project from the Navigator (if no editor is open). You can use CamelCase or Simple Regex to locate a specific element. Select and press Enter or click to jump to its definition. Type Hierarchy View The Type Hierarchy View presents the inheritance and the members of a class or interface class. Place the editor cursor on a class name, right-click and select Show \u00e2\u0080\u00a3 Type Hierarchy or press F4 . Select a class in the inheritance tree to view its members. Tip To further inspect the Type Hierarchy or see Usages of a class, right-click in the inheritance tree. Tip Right-click on a function or task member to override it. More details here: Override Functions Tip You can use CamelCase or Simple Regex to find a specific element. Hierarchy Toolbar Show History List See the previously inspected types. Prepend Package Name Prepend the enclosing package name to the name of each class. Show Full Type Hierarchy For a class, shows the super-classes and sub-classes. For an interface, shows the sub-classes and sub-interfaces (like Show Subtype Hierarchy). Show Supertype Hierarchy For both classes and interfaces, shows the super-classes and super-interfaces, with the selected class or interface at the root of the tree (the tree is \u00e2\u0080\u009cupside-down\u00e2\u0080\u009d). Show Subtype Hierarchy For a class, shows the sub-classes.For an interface, shows the sub-classes and sub-interfaces. Members Toolbar Filters Select what members to show (functions, tasks, fields, events etc.) Sort Members by Category Sort by category, otherwise alphabetically. Show Only Public Members Hide local and protected members. Show All Predefined Members Show predefined members like pre_randomize() even if not explicitly overridden. Show All Inherited Members Show members inherited from super-classes and super-interfaces. Quick Type Hierarchy View You can quickly inspect and jump to a specific parent or child in the hierarchy. Press Ctrl + T with the cursor positioned on the element name. The Quick Type Hierarchy View will pop-up and present a filterable list with all of the selected element\u00e2\u0080\u0099s hierarchy. You can use CamelCase or Simple Regex to locate a specific element. Select and press Enter or click to jump to the corresponding source location. Tip While the Quick Type Hierarchy View is open you can press Ctrl + T to switch between Full type and Supertype hierarchy. For functions, you can also see the implementations along the hierarchy (icons are not grayed). UVM Browser View The UVM Browser View is an intuitive entry point for exploring all the classes of a UVM-based verification environment. It allows you to explore UVM-based classes grouped by categories, like agents, monitors, drivers or sequences and easily inspect the UVM flow specific API, like overridden phases, class members registered to the\nfactory or TLM ports. Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 UVM Browser . You can use CamelCase or Simple Regex to locate a specific element. Toolbar Prepend Package Name Prepend the enclosing package name to the name of each class, useful when you explore for example all agents across packages. Group By Package Group classes by package. You may chose to see for example all agents across packages or to explore all categories in a specific package. The top UVM Types Panel presents all the UVM-based classes defined in your verification environment. For convenience they are grouped by categories like agents or monitors. The inheritance hierarchy between classes is shown up to the UVM base class. Description Class is declared under a different package than the parent package presented in the view\u00e2\u0080\u0099s tree because one of its children are declared under that parent package and \u00e2\u0080\u009cGroup by Package\u00e2\u0080\u009d is enabled. Physical sequencer or sequence. A physical sequencer is a sequencer that is connected to a driver. A physical sequence always extends uvm_sequence parameterized with a class that extends uvm_sequence_item and contains `uvm_declare_p_sequencer macro with a physical sequencer as argument. The categories and their corresponding base classes are the following Categories Base class Notes Agents uvm_agent Drivers uvm_driver Envs uvm_env Items uvm_sequence_item Monitors uvm_monitor Memories uvm_mem Other Components uvm_component Any class deriving from uvm_component which does not fall into any other category within this table. Other Objects uvm_object Ports uvm_port_base, uvm_tlm_if_base,  uvm_tlm_extension_base, uvm_sqr_if_base,  uvm_tlm_req_rsp_channel, uvm_tlm_fifo_base Registers uvm_reg Backdoor Registers uvm_reg_backdoor Frontdoor Registers uvm_reg_frontdoor Register Adapters uvm_reg_adapter Register Blocks uvm_reg_block Register Fields uvm_reg_field Register Sequences uvm_reg_sequence FIFO Registers uvm_reg_fifo Register Files uvm_reg_file Register Maps uvm_reg_map Register Predictors uvm_reg_predictor Scoreboards uvm_scoreboard Sequencers uvm_sequencer Sequences uvm_sequence Tests uvm_test The bottom Members Panel panel displays class members. You can toggle the UVM Members Mode on/off using the button. In UVM Members Mode it displays the following members: Virtual interfaces Class members registered to the factory using the `uvm_field\u00e2\u0080\u00a6 macros Class members of an UVM-based type (TLM ports included) Overridden functions and tasks from parent UVM base classes When the UVM Members Mode is off, the Members Panel behaves exactly like the Members Panel of the Type Hierarchy View . UVM Sequence Tree View The UVM Sequence Tree View presents the call tree of an UVM sequence. The call tree is made of all sub-sequences that are triggered by the sequence, recursively down to leaf sequence items. To select a sequence and inspect its call tree, position the cursor on the UVM sequence class name in the editor and: press Ctrl + Alt + Shift + S or right click and choose Show \u00e2\u0080\u00a3 UVM Sequence Tree from the menu. The UVM Sequence Tree view is automatically raised and populated with the call tree of the selected sequence. At any time you can open the view from Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 UVM Sequence Tree . Toolbar Show History List Click to see the previously inspected UVM sequence call trees. Prepend Package Name Prepend the enclosing package name to the name of each class. The view label shows the current project and the sequence for which the call tree is presented. The sequence call tree has the following node types: A class that inherits from uvm_sequence. A sub-sequence may be called from an `uvm_do macro or started using the seq.start() function. A class that inherits from uvm_sequence_item. A fork/join block in the sequence body(). A process from a fork/join block. Right-click on a sequence node in the tree and you have the following options : Show Usages (References) Search for the references of the selected sequence. More details Show Usages, Readers or Writers . Show Type Hierarchy Show the type hierarchy for the selected sequence. More details Type Hierarchy View . Show Verification Hierarchy Show the verification hierarchy for the selected sequence. More details Verification Hierarchy View . Show UVM Sequence Tree Show the sequence tree for the selected sequence. Practically set the selected sequence as root. Show Diagram Show the diagram for the selected sequence. More details Diagrams . Copy Copy the selected sequence class name to clipboard. Verification Hierarchy View The Verification Hierarchy View presents the UVM object instance tree. An UVM object instance is a class member of an UVM based type that is created using an UVM factory create call. To populate the view, go to the UVM menu and Select Verification Top or use the view toolbar button. For the selected UVM test, you have the option to view a statically elaborated hierarchy or perform a UVM Runtime Elaboration in order to view testbench structures accurately reflecting the configuration at start of simulation. Select Verification Top select a UVM test. History List Click to see the previously inspected components. Show/Hide Ports Shows or hides the UVM ports of the selected component. You can set the ports panel to the right or below the hierarchy. Show only UVM Components Show only UVM component instances in the hierarchy. By default it is on which means that the UVM object instances instantiated using create are not shown. Prepend Package Name Prepend the enclosing package name to the name of each class, useful when you explore for example all agents across packages. Alphabetical Sort Sort instances and ports alphabetically. By default it is off which means that the instances and the ports are presented in their declaration order from the source files. The view label shows the current project, the current top component and the number of instances in the hierarchy. You can double-click on any component to go to its UVM factory create call. Right-click on an instance in the hierarchy and you have the following options : Show Usages (References) Search for the references of the selected instance. More details Show Usages, Readers or Writers Show Layers Show the layers of the selected instance. More details Layers View . Show Type Hierarchy Show the type hierarchy for the selected instance type. More details Type Hierarchy View . Show Verification Hierarchy Set the selected instance as the top of the hierarchy and update the view. Show Diagram Generate the UVM Component Diagram of the selected instance. More details UVM Components Diagrams . Copy Copy the label text of the selected instance to clipboard. Copy Hierarchy Path Copy the hierarchy path of the selected instance to clipboard. You can change the segment separator from Window > Preferences > DVT . Open Type Declaration Go to the component declaration of the selected instance. You can double-click on any port to go to its declaration. Right-click on a port and you have the options to search for its usages, its layers and for its type hierarchy, also you can copy its name and the full hierarchy path of the selected port. You can use the filters to locate a specific instance or port. You may use slash \u00e2\u0080\u0098/\u00e2\u0080\u0099 characters to filter hierarchically one level and \u00e2\u0080\u0098//\u00e2\u0080\u0099 to filter hierarchically all the levels. You may use the dot \u00e2\u0080\u0098.\u00e2\u0080\u0099 character to filter instances that contain a specific port. See Quick Search in Views for more details. For example, filtering hierarchically all the levels for a specific port name : Tooltips Application Notes On this page Call Hierarchy View Checks View Code Templates View Compile Order view Build Config Hierarchy Quick Compile Order View Config DB View Console View Coverage View Design Hierarchy View Factory Overrides View Inspect View WaveDrom Timing Diagrams Layers View Quick Layers View Macros View Quick Macros View Outline View Quick Outline View Outline View Preferences Power Domain View Problems View Quick Query View Registers View Tasks View Trace Connections View Types View Quick Types View Type Hierarchy View Quick Type Hierarchy View UVM Browser View UVM Sequence Tree View Verification Hierarchy View Back to top",
    "section_path": [],
    "tokens": 7137,
    "source": "scraped"
  },
  {
    "id": "482fc7e0-e84a-46a5-9e29-21b11d7a194c",
    "title": "Understanding DVT IDE memory usage | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/memory_usage.html",
    "content": "Understanding DVT IDE memory usage | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Understanding DVT IDE memory usage The main goal of this application note is to help you understand the memory usage of DVT. First, two important concepts involved in memory usage analysis need to be clarified: resident and virtual memory. Resident Memory Resident memory usage represents the actual physical memory (RAM) used by an application at a given time. It includes the executable code, the dynamic libraries, and the stack and heap space required by the application during runtime. Resident memory is directly managed by the operating system and is critical for an application\u00e2\u0080\u0099s performance. Usually, resident memory is computed using the allocated heap size and the additional memory an application consumes during execution (such as memory used by the JVM or other off-heap memory allocation performed by various mechanisms). You can specify the maximum amount of resident memory that DVT may use via the -heap_size argument of dvt.sh or dvt_cli.sh. The optimal value depends on the project\u00e2\u0080\u0099s size, and is typically determined by an iterative process. The default is 3G. You can check how much of the heap is used in the Status Bar Heap Indicator. After you trigger a full build of the project, let it finish, and then press the button next to the Heap Indicator (the one that looks like a recycle bin) to force a garbage collection.\nAs a general rule, the heap usage should be around half of the max heap, to allow plenty of headroom for subsequent operations such as incremental builds, diagram generation, refactorings, semantic searches, etc. Virtual Memory Virtual memory is an abstraction provided by the operating system that allows an application to virtually access more memory than is physically available. It provides each application with its own virtual address space, which is typically much larger than the available physical memory. The operating system\u00e2\u0080\u0099s memory manager oversees virtual memory, a combination of RAM and disk space, including various system handles, memory-mapped files, and so on. Since some portions of this memory are allocated but remain untouched, the operating system loads only the necessary portions into physical memory, making the overall size of virtual memory largely irrelevant. For instance, in the following example, a process is using 1.1T of virtual memory, while the total amount of physical memory is less than 38G (Mem+Swp). As a bottom line, since Virtual Memory is not a limited physical resource, it is not a good measurement for resource allocation or memory profiling. Note Virtual memory is responsible for making use of the address space, which is limited to the width of the registers. That limitation is visible on 32-bit processors, as its registers can store up to 2^32 (4GB) of addresses.\nFor that reason, watchdogs were used on 32-bit systems to limit the amount of virtual memory an application can use. This is no longer necessary for current 64-bit  processors, which can hold up to 2^64 addresses. Output and logging UVM Library Compilation Troubleshooting Back to top",
    "section_path": [],
    "tokens": 525,
    "source": "scraped"
  },
  {
    "id": "cb6df691-4eeb-4e27-834e-bcb9f2527d7e",
    "title": "What is a Project | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/getting-started/workspace/what-is-a-project.html",
    "content": "What is a Project | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide What is a Project In order to see the contents of a specific directory on the disk, you need to define a project using various wizards. Create a New Project Menu File \u00e2\u0080\u00a3 New \u00e2\u0080\u00a3 DVT Project The first time when you create a project, the Eclipse platform creates a .project file in the directory you specified, right before it presents the directory contents. This is the only operation the platform performs. It will not move or copy any files to your workspace from the directory you specified. It will just create the .project file. Some plug-ins might create other information holders in the project directory. For example DVT creates a .dvt directory to store project level configurations specific to DVT. Note There are ways to create projects directly from a revision control system, for example from a CVS repository. As expected, in this case files will be brought into your workspace. Import an Existing Project Menu File \u00e2\u0080\u00a3 Import\u00e2\u0080\u00a6 (> General \u00e2\u0080\u00a3 Existing Projects into Workspace) If a project was created for a directory on the disk (a .project file is already there), you cannot create another project in that directory. Instead you import an existing project into your workspace. Automatic Create or Import The DVT plug-in merges the create and import wizards. It automatically detects that a project already exists at the specified location and imports it. Otherwise it guides you through the project creation. See also Build Configurations What is a Workspace Project Natures On this page Create a New Project Import an Existing Project Automatic Create or Import Back to top",
    "section_path": [],
    "tokens": 299,
    "source": "scraped"
  },
  {
    "id": "ff82a969-18b8-46e9-be17-8db748d37914",
    "title": "How do I see and configure the key shortcuts? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-do-i-see-and-configure-the-key-shortcuts.html",
    "content": "How do I see and configure the key shortcuts? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How do I see and configure the key shortcuts? Use Ctrl + Shift + L to get the list of all shortcuts. To configure go to menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Keys in the Modify tab.\nFrom the Modify tab you can also select the built-in Emacs scheme. Depending on the installed plug-ins, you may use other Emacs / Vi emulations. Related plug-ins: ETEE for Eclipse Text Editor Enhancements Columns 4 Eclipse or Column Mode for Eclipse for rectangular selection Lunar for editor enhancements Where can I find DVT Help? Are there any backup files in Eclipse? Back to top",
    "section_path": [],
    "tokens": 141,
    "source": "scraped"
  },
  {
    "id": "59c5fc42-8af3-4365-8b33-90263422dd93",
    "title": "Getting Started | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/getting-started.html",
    "content": "Getting Started | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Getting Started To enable AI Assistant you need access to one or more LLM providers. The setup details are particular to each LLM provider. The supported providers can be quickly set as follows: OpenAI Set the environment variable OPENAI_API_KEY='...' before starting DVT. Azure OpenAI Set the environment variable OPENAI_API_VERSION='...' , AZURE_OPENAI_API_KEY='...' , AZURE_OPENAI_ENDPOINT='...' (or OPENAI_BASE_URL='...' ) before starting DVT. Anthropic Set the environment variable ANTHROPIC_API_KEY='...' before starting DVT. Google AI Set the environment variable GOOGLE_AI_API_KEY='...' before starting DVT. GitHub Copilot (only in VS Code) Install the GitHub Copilot Chat extension. Sign-in with your GitHub account. When asked, allow DVT to use the Copilot. Ollama Works out of the box when Ollama runs locally on its default port (11434). Otherwise set the environment variable OLLAMA_HOST='...' before starting DVT. Note For advanced LLM configuration see the Advanced LLM Configuration chapter. To confirm that the LLM provider is properly set you can take a look in the VS Code status bar or Eclipse toolbar. Check that a default model is selected and that the list of models shows one or more models from enabled providers. Now, you can work with the AI Assistant in the editor or in its dedicated chat view. To test it out, select some code and run the command DVT AI Blueprint: Explain the Selected Code. A new chat session will start and the LLM will explain the selected code. Overview Key Terms Back to top",
    "section_path": [],
    "tokens": 269,
    "source": "scraped"
  },
  {
    "id": "b316f4e7-c4c3-4ec8-950e-d643683a08fc",
    "title": "How to automatically checkout/lock files from the revision control system ? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-to-automatically-checkoutlock-files-from-the-revision-control-system-.html",
    "content": "How to automatically checkout/lock files from the revision control system ? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to automatically checkout/lock files from the revision control system ? Let\u00e2\u0080\u0099s suppose your project is tracked by a revision control system, for example Perforce, DesignSync or Clearcase, that keeps non checked out files read-only. In this scenario, you can instruct DVT to perform some actions on any read-only file that gets modified by direct editing or by refactoring: Create a new run configuration, named DVT_CHECKOUT_HOOK . In the newly created run configuration, add any script or command you wish to be performed on the read-only files that get modified. The list of files is in ${selected_resources_loc} variable, by default separated by colon (:). This doesn\u00e2\u0080\u0099t work with ${selected_resource_loc}, only with the plural form ${selected_resources_loc} . You can use custom separators. See the examples below, supposing the list of files is: file1.e, file2.sv, file3.vhdl. ${selected_resources_loc} would expand to file1.e:file2.sv:file3.vhdl ${selected_resources_loc: } would expand to file1.e file2.sv file3.vhdl ${selected_resources_loc: >> } would expand to file1.e >> file2.sv >> file3.vhdl You can now use the DVT_CHECKOUT_HOOK run configuration in two ways: simply start to modify a read-only file and it will get triggered automatically select some files (in the Navigator) and manually launch the \u00e2\u0080\u009cDVT_CHECKOUT_HOOK\u00e2\u0080\u009d run configuration; note that you can map the run configuration to a toolbar button (see Custom Shortcut and Button for a Run Configuration ) Also, you can disable the checkout confirmation by inserting the following attribute in the DVT_CHECKOUT_HOOK run configuration file: < booleanAttribute key = \"ro.amiq.dvt.launch.REQUIRE_CHECKOUT_CONFIRMATION\" value = \"false\" /> How to modify the font size in the code editors? How can I see if a file is read-only? Back to top",
    "section_path": [],
    "tokens": 307,
    "source": "scraped"
  },
  {
    "id": "c41f3233-6f3e-41c3-86fe-a1fbb23bef51",
    "title": "How can I open a file in DVT from Questa? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-can-i-open-a-file-in-dvt-from-questa.html",
    "content": "How can I open a file in DVT from Questa? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How can I open a file in DVT from Questa? You can define the following procedure in a tcl script: set ::env(DVT_HOME) /dvt/installation/location set ::env(DVT_WORKSPACE_PATH) /dvt/workspace/location proc dvtEdit { filename {linenumber 1} } { set line $linenumber if { $line < 1 } { set line 1 } exec $::env(DVT_HOME)/bin/dvt_cli.sh openFile $filename -line $line & } To make the new procedure available in the Questa tcl command line, add the script path to the MODELSIM_TCL environment variable: MODELSIM_TCL=tcl_script_path.tcl:$MODELSIM_TCL To set DVT as the default editor for opening files in Questa, run the following tcl command: set PrefSource ( altEditor ) dvtEdit To revert the settings for the default editor, run the following tcl command: unset PrefSource ( altEditor ) dvtEdit How can I open a file in DVT from the terminal? How do I change the name of the xterm opened by a DVT Generic Run Configuration? Back to top",
    "section_path": [],
    "tokens": 190,
    "source": "scraped"
  },
  {
    "id": "63c93766-4edb-4736-93af-a8b754a9f8d4",
    "title": "How to change the directory where the build log file is saved ? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-to-change-the-directory-where-the-build-log-file-is-saved-.html",
    "content": "How to change the directory where the build log file is saved ? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to change the directory where the build log file is saved ? Open the active .build file under the .dvt diredctory (e.g. .dvt/default.build) and add these flags: +dvt_build_log_to_file+true/false +dvt_build_log_file_location+path/to/folder (use \u00e2\u0080\u009c.\u00e2\u0080\u009d for project\u00e2\u0080\u0099s root) Lines are suddenly changing indentation when I edit text or move the cursor through the editor. How to find the DVT logs on Linux/Unix ? Back to top",
    "section_path": [],
    "tokens": 106,
    "source": "scraped"
  },
  {
    "id": "af17b129-7d91-4841-8696-38bac00108ce",
    "title": "UVM Content Filters | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/uvm-content-filters.html",
    "content": "UVM Content Filters | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Content Filters Out-of-the-box UVM Predefined Content Filters eliminate the unnecessary content overhead by automatically filtering out the irrelevant internal information from the UVM library. As it compiles the UVM library, DVT detects issues, collects task reminders, and analyzes the API defined by the UVM library, but it hides them by default. You can bring in the full content with a simple click. For more details see Content Filters . UVM Compliance Review UVM Field Editor Back to top",
    "section_path": [],
    "tokens": 112,
    "source": "scraped"
  },
  {
    "id": "ce900a37-a865-43e5-94f1-6f1578cdff5a",
    "title": "Rename in File | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/rename-in-file.html",
    "content": "Rename in File | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Rename in File You can easily rename a variable, signal, method, etc. within the current file. Place the editor cursor on its name, press Ctrl + 1 , select Rename \u00e2\u0080\u00a6 in file from the list of quick assist proposals and press Enter . Type in the new name and press Enter again when done. Tip This is a lightweight Rename Refactoring which you should use in contexts where the renamed element is local to the file: local parameters, method argument names, local variables, signals of a module, etc. Tip You can also Right - Click in the editor and go to Refactor > Rename in File . Split into Extern and Implementation AI Assistant Back to top",
    "section_path": [],
    "tokens": 151,
    "source": "scraped"
  },
  {
    "id": "248d0dc6-311f-4d73-8872-93553195aeae",
    "title": "I get errors while installing or updating a plugin from an update site | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/i-get-errors-while-installing-or-updating-a-plugin-from-an-update-site.html",
    "content": "I get errors while installing or updating a plugin from an update site | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide I get errors while installing or updating a plugin from an update site Unable to read repository at \u00e2\u0080\u00a6 sun.security.validator.ValidatorException: PKIX path building failed SSL Handshake: invalid SSL session Most probable causes for the above errors are: Outdated certificate authority truststore in the Java Runtime Environment (JRE). In this case the easiest fix is to download a newer DVT distro containing an up to date JRE. Proxy or firewall filtering / altering secure connections. In this case you can ask your CAD/IT team if any filtering is taking place or you can try to download a zipped update site and install the plugin from that archive. How do I change the name of the xterm opened by a DVT Generic Run Configuration? What is New? Back to top",
    "section_path": [],
    "tokens": 171,
    "source": "scraped"
  },
  {
    "id": "ceeeb20e-7aa2-404f-8211-f94aa262218f",
    "title": "Inspect Overrides in the Quick Type Hierarchy View | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/override-constraints/inspect-constraint-overrides-in-the-quick-type-hierarchy-view.html",
    "content": "Inspect Overrides in the Quick Type Hierarchy View | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Inspect Overrides in the Quick Type Hierarchy View Press Ctrl + T with the cursor positioned on the constraint name. The Quick Type Hierarchy View allows you to inspect and jump to a specific parent or child that implements the constraint in the hierarchy. See also Quick Type Hierarchy View Override Annotation Inspect Overrides in the Layers View Back to top",
    "section_path": [],
    "tokens": 99,
    "source": "scraped"
  },
  {
    "id": "0db320d1-1125-4dcf-bf51-c866adfdfdd9",
    "title": "UVM Compliance Review | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/uvm-compliance-review.html",
    "content": "UVM Compliance Review | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Compliance Review To perform the UVM Compliance review of your project, see: Running Verissimo from the DVT Eclipse IDE (requires a Verissimo license). UVM Browser UVM Content Filters Back to top",
    "section_path": [],
    "tokens": 65,
    "source": "scraped"
  },
  {
    "id": "116f9959-09a6-476a-bf9b-43432c8411d3",
    "title": "Code Factory | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-factory/index.html",
    "content": "Code Factory | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Code Factory The Code Factory allows you to easily generate instances, signals, and testbenches starting with modules or entities. Factory Input It is required that you first set an input. Right-click on the element definition and select from the context menu the option Set Factory Input under Code Factory . The current input persists until a new one is set or until a full build is invoked. Note The input can be either a SystemVerilog module, interface, program, checker or a VHDL entity. Creating code Having set an input, you can do one of the following: Create Instance for instantiating the design element; Create Signals for listing the ports of the design element as signals; Create Testbench for defining a testbench that instantiates the design element with all the required port connections already made; Create Component for defining a component (VHDL only) Create WaveDrom Diagram for defining a WaveDrom Timing Diagrams description stub Create from Custom Template The code will be inserted at the cursor\u00e2\u0080\u0099s current position. Any information or errors during Code Factory operations are shown in the status bar. Note Cross language operations are not supported. You can\u00e2\u0080\u0099t set a SystemVerilog module as input and use it in VHDL for creating output and vice-versa. Create from Template You can customize the output of the Code Factory using FreeMarker Templates . API is available on the FreeMarker model root. In the script template you can access structured data describing the design which has been set as factory input. The design is represented by the model root . The following API is accessible in the FreeMarker template: Design API root.hasPorts() root.getPorts() : returns a list of all the ports (see port API below) root.hasParameters() root.getParameters() : returns a list of all the parameters (see parameter API below) Port API port.getDirection() port.getData() : returns the port data (see port data API below) port.isInterfacePort() port.isGenericInterfacePort() port.getInterface() : returns the interface for interface ports Port Data API portData.getType() portData.getNetType() portData.hasPackedDimension() portData.getPackedDimension() portData.hasUnpackedDimension() portData.getUnpackedDimension() portData.hasSign() portData.getSign() Parameter API parameter.getInitialValue() parameter.hasInitialValue() parameter.isLocal() Example <#assign module = root> <#assign max_port_name_chr = 0> <#assign max_port_type_chr = 5> <#--Determine the max length for ports --> <#if module.hasPorts()> <#list module.getPorts() as port> <#assign port_name_chr = (port.getName())?length> <#if max_port_name_chr < port_name_chr> <#assign max_port_name_chr = port_name_chr> </#if> <#assign port_type_chr = (port.getData().getType())?length> <#if max_port_type_chr < port_type_chr> <#assign max_port_type_chr = port_type_chr> </#if> </#list> </#if> <#--print ports --> <#if module.hasPorts()> <#list module.getPorts() as port> <#assign port_name = r\"${\" + port.getName() + \"}\"> <#assign pad = max_port_name_chr + 3> <#assign data = port.getData()> <#assign type = data.getType()?lower_case> <#if !(type?has_content)> <#assign type = \"logic\"> </#if> ${type?right_pad(max_port_type_chr) + \" \" + port_name?right_pad(pad) + \";\"} </#list> </#if> Note More examples are available in the Code Factory predefined project ( DVT Examples > Misc > Code Factory ) Filesystem Breadcrumb Refactoring On this page Factory Input Creating code Create from Template Design API Port API Port Data API Parameter API Example Back to top",
    "section_path": [],
    "tokens": 517,
    "source": "scraped"
  },
  {
    "id": "5e8dbfb0-ef37-437e-8dc3-b151d0f81528",
    "title": "Static UVM Configuration Queries | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/static-uvm-configuration-queries.html",
    "content": "Static UVM Configuration Queries | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Static UVM Configuration Queries Queries for config db setters , config db getters or factory overrides help quickly locate UVM related constructs that may influence the behavior of the testbench. You can run these queries from the UVM entry of the main menu. Results are available in the Search View. Tip Use the Quick Search to locate specific hits. Tip Navigate matches with Next/Prev buttons. The Queries are detailed in the table below: config db setters uvm_component.set_config_int() uvm_component.set_config_string() uvm_component.set_config_object() uvm_config_db.set() config db getters uvm_component.get_config_int() uvm_component.get_config_string() uvm_component.get_config_object() uvm_config_db.get() factory overrides uvm_component.set_type_override_by_type() uvm_component.set_inst_override_by_type() uvm_component.set_type_override() uvm_component.set_inst_override() uvm_factory.set_inst_override_by_type() uvm_factory.set_inst_override_by_name() uvm_factory.set_type_override_by_type() uvm_factory.set_type_override_by_name() uvm_component_registry.set_type_override() uvm_component_registry.set_inst_override() uvm_object_registry.set_type_override() uvm_object_registry.set_inst_override() Runtime UVM Configuration Queries UVM Browser Back to top",
    "section_path": [],
    "tokens": 144,
    "source": "scraped"
  },
  {
    "id": "aa2b8558-c2a9-42dc-a63b-b04ef99515b3",
    "title": "External Builders | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/external-tools-integration/external-builders.html",
    "content": "External Builders | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide External Builders An external builder allows you to invoke any script/tool and back-annotate its output (errors, warnings etc.) to the source code. It is a mean that allows you to connect any 3d party tool (compiler, linter etc.) to DVT error signaling engines. You can configure one or more external builders on a project: The commands you define will be invoked on project clean, full build and incremental build. The patterns you define will be applied on the command output to recognize errors, warnings etc. The pattern matches will be back-annotated to the source code and presented in a similar way DVT signals errors (file, line, in the Errors View etc.) DVT ships with some predefined example configurations to get you started. How to define a new external builder Select the project in the Navigator View , right-click and choose Properties . Choose the DVT > External Builders properties. Click the New button to define a new external builder. From the list of external builders choose the generic External Builder or one of the pre-configured ones. Main tab In the Main tab you can: Specify the name of the builder. It will appear in the extracted messages, for example in the Errors View . Specify the Full Build command - invoked on project full build and re-build. It is any regular shell command. You can use various variables (see pre-configured builders for examples). Specify the Auto Build command - invoked on incremental builds, for example on save. It is any regular shell command. You can use various variables (see pre-configured builders for examples). Specify the Clean command - invoked on project clean and before re-build. It is any regular shell command. You can use various variables (see pre-configured builders for examples). Specify the working directory where the commands are invoked from. You can use various variables, browse the file system etc. (see pre-configured builders for examples). Use various variables to pass as arguments to commands, for example ${incdir} or ${project_loc}. Note If you wish to specify multiple commands or use wildcards or system variables, use sh -c \u00e2\u0080\u009c\u00e2\u0080\u009d. E.g: sh -c \u00e2\u0080\u009cecho $USER; rm -f *.log\u00e2\u0080\u009d Filters tab In the Filters tab you can: Choose from one of the predefined filter categories. Preview a filter. Define a new filter, edit, remove or duplicate an existing one. Filters in predefined categories cannot be edited or removed (allow future enhancements or fixes). How to invoke external builders External builders are automatically invoked after the DVT builder. For example when requesting to build or rebuild the project, when saving etc.  Obviously if the command is empty for a specific phase (full, clean or auto), the builder is not invoked. You can also explicitly invoke only the external builders from the dedicated button . The focus must be on some editor in the project or a resource from the project should be selected. If you have multiple external builders defined for a project, you can select which one will be invoked by clicking on the respective entry in the menu: Note When invoking only one builder, a Clean Project operation that removes all errors from all external builders is also triggered. External Builder Output An external builder dumps its output in the console upon invocation. Using the defined filters, matches are identified and hyper-linked to source code. Source Code Markers - errors warnings The matches found in the builder output using the filters are marked on the source code. They are visible in the editors, Problems View etc. You can Right + Click on a marker to jump to the Console output of the external builder to investigate the error/warning. Smart Log External Documentation On this page How to define a new external builder How to invoke external builders External Builder Output Source Code Markers - errors warnings Back to top",
    "section_path": [],
    "tokens": 669,
    "source": "scraped"
  },
  {
    "id": "7aa23a8c-5bc7-4b6b-8a52-65cdddb55a7a",
    "title": "How does DVT integrate with emacs? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/how-does-dvt-integrate-with-emacs.html",
    "content": "How does DVT integrate with emacs? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How does DVT integrate with emacs? DVT integrates some emacs Verilog-Mode actions (provided that emacs is already configured): indent code, inject/delete/run automation. To activate: go to Window \u00e2\u0080\u00a3 Customize Perspective , then select the Command Groups Availability tab and in the list on the left select the checkbox Emacs Verilog-Mode . You should then see the emacs buttons in the toolbar. Eclipse has a built-in emacs keyboard scheme. To activate it, go to Window \u00e2\u0080\u00a3 Preferences then General \u00e2\u0080\u00a3 Keys and change the Scheme to Emacs There is an emacs plugin for Eclipse available at https://sites.google.com/a/mulgasoft.com/www/emacsplus What are the most common shortcuts in DVT? How does DVT integrate with CVS? Back to top",
    "section_path": [],
    "tokens": 149,
    "source": "scraped"
  },
  {
    "id": "081946f3-cd1a-4993-abfc-164a52ee36d8",
    "title": "FPGA Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/fpga-support.html",
    "content": "FPGA Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide FPGA Support Intel(Altera) Quartus Use the New DVT Project Wizard (menu File \u00e2\u0080\u00a3 New \u00e2\u0080\u00a3 DVT Project` ) to create a DVT project in the same location as an existing Quartus project. All source files and settings defined in the Quartus project configuration files will be automatically recognized. If you want to create a DVT project in a different location from your Quartus project location you must tune the .dvt/default.build file: + dvt_init_auto # Note that the compilation root must be specified after the +dvt_init_auto directive + dvt_compilation_root +/ quartus / project / location Note Quartus projects are automatically recognized by the DVT build auto-configuration engine. For more details, see Auto-config . When the auto-configuration algorithm detects a Quartus project layout, it scans the existing Quartus project configuration files and automatically generates an equivalent DVT build configuration file (for example default.build.auto.1). If there is no Quartus project layout, this functionality can be triggered using the +dvt_autoconfig_force_quartus directive. It allows the auto-configuration algorithm to scan *.qip files specified in default.build using +dvt_autoconfig_quartus_qip+<qip_file_path> directive (see example below): + dvt_init_auto + dvt_autoconfig_force_quartus + dvt_autoconfig_quartus_qip + file1 . qip + dvt_autoconfig_quartus_qip + file2 . qip + dvt_autoconfig_quartus_qip + file3 . qip Note The New DVT Project Wizard automatically adds both Verilog and VHDL natures. You can manually adjust this setting. Intel(Altera) Quartus Auto-config Specific Directives Directive Description +dvt_autoconfig_quartus_project_revision+<revision_name> Use <revision_name>. +dvt_autoconfig_quartus_script_location+<script_file_path> For debugging purposes. Use <script_file_path> to analyze Quartus project configuration files. +dvt_autoconfig_disable_quartus Ignore Quartus project configuration files and fallback to default auto-config. +dvt_autoconfig_quartus_qip+<qip_file_path> Analyze the specified Quartus project configuration file in addition to any automatically detected ones. May be specified multiple times. +dvt_autoconfig_force_quartus Force quartus auto-config using the *.qip files specified within the +dvt_init_auto section. +dvt_autoconfig_quartus_qip_search_path+<qip_dir_path> Specify root paths in which a deep search will be performed for *.qip files corresponding to *.ip files referenced in Quartus project configuration. Use +dvt_autoconfig_quartus_qip_search_path_add to specify additional directories to be scanned.Use +dvt_autoconfig_quartus_qip_search_path_clear to clear the list of scan roots. +dvt_quartus_debug Print debug information to the build console during Quartus auto-config. Intel(Altera) Quartus Libraries Compilation In order to compile Intel(Altera) Quartus libraries: specify the required libraries using the +dvt_init_altera directive specify the Quartus installation path, unless $QUARTUS_ROOTDIR system variable is set For example: + dvt_init_altera + ALTERA + ALTERA_MF + dvt_setenv + QUARTUS_ROOTDIR =/ apps / altera / 13.0 sp1 / quartus The available VHDL libraries are ALTERA_MF, ALTERA, ALTERA_LNSIM, LPM, MAX, MAXII, MAXV, STRATIX, STRATIXII, STRATIXIIGX, HARDCOPYII, HARDCOPYIII, HARDCOPYIV, CYCLONE, CYCLONEII, CYCLONEIII, CYCLONEIIILS, SGATE, STRATIXGX, ALTGXB, STRATIXGX_GXB, STRATIXIIGX_HSSI, ARRIAGX_HSSI, ARRIAII, ARRIAII_HSSI, ARRIAII_PCIE_HIP, ARRIAIIGZ, ARRIAIIGZ_HSSI, ARRIAIIGZ_PCIE_HIP, ARRIAGX, STRATIXIII, STRATIXIV, STRATIXIV_HSSI, STRATIXIV_PCIE_HIP, CYCLONEIV, CYCLONEIV_HSSI, CYCLONEIV_PCIE_HIP, CYCLONEIVE, HARDCOPYIV_HSSI, HARDCOPYIV_PCIE_HIP, STRATIXV, STRATIXV_HSSI, STRATIXV_PCIE_HIP, ARRIAVGZ, ARRIAVGZ_HSSI, ARRIAVGZ_PCIE_HIP, ARRIAV, CYCLONEV. The available Verilog libraries are ALTERA_MF_VER, ALTERA_VER, ALTERA_LNSIM_VER, LPM_VER, MAX_VER, MAXII_VER, MAXV_VER, STRATIX_VER, STRATIXII_VER, STRATIXIIGX_VER, ARRIAGX_VER, HARDCOPYII_VER, HARDCOPYIII_VER, HARDCOPYIV_VER, CYCLONE_VER, CYCLONEII_VER, CYCLONEIII_VER, CYCLONEIIILS_VER, SGATE_VER, STRATIXGX_VER, ALTGXB_VER, STRATIXGX_GXB_VER, STRATIXIIGX_HSSI_VER, ARRIAGX_HSSI_VER, ARRIAII_VER, ARRIAII_HSSI_VER, ARRIAII_PCIE_HIP_VER, ARRIAIIGZ_VER, ARRIAIIGZ_HSSI_VER, ARRIAIIGZ_PCIE_HIP_VER, STRATIXIII_VER, STRATIXIV_VER, STRATIXIV_HSSI_VER, STRATIXIV_PCIE_HIP_VER, STRATIXV_VER, STRATIXV_HSSI_VER, STRATIXV_PCIE_HIP_VER, ARRIAVGZ_VER, ARRIAVGZ_HSSI_VER, ARRIAVGZ_PCIE_HIP_VER, ARRIAV_VER, ARRIAV_HSSI_VER, ARRIAV_PCIE_HIP_VER, CYCLONEV_VER, CYCLONEV_HSSI_VER, CYCLONEV_PCIE_HIP_VER, CYCLONEIV_VER, CYCLONEIV_HSSI_VER, CYCLONEIV_PCIE_HIP_VER, CYCLONEIVE_VER, HARDCOPYIV_HSSI_VER, HARDCOPYIV_PCIE_HIP_VER. Xilinx ISE/Vivado Use the New DVT Project Wizard (menu File \u00e2\u0080\u00a3 New \u00e2\u0080\u00a3 DVT Project or DVT: Create a Project command in VS Code) to create a DVT project in the same location as an existing Xilinx ISE/Vivado project. All source files and settings defined in the ISE/Vivado project configuration files will be automatically recognized. If you want to create a DVT project in a different location from your ISE/Vivado project location you must tune the .dvt/default.build file: + dvt_init_auto # Note that the compilation root must be specified after the +dvt_init_auto directive + dvt_compilation_root +/ xilinx / project / location Note ISE/Vivado projects are automatically recognized by the DVT build auto-configuration engine. For more details, see Auto-config . When the auto-configuration algorithm detects an ISE/Vivado project layout, it scans the existing ISE/Vivado project configuration files and automatically generates an equivalent DVT build configuration file (for example default.build.auto.1). Note The New DVT Project Wizard automatically adds both Verilog and VHDL natures. You can manually adjust this setting. Note For an ISE project, the required Xilinx libraries are automatically detected and compiled using the +dvt_init_xilinx directive in the generated auto build file. For a Vivado project, the required Xilinx libraries are NOT automatically detected and have to be manually specified . To manually specify the libraries, use the +dvt_init_xilinx directive in the project build configuration file: + dvt_init_xilinx + UNISIM + UNIMACRO_VER + dvt_setenv + DVT_XILINX_HOME =/ apps / xilinx / Vivado / 2014.2 / # Note that the +dvt_init_xilinx must be specified before the +dvt_init_auto directive + dvt_init_auto Xilinx ISE/Vivado Auto-config Specific Directives Directive Description +dvt_autoconfig_vivado_sim_fileset+<fileset_name> Auto-config from Vivado project using the <fileset_name> fileset. +dvt_autoconfig_ise_xise+<xise_file_name> Auto-config from ISE project using the <xise_file_name> file. +dvt_autoconfig_disable_xilinx Disables auto-config from Xilinx ISE/Vivado project. Fallback to default auto-config. Xilinx Libraries Compilation In order to compile Xilinx libraries: specify the required libraries using the +dvt_init_xilinx directive specify the Xilinx installation path (ISE or Vivado), unless $DVT_XILINX_HOME system variable is set For example: + dvt_init_xilinx + UNISIM + UNIMACRO_VER + dvt_setenv + DVT_XILINX_HOME =/ apps / xilinx / Vivado / 2014.2 / The available libraries are UNISIM, UNIMACRO, UNIFAST, XILINXCORELIB, CPLD, SIMPRIM, SECUREIP_VER, UNISIMS_VER, UNIFAST_VER, UNIMACRO_VER, SIMPRIMS_VER, XILINXCORELIB_VER, UNI9000_VER, CPLD_VER, RETARGET, XPM. Precompilation support for Intel(Altera) Quartus and Xilinx Libraries By default, the Verilog/SystemVerilog Intel(Altera) Quartus and Xilinx Libraries are automatically precompiled in order to speed up the full build of the project. Note To disable the automatic precompilation of Intel(Altera) Quartus and Xilinx Libraries you can use the +dvt_disable_library_precompilation+ALTERA+XILINX directive. Encrypted VIP Support Generating External Tool Scripts from the DVT Build Configuration On this page Intel(Altera) Quartus Intel(Altera) Quartus Libraries Compilation Xilinx ISE/Vivado Xilinx Libraries Compilation Precompilation support for Intel(Altera) Quartus and Xilinx Libraries Back to top",
    "section_path": [],
    "tokens": 979,
    "source": "scraped"
  },
  {
    "id": "40d0f197-9922-4af6-93af-010d17010c25",
    "title": "Implement Extern Functions Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-assist/implement-extern-functions-using-autocomplete.html",
    "content": "Implement Extern Functions Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Implement Extern Functions Using Autocomplete Type the function or task keyword and then press Ctrl + Space to trigger Content Assist . When doing so, the list of proposals includes extern methods that are available to implement. The adjacent Proposal Tooltip includes information about the action that will be performed. Upon choosing the method, a corresponding method stub will be generated at the cursor\u00e2\u0080\u0099s location. The methods may be filtered by typing their return type . Override Constraints Using Autocomplete Use Assignment Pattern for Struct Type Variable Back to top",
    "section_path": [],
    "tokens": 125,
    "source": "scraped"
  },
  {
    "id": "689a6f4e-042e-4cd0-9cdd-2796bb23c59d",
    "title": "Extract to Variable | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/extract-to-variable.html",
    "content": "Extract to Variable | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Extract to Variable An expression inside a function or task can be extracted to a local variable. Select the expression and press Ctrl + 1 , select Extract to local variable from the list of quick assist proposals and press Enter . The variable is declared and initialized with the extracted expression in the correct scope. Note By default, if and loop conditions are evaluated to the logic data type, according to the IEEE 1800-2023 Standard for SystemVerilog. You can enforce the data type to bit by going to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Refactoring and enabling Enforce condition data type to bit . This preference applies only when you select the whole condition. Tip You may change the variable name and type. Press tab to switch between the edit boxes. Tip If the expression occurs multiple times throughout the function, you may chose to replace all the occurrences with the newly created variable, or only the selected one. Tip You can also Right - Click in the editor and go to Refactor > Extract\u00e2\u0080\u00a6 . Expand .* Port Connections Extract to Method Back to top",
    "section_path": [],
    "tokens": 222,
    "source": "scraped"
  },
  {
    "id": "286da279-7832-46b4-b495-81a7e126ab67",
    "title": "Extract to Method | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/extract-to-method.html",
    "content": "Extract to Method | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Extract to Method You can easily move a code fragment to a separate new method. This is called extract method refactoring. It helps keeping methods shorter and easier to understand. Select a block of actions and press Ctrl + 1 , select Extract to task or Extract to function from the list of quick assist proposals and press Enter . A new method is created containing the selected code fragment, and the selection is replaced with a method call. Note Any local variables declared prior to the code fragment you extracted become arguments of the newly created method. Each argument direction is computed accordingly: input for arguments that are only read output for arguments that are only written inout for arguments that are both read and written in the selected block of actions Note By default, if and loop conditions are evaluated to the logic data type, according to the IEEE 1800-2023 Standard for SystemVerilog. You can enforce the data type to bit by going to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Refactoring and enabling Enforce condition data type to bit . This preference applies only when you select the whole condition. Tip You may change the extracted method name in the edit box, right after the extract action is completed. Tip You can change the method signature by editing the Method Code Templates Tip You can also Right - Click in the editor and go to Refactor > Extract to Task or Extract to Function . Extract to Variable Extract to Module Back to top",
    "section_path": [],
    "tokens": 291,
    "source": "scraped"
  },
  {
    "id": "a4079add-caa0-45ed-8b3b-68530867cb58",
    "title": "UVM Sequence Tree | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/uvm-sequence-tree.html",
    "content": "UVM Sequence Tree | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Sequence Tree The UVM Sequence Tree View presents the call tree of an UVM sequence. The call tree is made of all sub-sequences that are triggered by the sequence, recursively down to leaf sequence items. To select a sequence and inspect its call tree, position the cursor on the UVM sequence class name in the editor and: press Ctrl + Alt + Shift + S or right click and choose Show \u00e2\u0080\u00a3 UVM Sequence Tree from the menu. The UVM Sequence Tree view is automatically raised and populated with the call tree of the selected sequence. At any time you can open the view from Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 UVM Sequence Tree . Toolbar Show History List Click to see the previously inspected UVM sequence call trees. Prepend Package Name Prepend the enclosing package name to the name of each class. The view label shows the current project and the sequence for which the call tree is presented. The sequence call tree has the following node types: A class that inherits from uvm_sequence. A sub-sequence may be called from an `uvm_do macro or started using the seq.start() function. A class that inherits from uvm_sequence_item. A fork/join block in the sequence body(). A process from a fork/join block. Right-click on a sequence node in the tree and you have the following options : Show Usages (References) Search for the references of the selected sequence. More details here . Show Type Hierarchy Show the type hierarchy for the selected sequence. More details here . Show Verification Hierarchy Show the verification hierarchy for the selected sequence. More details here . Show UVM Sequence Tree Show the sequence tree for the selected sequence. Practically set the selected sequence as root. Show Diagram Show the diagram for the selected sequence. More details here . Copy Copy the selected sequence class name to clipboard. UVM Runtime Elaboration UVM Smart Log Back to top",
    "section_path": [],
    "tokens": 356,
    "source": "scraped"
  },
  {
    "id": "7fbab6d5-aabc-4ca8-b03e-c18bcdddbf3d",
    "title": "Tooltips | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/tooltips.html",
    "content": "Tooltips | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Tooltips A tooltip is a brief, informative message that appears when a user interacts with an element in a graphical user interface (GUI). In DVT tooltips are initiated through a mouse-hover gesture. The below table highlights all the available areas from where tooltips can be triggered: Code Place the mouse cursor over an identifier in the editor. The tooltip will display information about the element under cursor including:\nthe comment associated with the element\u00e2\u0080\u0099s declaration (written above or inline), or the LRM documentation for predefined API the scoping information for types (enclosing package) the full signature of methods the direction of ports Tooltips are available for all the types, methods, fields, macros, etc. from the source code files that DVT analyzes in your project. Folded regions Place the mouse cursor over the + sign of a folded code region. The tooltip will display the folded region contents: Macros Values Parameter Values Override indications Place the mouse cursor over an override annotation on the left vertical ruler. The tooltip will display the overridden method signature. Problems Place the mouse cursor over an error or warning annotation on the left vertical ruler of the editor. The tooltip will display the error or warning message: If multiple problems are reported on the same line, an annotation list is displayed: WaveDrom Diagrams Place the mouse cursor over a JSON waveform description written inside a comment. The tooltip will display WaveDrom Timing Diagrams , if the descriptions are compliant with the WaveDrom library standard: UVM Register Bit Field Diagrams Place the mouse cursor over an UVM register class. The tooltip will display bit field diagrams, by parsing the UVM configuration methods: Method Call Arguments Mapping Macro Call Arguments Mapping Ordered Parameter Mapping Ordered Port Connection Mapping Place the editor cursor on a method call argument and press Ctrl + Shift + Space . The tooltip will list all the method declaration arguments along with their name, type, direction and default value. Move the editor cursor using the arrow keys to inspect argument mapping - the argument under cursor is always highlighted in boldface: The same functionality is available for macro calls, instance parameter connections and instance port connections: Toolbar Actions Views Back to top",
    "section_path": [],
    "tokens": 400,
    "source": "scraped"
  },
  {
    "id": "f7c38075-0a08-4ede-a0bd-4fac679d516c",
    "title": "How to copy the full path to the file in the current editor? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-to-copy-the-full-path-to-the-file-in-the-current-editor.html",
    "content": "How to copy the full path to the file in the current editor? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to copy the full path to the file in the current editor? Right - click in the current editor, then choose Copy Full Path . You can also assign it a shortcut: go to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Keys (or press twice Ctrl + Shift + L ) and assign a shortcut to Copy Full Path . It\u00e2\u0080\u0099s a global shortcut, you can call it from anywhere but only the active editor\u00e2\u0080\u0099s input will be considered (or the current selection in the navigator if you call it when the navigator view is active e.g. after you select a file). I know that file.foo is present in the project location, but I can\u00e2\u0080\u0099t see it in the Navigator View How to adjust the console logs filters matching parameters? Back to top",
    "section_path": [],
    "tokens": 176,
    "source": "scraped"
  },
  {
    "id": "5ac327e6-4d9d-4ba8-85e7-8c930da8ead2",
    "title": "Simulator Log-config | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/simulator-log-config.html",
    "content": "Simulator Log-config | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Simulator Log-config DVT can scan simulator logs in order to extract the compilation arguments required for a project. Instead of explicitly specifying lists of files, incdirs etc., you can use one or more +dvt_init_from_simlog directives in the default.build. For example: # Use the specified log file to identify compilation arguments; simulator will be automatically detected from the log file content + dvt_init_from_simlog + simulation . log # Identify compilation arguments and compile sources based on the ius.irun simulation log file + dvt_init_from_simlog + ius . irun + comp . log # Identify compilation arguments and compile sources based on the simulation log files matched with the specified wildcard pattern + dvt_init_from_simlog + simulation_ *. log DVT scans the specified log file and automatically identifies the simulator invocations, then creates a new file containing one or more +dvt_init sections, corresponding to the identified simulator invocation. For each +dvt_init_from_simlog directive, a corresponding default.build.from_simlog.# file is created. The .build.from_simlog.# files contain a verbatim copy of the compilation, elaboration and simulation directives that were found in the provided log file (like incdirs, top files, UVM libraries etc, design tops etc.). By default, if no compatibility mode is specified, DVT tries to automatically detect the simulator which generated the logfile from its content. Alternatively you can specify the compatibility mode, hence forcing a particular scanning algorithm to be used, one of: ius.irun, xcelium.xrun, vcs.vlogan, vcs.vhdlan, questa.vsim and questa.vcom. DVT eventually compiles the code using the directives in the generated files. Tip Log file scanning is performed using a set of built-in regular expressions. When the structure of the log file is atypical (for example using a custom simulator command name) DVT might not be able to successfully perform the scan. In such a case, you can specify one or more custom regular expression patterns using +dvt_simlog_pattern+<pattern> .\nEach pattern must contain a capturing group with the name \u00e2\u0080\u0098args\u00e2\u0080\u0099 containing the data to be copied in the result file. # Specify user defined patterns + dvt_init_from_simlog + simulation . log + dvt_simlog_pattern + \"vcs_custom_BEGIN(?<args>.*?)vcs_custom_END\" Note If there are multiple patterns specified, the first pattern matched will be used. Note The compilation root is by default the parent directory of the simulation log file. To override this behavior, specify a new compilation root using +dvt_compilation_root+<path> directive. DVT parses the log file only up to the first simulator invocation found, or until the buffer limit is reached.\nThe buffer limit is by default 10MB, but can be modified using +dvt_simlog_buffer_max_size+<size in MB> directive. # Specify custom buffer max size + dvt_init_from_simlog + simulation . log + dvt_simlog_buffer_max_size + 20 If your log file contains multiple invocations (such as multiple compile commands) you should instruct DVT to scan the entire log file using the +dvt_simlog_full_scan directive flag to true. # Enable full parsing + dvt_init_from_simlog + simulation . log + dvt_simlog_full_scan + true Note When full scan is enabled, the +dvt_simlog_buffer_max_size has no effect. You can specify additional directives in +dvt_init_from_simlog sections.\nThey are copied as is in the corresponding .build.from_simlog.# file. For example: +dvt_init_from_simlog +simulation.log +define+RTL +define+ADDR_SIZE=32 +incdir+$UVM_RGM_HOME/src +dvt_skip_compile+*/some/path* Note It is recommended to use a log file directly generated by the simulator rather than a capture of the simulator stdout or logs generated by simulator wrapper scripts. All major simulators support the -l (lowercase L) commandline option to specify the log file location. Auto-config Emulating compiler invocations Back to top",
    "section_path": [],
    "tokens": 595,
    "source": "scraped"
  },
  {
    "id": "9a7c5aaa-e63f-4b38-ba9b-f32cf1878417",
    "title": "Waive Compilation Problems | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/waive-compilation-problems.html",
    "content": "Waive Compilation Problems | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Waive Compilation Problems DVT provides a quick and easy way to waive compilation problems from the editor. Place the editor cursor inside the problem highlight range (squiggle underline) and press Ctrl + 1 , select Waive \u00e2\u0080\u00a6 from the list of proposals and press Enter . You can change the default waiver severity, description, path and message in the pop-up dialog. Press Enter when done. The new waiver is automatically added to the .dvt/waivers.xml file and applied. Update Virtual Method Signature Quick Assist Proposals Back to top",
    "section_path": [],
    "tokens": 120,
    "source": "scraped"
  },
  {
    "id": "ce01b4f0-72d0-4208-9443-7502c8134237",
    "title": "Inspect Overrides in the Quick Type Hierarchy View | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/override-functions/inspect-function-overrides-in-the-quick-type-hierarchy-view.html",
    "content": "Inspect Overrides in the Quick Type Hierarchy View | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Inspect Overrides in the Quick Type Hierarchy View Press Ctrl + T with the cursor positioned on the function name. The Quick Type Hierarchy View allows you to inspect and jump to a specific parent or child that implements the function in the hierarchy. See also Quick Type Hierarchy View Override Annotation Inspect Overrides in the Layers View Back to top",
    "section_path": [],
    "tokens": 99,
    "source": "scraped"
  },
  {
    "id": "de70f1bf-58ee-411f-9810-03c11fb3efb6",
    "title": "Bind Method Call Arguments by Name | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/bind-method-call-arguments-by-name.html",
    "content": "Bind Method Call Arguments by Name | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Bind Method Call Arguments by Name You can easily convert the argument bindings of a method call from positional to named. Place the cursor on a method call and press Ctrl + 1 , select Bind method call arguments by name from the list of quick assist proposals and press Enter . The argument bindings of the method call are converted to named. Tip You can also Right + Click in the editor and go to Refactor > Bind Method Call Arguments by Name . Rename File Bind Method Call Arguments by Position Back to top",
    "section_path": [],
    "tokens": 132,
    "source": "scraped"
  },
  {
    "id": "c0b99e37-4ee4-4bfa-a34c-4b68f34d4ffe",
    "title": "Override Functions | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/override-functions/index.html",
    "content": "Override Functions | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Override Functions Override Annotation Inspect Overrides in the Quick Type Hierarchy View Inspect Overrides in the Layers View Override Using the Dialog Override Using Autocomplete Override Using the Type Hierarchy View Automatic Indentation As You Type Override Annotation Back to top",
    "section_path": [],
    "tokens": 73,
    "source": "scraped"
  },
  {
    "id": "2148b4ec-2246-4997-9cc1-4d3c08128215",
    "title": "Makefile Example | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/command-line-interface/makefile-example.html",
    "content": "Makefile Example | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Makefile Example If you plan to integrate DVT in a flow which uses Make, you can find an example\nMakefile inside the uvm-1.2_ubus predefined project: cd $DVT_HOME /predefined_projects/uvm-1.2_ubus/examples/ # default target prints the usage make -f Makefile.dvt # Target dvt_gen creates the project directory # and generates the project configuration files make -f Makefile.dvt dvt_gen # Target dvt calls dvt_gen, starts DVT and creates the project make -f Makefile.dvt dvt # target dvt con Examples Commands Back to top",
    "section_path": [],
    "tokens": 111,
    "source": "scraped"
  },
  {
    "id": "d64f36d3-3c8a-4420-8f22-fffc388a919a",
    "title": "Linked Resources | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/getting-started/workspace/linked-resources.html",
    "content": "Linked Resources | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Linked Resources Linked resources are very similar with file system links, except they are registered in the .project file, not created on the disk . To create a linked resource, right click on the project in the Project Explorer view and select from the pop-up menu New \u00e2\u0080\u00a3 Linked Resource . In the wizard you must specify the path the link will point to (for example /apps ) and the linked directory name (for example apps ): Target : the file system path the link will point to; Name : the linked directory\u00e2\u0080\u0099s name; Location : location (inside the selected project) where the link directory will be created. Tip You can also use system variables in the path, for instance: ${DVT_ENV-SYSTEM_VARIABLE_NAME}/work equivalent to $SYSTEM_VARIABLE_NAME/work in a terminal. This way you can share the project with your team and the linked folders will work seamlessly. Note When you press Finish , if the directory the link points to is too big (for example it has more than 3000 children), a Resource Filter dialog will pop-up. You can use it to exclude those children that you don\u00e2\u0080\u0099t need and that may slow down the platform (you can find out more about it at How to create resource filters ? ). Linked resources will appear in the Navigator with a small \u00e2\u0080\u009clink\u00e2\u0080\u009d icon: Tip You can also use drag & drop from a filesystem navigator (like Nautilus in Gnome, Dolphin in KDE or Explorer in Windows): drag the external folder and drop it on the desired target location (Project or Folder) in the Navigator View. In the dialog that pops-up specify that you want to \u00e2\u0080\u009cLink to files and folders\u00e2\u0080\u009d. A linked resource will be automatically created. See also What is a Workspace What is a Project Refresh Backup and Local History Back to top",
    "section_path": [],
    "tokens": 334,
    "source": "scraped"
  },
  {
    "id": "6e4daeaf-6eed-4479-ba9c-a45e735f1231",
    "title": "Show Instances in the Design Hierarchy View | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/show-instances/show-instances-in-the-design-hierarchy-view.html",
    "content": "Show Instances in the Design Hierarchy View | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Show Instances in the Design Hierarchy View To see all instances of a module, interface or program, hover on the name with the mouse cursor while holding down the Ctrl key and select Show Instances in Design Hierarchy . You can also place the editor cursor on it\u00e2\u0080\u0099s name then right click and select Show \u00e2\u0080\u00a3 Instances in Design Hierarchy View . The results are presented in the Design Hierarchy View . Tip You can also trigger this functionality from a view\u00e2\u0080\u0099s context menu , for example from the Types View . Note This functionality works in mixed-language designs, for example when you have a VHDL entity instantiated in a Verilog module or a Verilog module instantiated in a VHDL component. Show Instances in the Search View Quick Search in Views Back to top",
    "section_path": [],
    "tokens": 171,
    "source": "scraped"
  },
  {
    "id": "95e6a3ba-aa4a-4f13-827a-4f201a0d3750",
    "title": "Workspace in use, cannot launch eclipse\u00e2\u0080\u00a6 | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/workspace-in-use-cannot-launch-eclipse.html",
    "content": "Workspace in use, cannot launch eclipse\u00e2\u0080\u00a6 | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Workspace in use, cannot launch eclipse\u00e2\u0080\u00a6 Problem : I\u00e2\u0080\u0099m unable to select an existing workspace after my eclipse program that was accessing it was not shutdown properly.\nI get a Workspace in Use error when there are clearly no other eclipse instances running on my machine. Solution : If you are sure there is no eclipse looking at your workspace (not even another user), then you must remove the lock file located in the workspace at path_to_workspace/.metadata/.lock . On Windows, if you cannot delete this file (because another process is using it), then close all eclipse IDE sessions, do Ctrl + Alt + Delete to bring up Windows Task Manager, select Processes page, and delete javaw.exe . Are there any backup files in Eclipse? Locking is not possible in the directory\u00e2\u0080\u00a6 Back to top",
    "section_path": [],
    "tokens": 170,
    "source": "scraped"
  },
  {
    "id": "3ade7b5f-6199-4bb6-ad0e-c89c60db5a45",
    "title": "Diagram Actions | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/diagrams/diagram-actions.html",
    "content": "Diagram Actions | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Diagram Actions The following operations are available for all diagrams: Pan Click and drag to pan. Pin A pinned diagram will not be overwritten when generating other diagrams. Pin using the button from the Diagram Toolbar . Save As Save using the button from the Diagram Toolbar in one of the available formats: PNG, SVG, JPEG, or BMP. Select Click to select blocks and edges. Ctrl + Click to select more or de-select. Zoom Zoom using the mouse wheel or the buttons from the Diagram Toolbar . Search Locate a particular diagram element name using the Quick Search bar above the diagram. UVM Components Diagrams Diagram Toolbar Back to top",
    "section_path": [],
    "tokens": 142,
    "source": "scraped"
  },
  {
    "id": "cb08db72-313f-42ba-ac9d-502685b6a78f",
    "title": "Override Annotation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/override-functions/override-function-annotation.html",
    "content": "Override Annotation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Override Annotation An Override Annotation indicates that a function/task overrides a parent class implementation. Override annotations are triangles on the vertical ruler to the left of the editor, next to the function definition: A green triangle indicates an overridden function A yellow triangle indicates a shadowed function that overrides a non-virtual function from a parent. A white triangle indicates a predefined function Hover an override annotation to see the overridden parent. Click on an override annotation to jump to the parent function that is overridden. Override Functions Inspect Overrides in the Quick Type Hierarchy View Back to top",
    "section_path": [],
    "tokens": 130,
    "source": "scraped"
  },
  {
    "id": "ab3a509a-fe47-4d1b-bd71-6751fbbfd290",
    "title": "Unmanaged Settings | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/settings-management/unmanaged-settings.html",
    "content": "Unmanaged Settings | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Unmanaged Settings There are also some settings that are not handled by DVT. The following list presents settings that won\u00e2\u0080\u0099t be handled: Position of dialogs Is persisted when the same workspace is used but in can\u00e2\u0080\u0099t be shared using user or common levels Size of views Is persisted when the same workspace is used but in can\u00e2\u0080\u0099t be shared using user or common levels Last opened perspective or saved perspectives Is persisted when the same workspace is used but in can\u00e2\u0080\u0099t be shared using user or common levels Working Sets Are persisted when the same workspace is used but in can\u00e2\u0080\u0099t be shared using user or common levels Secure storage information This is preserved in $HOME/.eclipse/org.eclipse.equinox.security and is not handled by DVT Proxy settings (Preferences -> General -> Network Connections) This is preserved in $HOME/.eclipse/org.eclipse.platform* directories and is not handled by DVT User installed plugins in a shared installation This is preserved in $HOME/.eclipse/org.eclipse.platform* directories and is not handled by DVT Settings used by other plugins that are not stored using the workspace preferences engine These settings can be stored anywhere so is not possible to handle them Managed Settings User and Common Settings Location Back to top",
    "section_path": [],
    "tokens": 230,
    "source": "scraped"
  },
  {
    "id": "07e05da0-cac3-4f9f-a544-67bf7fd6be21",
    "title": "Add Parameter to Module | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/add-parameter-to-module.html",
    "content": "Add Parameter to Module | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Add Parameter to Module An error is triggered when assigning a value to a non-existing module parameter. Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Add parameter \u00e2\u0080\u00a6 from the list of quick fix proposals and press Enter . Tip You may change the parameter type. Press Enter when done. Tip If the module is instantiated multiple time across the project, the Refactor Add Parameter Wizard is opened. See Add New Parameter to Module . Quick Fix Proposals Add Port to Module Back to top",
    "section_path": [],
    "tokens": 126,
    "source": "scraped"
  },
  {
    "id": "3cf8c9d2-8894-44a3-84c3-ac1496de4ad2",
    "title": "How to create custom shortcut and button for a Run Configuration? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-to-create-custom-shortcut-and-button-for-a-run-configuration.html",
    "content": "How to create custom shortcut and button for a Run Configuration? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to create custom shortcut and button for a Run Configuration? More details here . How to create resource filters ? I know that file.foo is present in the project location, but I can\u00e2\u0080\u0099t see it in the Navigator View Back to top",
    "section_path": [],
    "tokens": 84,
    "source": "scraped"
  },
  {
    "id": "53be4bc7-4550-49b1-a2bd-addb1a2c27a8",
    "title": "Add Port to Module from Selected Field | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/add-port-to-module-from-selected-field.html",
    "content": "Add Port to Module from Selected Field | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Add Port to Module from Selected Field You can use the Add Port to Module to add a selected field as a port easy and fast. Right click field wire1 in module A . Select Refactor > Add Port . You can optionally change the new generated port name. Select a direction for the port and press Preview or OK . Connect Instances Across the Design Hierarchy Add New Port to Module Back to top",
    "section_path": [],
    "tokens": 112,
    "source": "scraped"
  },
  {
    "id": "609609a0-c477-4bc4-856d-2165a23f1ddb",
    "title": "Scope Breadcrumb | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/breadcrumb-navigation-bar/scope-breadcrumb.html",
    "content": "Scope Breadcrumb | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Scope Breadcrumb The Scope Breadcrumb Navigation Bar appears horizontally at the bottom of source code editors. It shows the scope under the editor cursor, along with all its enclosing scopes. It is updated automatically as you move the editor cursor through the source code, or whenever you move around code (for example using hyperlinks or double click in views). Click an element in the breadcrumb to open its definition. Click the arrow to the side of an element to see its members. Use the quick search box to filter the members list. Hover an element to get more information, for example class/module parameters and function return types. Note (Verilog only) To Show/Hide Unnamed Action Blocks , press the button on the right side of the breadcrumb. Note (Verilog and VHDL only) To navigate to members of a different library, click the leftmost arrow, select the library and its list of members will pop up automatically. Note (e Language and SLN only) To navigate to members of a different package, click the leftmost arrow, select the package and its list of members will pop up automatically. Note (Verilog and e Language only) The names of elements declared inside macros are prefixed with a hash # sign. Note (Verilog and e Language only) When the editor cursor is inside a macro call, a macro call element is appended to the breadcrumb. Click on it to go to the macro declaration. Note Content filtered elements are shown with gray font, for example the UVM API. For more details, see Content Filters Verification Breadcrumb Filesystem Breadcrumb Back to top",
    "section_path": [],
    "tokens": 297,
    "source": "scraped"
  },
  {
    "id": "8af5b32d-e5c0-4887-8f74-4c3c0cef9403",
    "title": "Diagram Magnifier | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/diagrams/diagram-magnifier.html",
    "content": "Diagram Magnifier | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Diagram Magnifier The magnifier can be controlled using the following shortcuts: Press M to show / hide the magnifier. Hold down + Z to temporarily show / hide the magnifier. Use Shift + Scroll Up/Down to change the zoom of the magnifier. Use Ctrl + Scroll Up/Down to change the size of the magnifier. Use Ctrl + 0 to reset the zoom and size of the magnifier. Diagram Toolbar WaveDrom Timing Diagrams Back to top",
    "section_path": [],
    "tokens": 107,
    "source": "scraped"
  },
  {
    "id": "7a4525f1-8e73-45de-bfa9-7be72ceeb2bb",
    "title": "Precompilation Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/precompilation.html",
    "content": "Precompilation Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Precompilation Support To speed up the full build of your project you can load a precompiled section of code (also referred to as a precompiled library, precompiled database fragment or simply precompiled db). First you need to figure out which section of the project should be precompiled, usually libraries or IPs which rarely get modified, and refactor the project\u00e2\u0080\u0099s original build configuration in two files: a precompiled_save.build config file to save the database, usually comprising of one or more +dvt_init sections a precompiled_load.build config file to load the database and compile other files on top of it For clarity it is recommended to use suggestive filenames, however there is no hard constraint. Next you need to perform a build using the precompiled_save.build config, either from the IDE or in batch mode using dvt_build.sh . Once the precompiled database is saved, switch to the precompiled_load.build config and rebuild.\nYou will get the same compilation result as with the original build config, however with a significantly faster full build. The precompiled_save.build config file must specify the +dvt_precompiled_db_save+<path> directive and the database location: + dvt_precompiled_db_save +/ path / to / precompiled / database / location ... build configuration directives ... The precompiled_load.build config file must start with a +dvt_init_precompiled_db_load directive and specify the database location: + dvt_init_precompiled_db_load + dvt_precompiled_db_location +/ path / to / precompiled / database / location The +dvt_init_precompiled_db_load is a special kind of invocation and only precompile-related configuration directives are allowed inside it.\nFiles compiled on top of the precompiled database must be specified in subsequent +dvt_init sections. You must rebuild the precompiled database when: DVT version changes Precompiled source files change Database files get corrupted Note that DVT triggers a notification when changes are detected in precompiled source code, based on MD5 checksums. To turn off this change detection mechanism, use +dvt_precompiled_db_disable_md5_change_detection when loading a precompiled database: + dvt_init_precompiled_db_load + dvt_precompiled_db_location +/ path / to / precompiled / database / location + dvt_precompiled_db_disable_md5_change_detection When the precompiled database needs to be rebuilt, you can either do it from the GUI or in batch mode using dvt_build.sh .\nThe batch mode command can be specified inside the +dvt_init_precompiled_db_load section, and will be automatically called in case load fails, for example: + dvt_init_precompiled_db_load + dvt_precompiled_db_location +/ path / to / precompiled / database / location + dvt_precompiled_db_build_cmd + \"$DVT_HOME/bin/dvt_build.sh -lang vlog -cmd /path/to/precompile_save.build\" Tip When precompiled databases need to be rebuilt, multiple +dvt_precompiled_db_build_cmd+<cmd> can be run in parallel. You can configure the maximum number of precompiled database rebuild commands that can run simultaneously using +dvt_precompiled_db_build_cmd_max_jobs . Precompiled databases created using +dvt_precompiled_db_save can be shared across the team. Simply point the +dvt_precompiled_db_location to the precompiled database location.\nPrecompiled source files might be located in a user-specific path. For DVT to properly display precompiled sources, define the save to load path re-mapping using dvt_precompiled_db_src_map . + dvt_init_precompiled_db_load + dvt_precompiled_db_location +/ path / to / precompiled / database / location + dvt_precompiled_db_src_map +/ save / src / path =/ load / src / path / You can load precompiled libraries even when source files are not available. All DVT features will work as expected, the only downside being that you cannot open the precompiled source files. Auto precompiled databases You can instruct DVT to automatically manage precompiled databases. The build configuration is partitioned into multiple compilation fragments under the hood, one for each +dvt_init section. Each fragment gets saved in a separate precompiled database. During the build process, DVT identifies which fragments need to be rebuilt and automatically keeps them up-to-date. To enable auto precompiled databases use +dvt_precompiled_db_auto followed by the database location: + dvt_precompiled_db_auto +/ path / to / precompiled / database / location ... + dvt_init sections ... There might be invocations which you do not want to auto-precompile, for example those containing frequently modified files. Use one of the following directives: +dvt_precompiled_db_auto_exclude_library+<libname1>[+<libname2>+\u00e2\u0080\u00a6] : this is a global directive which disables the precompilation for all invocations under a particular -work library +dvt_precompiled_db_auto_exclude : this directive excludes the invocation under which it resides from being precompiled Tip All precompiled files are marked with a decorator in Compile Order View. This table can help you decide which approach better suits your needs +dvt_init_precompiled_db_load +dvt_precompiled_db_auto Build configuration refactoring into save and load configurations is required. Build configuration can be used as-is (as long as it has multiple +dvt_init sections). Precompiled files cannot be edited. Precompiled files can be edited. You must handle precompiled database updates, for example when source code changes / across tool versions. DVT automatically detects changes in the precompiled files and updates the precompiled databases. Precompiled databases can be shared across the team. Precompiled databases cannot be shared across the team. To get the best speed-up, it is recommended to: explicitly configure precompilation for sections of code that never change use automatic precompilation for +dvt_init sections which rarely get changed exclude the invocations you are actively working on from being precompiled +dvt_precompiled_db_auto+/path/to/auto/precompiled/database/location +dvt_precompiled_db_auto_exclude_library+auto_precompiled_database1 +dvt_init_precompiled_db_load // This precompiled database is not automatically managed +dvt_precompiled_db_location+/path/to/precompiled/database/location1 +dvt_init_precompiled_db_load // This precompiled database is not automatically managed +dvt_precompiled_db_location+/path/to/precompiled/database/location2 +dvt_init // This invocation is excluded from auto precompilation -work auto_precompiled_database1 ... build configuration directives \u00e2\u0080\u00a6 +dvt_init // This invocation is excluded from auto precompilation -work auto_precompiled_database1 ... build configuration directives ... +dvt_init -work auto_precompiled_database2 ... build configuration directives ... +dvt_init // This invocation is excluded from auto precompilation -work auto_precompiled_database2 +dvt_precompiled_db_auto_exclude ... build configuration directives ... +dvt_init -work auto_precompiled_database3 ... build configuration directives ... Compilation Speed-up Encrypted VIP Support On this page Auto precompiled databases Back to top",
    "section_path": [],
    "tokens": 951,
    "source": "scraped"
  },
  {
    "id": "65978725-d57c-4172-858f-ee281dcab7e9",
    "title": "Deprecated Settings Management (before DVT 3.5) | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/settings-management/deprecated-settings-management-before-dvt-35.html",
    "content": "Deprecated Settings Management (before DVT 3.5) | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Deprecated Settings Management (before DVT 3.5) DVT settings use the Eclipse Platform settings mechanism. By settings we refer to every option that can be configured by users and are restored between different invocations of DVT. There are 3 types of settings: Workspace Settings Project Settings Other Settings Workspace Settings Workspace settings are mainly those that can be set in Window \u00e2\u0080\u00a3 Preferences dialog.\nThese settings are persisted in the <workspace>/.metadata/.plugins/org.eclipse.core.runtime/.settings/ There are also other settings that can be stored under <workspace>/.metadata/ directory and can be considered workspace settings.\nSome of them are: The paths of the imported workspace projects The last position of different dialogs The settings of different views (e.g. column order) Project Settings These settings are always correlated to the project and are saved under the project directory.\nIt is very important to understand that every Eclipse plugin can create and maintain its own set of files with settings related to that plugin. .project file By default, the Eclipse Platform creates in every project directory a .project file that can contain the following information: Project name Project Natures (what kind of project is that and what are the plugins that should handle this project) Linked resources information (files or directories from outside the project that are linked into the project\u00e2\u0080\u0099s tree) .dvt directory This directory is used to keep all the settings needed for a DVT project. Some of the files stored in this directory are: *_top_files or default.build used for compilation configuration. (See Build Configurations ) *_linter_waivers.xml and *_linter_ruleset.xml used for linter configuration Other Settings There are another two places where DVT can store information. $HOME/.dvt.gtkrc file is used to store GTK Theme settings on linux platforms. Since Eclipse Platform 3.x doesn\u00e2\u0080\u0099t support themes, the feature uses this file to store the information about the colors. This file exists because the GTK hooks are done in the scripts before the platform is up. Be aware that GTK Theme settings are common between all DVT instances of that user. $HOME/.eclipse directory can hold two things: The Eclipse key ring settings, in case that any passwords are saved in DVT (e.g. CVS, SVN,\u00e2\u0080\u00a6 plugins can use passwords that can be protected with a master password). User installed plugins when it uses a global installation (DVT directory is read only) Importing Preferences From a Different Workspace Workspace Settings can be migrated between workspaces using different methods Using Import/Export Wizard Using dvt.sh Script Manually Using Import/Export Wizard The recommended way to migrate workspace settings is through the Preferences Import/Export Wizard. To export the settings, start DVT in the workspace containing the settings, go to File \u00e2\u0080\u00a3 Export \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Preferences , select Export All and choose the name of the file. To import the preferences, start DVT in the new workspace, go to File \u00e2\u0080\u00a3 Import \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Preferences , select Import All and choose the name of the file. Using dvt.sh Script Another way to import the settings from an old workspace into a new one is to use the dvt.sh script to start DVT. Argument Description workspace <dir> Path to the workspace directory. import_workspace_settings <dir> Path to the workspace from where the settings will be imported. force_import_workspace_settings <dir> Same as -import_workspace_settings, but it will overwrite target workspace settings. Manually To import workspace settings from an old workspace to a new one can be done just by copying the settings directory mkdir - p < new_workspace >/. metadata /. plugins / org . eclipse . core . runtime / cp - r < old_workspace >/. metadata /. plugins / org . eclipse . core . runtime /. settings / < new_workspace >/. metadata /. plugins / org . eclipse . core . runtime / Customizing Default Settings Using dvt.ini Eclipse Platform supports setting the default preferences for every new workspace. This option is useful in many situations: The user wants to use the same preferences in every new workspace, and using the export/import is an overhead The DVT application administrator wants to put a set of default settings for company wide deployment. The easiest way to customize the default settings is to set them in clean workspace and save them using the Show Changed Preferences Dialog in the distribution\u00e2\u0080\u0099s dvt.ini file. The required steps to do this are: Open DVT in a new workspace Change the preferences Use the Window \u00e2\u0080\u00a3 Show Changed Preferences dialog to identify the changed preferences Add those in the dvt_eclipse/misc/dvt.ini file Now every new workspace will have those preferences. Show Changed Preferences Dialog To open the Show Changed Preferences Dialog go to Window \u00e2\u0080\u00a3 Show Changed Preferences The dialog allows the user to inspect the modified preferences and save them in a file. Changing the Default dvt.ini To add new settings to the default settings provided with the distribution and to make them available by default for everyone who starts in a new workspace, the settings saved in the Show Changed Preferences Dialog should be added in the dvt_eclipse/misc/dvt.ini file. The dvt.ini file already contains some settings as distribution default. The user\u00e2\u0080\u0099s settings should be appended to this file. Some of the default settings already present in the dvt.ini file are: Name Description org.eclipse.ui/SHOW_MEMORY_MONITOR=true Enables the JVM memory monitor. org.eclipse.ui/ENABLE_ANIMATIONS=false Disables the minimize/maximize animations. org.eclipse.ui.editors/lineNumberRuler=true Shows line numbers by default in editors. org.eclipse.debug.ui/org.eclipse.debug.ui.UseContextualLaunch=false Activates \u00e2\u0080\u009cAlways launch previously launched application. ro.amiq.dvt/spelling_user_dictionary=$DVT_HOME/misc/dvt_dictionary.txt Sets the path to the distribution dictionary for DVT editors. Using a User Customized dvt.ini After creating a preferences file the user can replace the distribution\u00e2\u0080\u0099s dvt.ini file to make them  widely deployed or he or she can start DVT with a different file for default settings using the dvt.sh script: dvt . sh [ any other argument ] - eclipse_args - pluginCustomization < path_to_settings_file > Examples Reference On this page Workspace Settings Project Settings Other Settings Importing Preferences From a Different Workspace Using Import/Export Wizard Using dvt.sh Script Manually Customizing Default Settings Using dvt.ini Show Changed Preferences Dialog Changing the Default dvt.ini Using a User Customized dvt.ini Back to top",
    "section_path": [],
    "tokens": 1034,
    "source": "scraped"
  },
  {
    "id": "7273ba82-5ca3-4332-b4ea-879da7c0ee36",
    "title": "Working in Editor | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/working-in-editor.html",
    "content": "Working in Editor | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Working in Editor AI Assistant provides the ability to insert LLM replies directly into the editor. You can start a new editor session in several ways: Using Start a New Session from Blueprint command where you can select any built-in or custom blueprint that targets the editor. Using the build-in blueprint commands starting with DVT AI Blueprint and targeting the editor. Using Start a New Editor Session from Message button found above a user request in chat. Sessions targeting the editor typically have a single request and the reply goes directly to the editor, replacing existing code or inserting new code. The editor will open in compare mode and you can quickly identify the changes. To stop the insertion and generation of a reply use the Stop Generation command. After the reply is completely generated, the DVT\u00e2\u0080\u0099s incremental compilation will automatically validate the code. Use the compare editor to partially or fully revert the changes. When everything looks good save the file and close the compare editor. Note AI Assistant refines the model reply before inserting it into the editor, by: Removing Markdown fenced code block tags Commenting out parts of the reply that are not within Markdown fenced code blocks To change this behavior: Open VS Code Settings using Ctrl + , and check DVT \u00e2\u0080\u00a3 AI \u00e2\u0080\u00a3 Editor \u00e2\u0080\u00a3 Insert Unmodified Reply Open Eclipse Preferences using Window \u00e2\u0080\u00a3 Preferences and check DVT \u00e2\u0080\u00a3 AI Assistant \u00e2\u0080\u00a3 Insert unmodified reply into the editor Working in Chat Code Completion Back to top",
    "section_path": [],
    "tokens": 285,
    "source": "scraped"
  },
  {
    "id": "b475f12e-64a9-4681-a5ec-737d4763989e",
    "title": "Lazy Bring up Resources | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/lazy-bring-up-resources.html",
    "content": "Lazy Bring up Resources | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Lazy Bring up Resources You may experience Eclipse Platform slow-downs when project directories contain a large number of files and directories (10s of thousands), either directly or via linked resources, especially when working with slow network mounted filesystems. If you want to avoid such issues or simply avoid the clutter and work only with the files you\u00e2\u0080\u0099re interested in, you can use -include first_level flag when creating the project with the Command Line Interface. Alternatively, you can use the Lazy bring-up resources checkbox , which can be accessed by right-clicking on a project and navigating to Properties \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Resource Filters . In this case, DVT will bring only the files and directories (without their content) located directly under the project root.\nIf you want to further bring in the contents of a directory, simply double click it. The current configuration of the directories you\u00e2\u0080\u0099re working with in DVT is serialized at the User level settings in a <project>_config.yaml file, located under the lazy_resources directory. This file contains a section for every build configuration of the project.\nBy default, the newly brought directories\u00e2\u0080\u0099 content is serialized under the All category and will apply for all the build configurations of the project. To apply some filters only for a particular build configuration, you can manually move them to the correspondent section. After opening a directory, a notification will be displayed in the top right corner of the editor, letting you know that the filters were added in the configuration file. Click the right \u00e2\u0080\u009cOpen config file\u00e2\u0080\u009d button to open the configuration file. Click the left \u00e2\u0080\u009c+\u00e2\u0080\u009d button in the notification to inspect the list of directories whose content was brought in. You can close a directory that is no longer needed by right clicking and choosing Close Resources . Note The -include first_level flag will be automatically injected at the creation time if the project directory sits on top of a large filesystem tree (more than 50000 children) or if the project directory is located on a slow filesystem (listing all the files takes more than 10 seconds). Note Some configuration resources are always included: .dvt, .settings. Inactive Generates Code Highlight Memory Monitor Back to top",
    "section_path": [],
    "tokens": 400,
    "source": "scraped"
  },
  {
    "id": "79895672-f67a-41d5-a3f4-80482c756bab",
    "title": "Extract to Variable | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/extract-to-variable.html",
    "content": "Extract to Variable | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Extract to Variable An expression inside a function or task can be extracted to a local variable. Select the expression and press Ctrl + 1 , select Extract to local variable from the list of quick assist proposals and press Enter . The variable is declared and initialized with the extracted expression in the correct scope. Note By default, if and loop conditions are evaluated to the logic data type, according to the IEEE 1800-2023 Standard for SystemVerilog. You can enforce the data type to bit by going to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Refactoring and enabling Enforce condition data type to bit . This preference applies only when you select the whole condition. Tip You may change the variable name and type. Press tab to switch between the edit boxes. Tip If the expression occurs multiple times throughout the function, you may chose to replace all the occurrences with the newly created variable, or only the selected one. Tip You can also Right - Click in the editor and go to Refactor > Extract\u00e2\u0080\u00a6 . Expand .* Port Connections Extract to Method Back to top",
    "section_path": [],
    "tokens": 222,
    "source": "scraped"
  },
  {
    "id": "eabe3faf-327b-426e-9ee3-b662043b4d41",
    "title": "Toolbar Actions | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/toolbar-actions.html",
    "content": "Toolbar Actions | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Toolbar Actions Icon Description Rebuild Project - See Build Configurations . Lint - Run Verissimo or XVM Compliance Checking. Diagrams - See Diagrams . Content Filters - See Content Filters . Report an Issue! Themes Tooltips Back to top",
    "section_path": [],
    "tokens": 71,
    "source": "scraped"
  },
  {
    "id": "64e50bd5-8beb-4bae-be6b-56a16363ebb1",
    "title": "Output and logging | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/output-and-logging.html",
    "content": "Output and logging | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Output and logging Compilation related information is printed to console during the build process: dvt_build.sh , verissimo.sh and specador.sh print the information to the standard output . In DVT Eclipse IDE or DVT IDE for VSCode , the information is printed to the integrated build console . The console contains: Build configuration file inclusion tree For each compiled file, the path and compilation time Compilation problems summary (max 20 items, in precedence order: build configuration errors, syntax errors, semantic errors) Compilation problems waiving summary (for dvt_build.sh, verissimo.sh and specador.sh only when the print_compile_waivers_info argument is provided on the commandline) Statistics such as total number of lines, total build time, and duration of each compilation phase A log file containing more fine-grained information is also generated: dvt_build.sh , verissimo.sh and specador.sh generate a log file called dvt_build.log when the -log <log file> argument is provided on the command line In DVT Eclipse IDE or DVT IDE for VSCode the dvt_build.log file is generated by default in the project\u00e2\u0080\u0099s root directory In addition to the information printed in the console, the log file contains: All compilation errors and warnings in compilation order Detailed waiving information including all waived problems Configuration In DVT Eclipse IDE or DVT IDE for VSCode you can use the following build configuration directives: +dvt_build_log_to_file+<true/false> Enable/disable internal builder logging to file. Default: true. +dvt_build_log_to_console+<true/false> Enable/disable internal builder logging to console. Default: true. In dvt_build.sh , verissimo.sh and specador.sh you can use the following command line arguments: log <log file> Log to specified file ignore_build_config_errors Ignore build configuration errors. If this option is used compilation continues despite any build configuration errors and these errors are not printed into the console ignore_compile_errors Ignore compile errors. If this option is used the compilation errors are not printed into the console. Has precedence over -print_all_compile_problems print_compile_waivers_info Prints how many problems each compile waiver has matched print_all_compile_problems Print all compile problems. Include waived problems if used with -print_compile_waivers_info silent Turn on minimal output Preprocessed Files Support Understanding DVT IDE memory usage On this page Configuration Back to top",
    "section_path": [],
    "tokens": 377,
    "source": "scraped"
  },
  {
    "id": "5d814d63-a209-49ba-8656-9700f7ede3f8",
    "title": "Non existing package mti_fli | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/non-existing-package-mti_fli.html",
    "content": "Non existing package mti_fli | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Non existing package mti_fli mti_fli is a non-standard proprietary SV package built into Questa. To let DVT read it, you should prepend the following line to your Build Configurations . ${QUESTA_ROOT}/verilog_src/dpi_cpack/dpi_cpackages.sv where ${QUESTA_ROOT} denotes the location where Questa is installed. Note In case you have an external builder configured to use the default.build , this setting will also be passed to the simulator. Therefore, the simulator will issue errors like: ** Error : / apps / questasim / verilog_src / dpi_cpack / dpi_cpackages . sv ( 4 ): Builtin package \"mti_fli\" cannot be replaced . To work around this issue, you need to have different command files for DVT and for the external builder. IBM Clearcase Plugin How to use Working Sets for filtering Problems/Task/Search views? Back to top",
    "section_path": [],
    "tokens": 163,
    "source": "scraped"
  },
  {
    "id": "4772e43f-5f85-4afa-b899-818952870103",
    "title": "Quick Steps | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/custom-dialogs/quick-steps.html",
    "content": "Quick Steps | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Quick Steps Follow the wizard from menu New > Example > DVT > DVT Custom Dialog and place the customdialog.swtxml file in your DVT project. The SWT/XML Editor and the SWT/XML Preview View will open. In the editor (bottom side) switch to the Source tab instead of the Design tab. Change the title of the dialog by editing the id attribute of the topmost (first) Composite element Craft the dialog to the desired look by using the provided examples, autocomplete (Ctrl+Space) and the SWT/XML Preview View Create a Run Configuration and specify as command echo ${dvt_dialog_prompt:customdialog.swtxml} and run it to see and verify the output produced by the newly created dialog When you are content with the output, replace the command with your_script.sh ${dvt_dialog_prompt:customdialog.swtxml} Note Please be aware that when using {dvt_dialog_prompt:non-blocking} you should have the Launch in background option (on the Common tab) unset. Custom Dialogs Customizing the Dialog Output Back to top",
    "section_path": [],
    "tokens": 186,
    "source": "scraped"
  },
  {
    "id": "856a5556-a3b9-4c37-8c50-20f6fb68f089",
    "title": "Including Other Argument Files | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/including-other-argument-files.html",
    "content": "Including Other Argument Files | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Including Other Argument Files You can include other argument files with -f , -F or -file : -f /path/to/argument/file.f The -f and -file directives are equivalent, except for the vcs compatibility mode. In the vcs compatibility mode Strings are handled differently when using -f or -file . The behavior of -F is not consistent across simulators, so DVT treats it according to the Compatibility Modes : dvt, vcs when analyzing the contents of the included argument file, all relative paths are resolved as relative to the parent directory of the argument file ; in other words, this is equivalent to changing the compilation root to be the parent directory of the argument file ius, questa relative paths are solved like in dvt and vcs modes, except: for -v , -y and +incdir directives, if solving relative paths to the argument file parent fails, they are solved relative to the compilation root for -f directives, relative paths are always solved as relative to the compilation root Environment Variables Build Persistence Back to top",
    "section_path": [],
    "tokens": 206,
    "source": "scraped"
  },
  {
    "id": "b73fa0e2-22a3-49af-9bb0-da2444266dde",
    "title": "Syntax Coloring | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/syntax-coloring.html",
    "content": "Syntax Coloring | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Syntax Coloring Source code is colored in the DVT editor.\nSome language constructs are colored based on a syntactical analysis of the code, while others require a more elaborate semantic analysis, as detailed in the table below.\nSemantic coloring is only performed when the source code is compiled. Category Requires compilation Details Arguments y Function and task arguments Comment Hyperlinks Comment Pragmas y Compilation is required for Custom Pragmas Comments Compiler Directives Constants y Const fields, enum members, value parameters Constraints y Default Any word which does not belong to other categories End Labels y Escaped Identifiers Events y Fields y Class variables, struct fields, module and interface signals Functions, Tasks y Javadoc Tags Keywords Labels y Named blocks, generate blocks, assert names Local Variables y Variables declared in methods and named blocks Macros Numbers Object Arguments y Function and task arguments of class type Object Fields y Class variables, struct fields, module and interface signals of class type Object Local Variables y Variables of class type declared in methods and named blocks OVM, UVM, VMM, AVM Macros Parameterized types Ports - Input, Inout, Ref y Ports - Output y Static Functions, Tasks y Static Object Variables y Static variables of class type Static Variables y Strings System Tasks Task Tags Template Identifiers Types y Classes, interfaces, modules, coverpoints, covergroups, modports, packages, type parameters, typedefs UVM Static Object Variables y Static variables of UVM class type UVM Object Arguments y Function and task arguments of UVM class type UVM Object Fields y Class variables, struct fields, module and interface signals of UVM class type UVM Object Local Variables y Variables of UVM class type declared in methods and named blocks You can change the coloring style for each of the categories defined in the table above.\nGo to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Editor \u00e2\u0080\u00a3 Syntax Coloring , select the category you wish to modify from the list and set the color and font style. A code sample in the Syntax Coloring preference page helps you preview the changes instantly. The default style is shown below: Note Inside macro definitions, macro calls and PSL vunits, only syntactic coloring is performed. Scripts Themes Back to top",
    "section_path": [],
    "tokens": 400,
    "source": "scraped"
  },
  {
    "id": "59142ceb-75a1-4f2c-9d48-5244d4eda90d",
    "title": "Tips and Tricks | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/tips-and-tricks/index.html",
    "content": "Tips and Tricks | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Tips and Tricks The following tips and tricks give some helpful ideas for increasing your productivity. Editing Content assist Content assist provides you with a list of suggested completions for partially entered text. In the editor press Ctrl + Space . Module Automatic Instantiation You need to type the first letters of the module name, then press Ctrl + Space three (3) times.You can recognize module instances by their icon, it looks like a chip with ports ready to be glued in. Expand Macros (Apply Preprocessing) You can apply preprocessing over a selected section of code in order to see how macros are expanded. You have multiple options in the right-click context menu Macros. To expand them in the source file, choose Expand One Level Inline or Expand All Levels Inline . To expand them in a temporary file, choose Expand One Level or Expand All Levels . Note You can also expand all macros in the current file by selecting either Expand All Macros Inline , for expansion in the source file, or Expand All Macros , for expansion in a temporary file. Trace Macro Errors To debug macro usage errors (especially if macros in macros are used) you can see how the error is propagated from macro to macro (the error trace) either by: going with the mouse over the error marker on the left and right click or selecting the error in the Problems View , right click and choosing Macro Trace The macro error trace will be presented in the Console View with hyperlinks to source. Code templates Code templates are presented in content assist if applicable. Matching begin - end If you double click on/after begin \u00e2\u0080\u0093 end, function \u00e2\u0080\u0093 endfunction etc. the block is highlighted. Mismatched endif You can use comments after endif to track the match with starting ifdef. If the name of ifdef doesn\u00e2\u0080\u0099t match the endif comment a warning is issued. Toggle Comment You can toggle comment on/off for the current line or the selected lines. Press Ctrl + / or use the action from the drop down menu on right click in editor. Expand/Restore Selection Press Shift + Alt + Up Arrow to incrementally expand the current selection. For example when the cursor is on a word, select the word. Press again to select the whole line. Then, each of the nested enclosing scopes is selected, for example begin...end , then the enclosing function, then the enclosing class and so on. The same principle applies to nested enclosing parentheses, brackets and curly braces, as well as strings.  Press Shift + Alt + Down Arrow to restore the previous selection step made with Shift + Alt + Up Arrow Format source Use the Source \u00e2\u0080\u00a3 Format Source action from the editor\u00e2\u0080\u0099s right click menu. The whole file is formatted or the current selection, if any. Override functions To access the Override menu, in Editor, right click inside a class body > Source > Override Methods. One key indentation If you press Tab once at the beginning of a line, it is automatically aligned to the enclosing context. Press twice to insert a tab. Reminders (TODO markers) When you tag a comment in source code with TODO , a corresponding tasks is automatically created as a reminder. From the Tasks View , double click on the task takes you to the TODO in the code. Same for for FIXME (higher priority) and XXX (lower priority) markers. You can also add your own tags, see the Reminders (TODO Markers) section of the documentation. Spell checking You can enable spell-checking support from the General \u00e2\u0080\u00a3 Editors \u00e2\u0080\u00a3 Text Editors \u00e2\u0080\u00a3 Spelling preference page. Spelling errors are displayed in the Verilog Language editor and corresponding Quick Fixes are available. Folding You can fold code sections to improve read-ability. This is how a folded file looks like: Folding actions (to expand or collapse) are available in the toolbar or on right click in the editor. You may also use the + or - signs on the left side of the editor. Use Collapse All Levels for folding to statement (class, module \u00e2\u0080\u00a6) level. Use Show First Level for folding to struct member (method, cover\u00e2\u0080\u00a6) level. Use Expand All to fully expand the file. When you type on a folded line, it is automatically expanded. You may see the folded code in a tooltip if you move with the mouse over the + sign. Folding custom areas You can define custom folding areas using comments to indicate the start and the end of the area: Maximize editor Double-click on the editor tab to maximize editor to full window. Double-click again to restore. Show line numbers Check Show line numbers from the General \u00e2\u0080\u00a3 Editors \u00e2\u0080\u00a3 Text Editors preference page Local history Whenever you edit a file, its previous contents are kept in the local history. Right click in the editor and choose Compare With/Replace With \u00e2\u0080\u00a3 Local History\u00e2\u0080\u00a6 Inactive code highlight The editor marks with a colored background the areas of code that are not compiled due to preprocessing. See the Inactive Code Highlight documentation section. Emacs Automation You can invoke Emacs to perform automation on the file you are currently editing. In the editor window: Right click > Source > Emacs, then select one of: Auto, DeleteAuto, InjectAuto, Indent or use the associated key bindings (the same as in Emacs). Note The shortcuts are available only when Emacs mode is enabled in Eclipse; to enable Emacs mode go to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Keys and select the Emacs scheme. Note You can also add toolbar buttons to perform Emacs automation: go to Window \u00e2\u0080\u00a3 Customize Perspective \u00e2\u0080\u00a3 Command Groups Availability and check Emacs Verilog-Mode from the Available command groups on the left. Note To change the default emacs command go to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT and fill in the Emacs command you want to execute. Open file in more editors To open multiple editors for the same file you should first open the file then right click on the editor\u00e2\u0080\u0099s titlebar and select New Editor Split the editor view To open multiple editors side by side follow these steps: open each file in its editor; if you wish to see the same file in a split view, right click on its titlebar and select New Editor if you wish to split horizontally, drag the title bar of the file you want to split and drop it over the horizontal scrollbar if you wish to split vertically, drag the title bar of the file you want to split and drop it over the vertical scrollbar Column selection You can switch to and from column (block) selection mode either by clicking on the \u00e2\u0080\u009cToggle Block Selection Mode\u00e2\u0080\u009d button in the toolbar, or by using the Shift + Alt + A shortcut key. Auto insert JavaDoc comment To add JavaDoc like comments to code, in Code Editor type above the code declaration /** and then press Enter . Depending on the code type (a class declaration, a function, a task etc.) a comment will be added with the respective JavaDoc tags. For more details: Export HTML/PDF Documentation Code Navigation Tooltips When you position the mouse over a type, method, field etc., a tooltip will pop-up showing information on corresponding declaration. Hyperlinks If you place the mouse over a type, method, field, macro etc. and press the Ctrl key, a hyperlink will be presented. Click on the hyperlink to jump to definition. You can also jump to a definition if you put the cursor on the relevant name and press F3 . Inheritance tree and members (Type Hierarchy View) You can view the inheritance tree and all the members of a class by placing the mouse over it and pressing the F4 key. Design hierarchy of a module (Design Hierarchy View) You can view the design hierarchy of a module by placing the mouse over it and pressing Shift + F4 . Class Diagrams You can create class diagrams to inspect or document the architecture of a verification environment. For more details see the Class Diagrams Current Scope The scope at cursor (function/class\u00e2\u0080\u00a6) is always presented in the status bar. Quick Type You can quickly open a specific type definition. Press Ctrl + Shift + T . The Quick Types View will pop-up and you can enter any regular expression to locate a type. Select and press Enter or click to jump to its definition. Quick Outline Press Ctrl + O to open the Quick Outline for an overview of your file. You can enter any regular expression to locate a place to jump in the current file. Quick Compile Order You can quickly open a file that is included via the top files. Just press Ctrl + I . The Quick Compile Order View will pop-up and you can enter any regular expression to locate a file. Select and press Enter or click to open the file. Quick Type Hierarchy Position the cursor on the entity (struct, method \u00e2\u0080\u00a6) name and press Ctrl + T to see the Quick Type Hierarchy View . For methods and others, non-grayed icons means parent implementations are available. External Implementation You can view the external implementations in the Layers View . Position the cursor on the relevant name and press Shift + F3 or right click and choose Show Layers from the menu. Types View You can view all the types (scalars, classes, module) in the project (including their fields, methods etc.) in the Types View . Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Types . Checks View You can view all the checks (immediate, concurrent, deferred immediate assert and assume constructs) in the project in the Checks View . Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Checks . Coverage View You can browse all the coverage definitions in the project using the Coverage View . Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Coverage . Compile Order View You can see the include tree of the files in your project in the Compile Order View . Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Compile Order . Macros View You can see all the macros in your project in the Macros View . Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Macros . Outline View You can see the summary contents of the current file (structs, field, methods) in the Outline View . Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Outline . Mark occurrences When working in the SystemVerilog editor, turn on Mark Occurrences in the toolbar or press Alt + Shift + O . Override Annotations Override Annotations indicate that a function/task overrides a parent class implementation. Bookmarks Similar with a web browser, you can add bookmarks in your code without altering the code. Right click on the left vertical bar of the editor and choose Add Bookmark\u00e2\u0080\u00a6 Specify a meaningful name: You can jump to bookmarks from Bookmarks View. Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Bookmarks . Go to line Press Ctrl + L shortcut or double click in the status bar to jump to a specific line. Back/Forward navigation You can navigate between editors in a browser like way using the Back/Forward Navigation Go to last edit location Useful when you navigated around in the code, before proceeding with the source change. Click on Last Edit Location button in the toolbar to jump to the file where you were previously editing. Searching Search for task. function, field etc. To search for the declaration of a specific type, method, field etc.: Press Ctrl + H to open the Search Dialog Click on the Verilog Search tab. Type the name in the Search String (if you select in the editor before pressing Ctrl + H , the Search String is automatically set to the selection). Select type or function etc. and Declarations Click Search. Search for references To search where a method (or field etc.) is used, hold Ctrl , hover over its name and select Show Usages or right click on its name > Show > Usages or right click on its name > References > Project. The results are presented in the Search View . You can also search for references from the Search Dialog ( Ctrl + H ). Search for whole word To search for a whole word in all files, in comments or not: Press Ctrl + H to open the Search Dialog Click on the Verilog Search tab. Type the name in the Search String (if you select in the editor before pressing Ctrl + H , the Search String is automatically set to the selection). Select Whole Word and Do not search in comments or All occurrences Click Search. Miscellaneous All shortcuts Press Ctrl + Shift + L to see all shortcuts. Project Properties Select the project in the Navigator View , right click and choose Properties . Or from menu Project \u00e2\u0080\u00a3 Properties . OVM Field Editor The OVM Field Editor enables you to inspect and edit OVM field registrations. To bring up the OVM Field Editor, right click inside a class definition and select OVM Field Editor from the pop-up menu, or simply press Shift + Alt + F . UVM Field Editor The UVM Field Editor enables you to inspect and edit UVM field registrations. To bring up the UVM Field Editor, right click inside a class definition and select UVM Field Editor from the pop-up menu, or simply press Shift + Alt + G . Project templates A project template is a parameterized directory tree. Both in the file contents (.v, .sv, .sh - practically any file) and in the file or directory names you can use parameters. Combined with TODO markers, you can use a project template as a customized wizard. For more details see the Project Templates chapter in VlogDT User Guide. System Variables and -f Support See: Build Configurations Generic launch (make, scripts etc.) You can launch external scripts: Menu Run > Run\u00e2\u0080\u00a6. Select DVT Generic configuration and click the New button. Specify name, working directory and command. Click Run. You can also use the Run > Quick Run menu (or Ctrl+U shortcut key) to quickly launch any existing Run Configuration: Create dialogs for scripts & flows You can create Custom Dialogs for your own scripts: Follow the wizard from menu New > Example > DVT > DVT Custom Dialog, then create a run configuration with the command echo ${dvt_dialog_prompt:customdialog.swtxml} and run it. Open terminal You can open a fully working command-line terminal inside of DVT: In the Navigator View right-click on the desired location and select Open Terminal Here External Builders An external builder allows you to invoke any script/tool and back-annotate its output (errors, warnings etc.) to the source code. It is a mean that allows you to connect any 3rd party tool (compiler, linter etc.) to DVT error signaling engines. You can configure one or more external builders on a project: The commands you define will be invoked on project clean, full build and incremental build. The patterns you define will be applied on the command output to recognize errors, warnings etc. The pattern matches will be back-annotated to the source code and presented in a similar way DVT signals errors (file, line, in the Errors View etc.) DVT ships with some predefined example configurations to get you started. For more details see the External Builders chapter in VlogDT User Guide. External Documentation You can browse and search through 3rd party documentation using the Eclipse help system. For more details see the External Documentation chapter in VlogDT User Guide. Context Sensitive Help A focused set of help topics that is related to the current context can be shown to users on demand using context-sensitive help. This form of user assistance is delivered to users when a platform-specific trigger is activated (e.g. F1 key on Windows, Ctrl+F1 on GTK, Help key on Carbon). For more details see the Context Sensitive Help chapter in VlogDT User Guide. Mapping Linux to Windows Linux directories can be mapped to Windows drives, thus allowing editing files from Windows. For example /home/simi is mapped to Z:. This has an impact on paths configured for a DVT project, for example INCDIRs etc. The paths are set using Linux conventions, however Eclipse runs in Windows and the DVT builder needs to know about the mapping in order to compile the files.  To specify the mapping, set the system variable %DVT_CROSSPLATFORM_MAP% before invoking Eclipse. You can add multiple mappings separated by \u00e2\u0080\u009c;\u00e2\u0080\u009d e.g.:  /projects/=p:;/home/lars/=Z:lars Recover from abnormal inconsistencies In the event of unexpected behavior (missing results in search, types in type browsing, hyperlinks, tooltips etc.) please manually trigger a clean build from menu Project > Clean\u00e2\u0080\u00a6. OVM Smart Log DVT ships with predefined filters for OVM that allow you to view colored and hyper-linked logs like the one below: See OVM Smart Log for more details. UVM Smart Log DVT ships with predefined filters for UVM that allow you to view colored and hyper-linked logs like the one below: See UVM Smart Log for more details. OVM to UVM Migration DVT provides an OVM to UVM migration wizard that automatically performs all the necessary changes within an existing OVM project. To start the wizard: right click on a project/file/directory in the navigator, then select Refactor > Migrate OVM to UVM. See OVM to UVM Migration documentation page for more details. Add a new file extension to compile list extensions Go to Window > Preferences > General > Content Types, select a category from the list (for example Verilog Source File) then click on Add and then on Ok. Sharing workspace settings Export all Workspace/ Eclipse customization:   - Go to File > Export > General > Preferences    - Make sure Export all is selected  - Select a file where the preferences should be exported     Now you can share this file with your team. When it is imported into another instance of Eclipse (by using File > Import > General > Preferences), the configuration (all options available in Window > Preferences) is replaced by the imported one.  Note: you should restart Eclipse for the changes to be enforced (File > Restart). Using System Variables in Linked Resources You can use System Variables in the path of linked resources. For example ${DVT_ENV-SYSTEM_VARIABLE_NAME}/work is equivalent to $SYSTEM_VARIABLE_NAME/work in a console. Waive problems reported by DVT You can use Compile Waivers to promote, demote or disable the problems reported by DVT. To quickly create a new waiver, in the Problems View right click on any problem reported by DVT and waive it. DVT proposes some default values for the waiver description, path and message. You can easily change them to fine-tune the waiver. To quickly start up a new waivers file click on the Edit waivers button in the Problems View. The .dvt/waivers.xml is created with a default content and opened. You can easily create your own waivers from the default generated ones. In the waivers editor you can use autocomplete for tags, attributes and attribute values. Open a file in DVT from the terminal You can use the Command Line Interface like this: $> dvt_cli.sh -workspace ~/dvt_workspace openFile $(readlink -f my/file.sv) The command can be shortened by defining this alias in your ~/.cshrc: alias dvtopen 'dvt_cli.sh -workspace ~/dvt_workspace openFile `readlink -f \\!*`' or by defining this function in your ~/.bashrc: dvtopen () { dvt_cli.sh -workspace ~/dvt_workspace openFile $(readlink -f $1); } Then the command gets much shorter: $> dvtopen my/file.sv Visual Artifacts Q & A On this page Editing Code Navigation Searching Miscellaneous Back to top",
    "section_path": [],
    "tokens": 3342,
    "source": "scraped"
  },
  {
    "id": "3941ba8e-1165-465c-9a47-350af35031c3",
    "title": "Emulating compiler invocations | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/emulating-compiler-invocations.html",
    "content": "Emulating compiler invocations | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Emulating compiler invocations Sometimes a design is compiled across multiple invocations. For example, environment variables or preprocessing directives may change their values between invocations, or sources may be compiled into different libraries. The +dvt_init+<mode> directive is equivalent with a new compiler invocation, where <mode> represents the compiler compatibility mode . The directive resets the DVT builder to the mode specific default state and clears all the previous directives (preprocessing defines, system variables, libraries, etc.). You may specify any number of +dvt_init directives inside a build file. The compatibility mode is enforced until the next +dvt_init directive. Even if there is no +dvt_init directive specified, there is always an initial reset equivalent to +dvt_init+dvt . Simulator Log-config Multiple .build Files Back to top",
    "section_path": [],
    "tokens": 155,
    "source": "scraped"
  },
  {
    "id": "dacbfb02-f1cb-4679-af55-14ca5552cb62",
    "title": "Examples | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/command-line-interface/examples.html",
    "content": "Examples | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Examples Create a Verilog/SystemVerilog/VHDL project: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -lang vhdl -f $PROJ /my_project/filelist.f Create a project and place it in its own workingset in a new DVT window; overwrite project if it already exists;\nlogically link some common library files under the project directory: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -lang vhdl -workingset -newwindow -force -f $PROJ /my_project/filelist.f -map common $COMMON_LIB Create an e Language project and place it in its own workingset in a new DVT window; logically link some common library files under the project directory: $ > dvt_cli.sh createProject $PROJ /my_project -workingset -newwindow -force -top $PROJ /my_project/e/top.e -test $PROJ/my_project/tests/test1.e -map common $COMMON_LIB Create a project with resource filters. Use this option to exclude unnecessary files and directories from the project directory tree, like regression results,\nwhich may cause Eclipse platform slowdowns: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -exclude projectRelativePath = sub/directory Create a Verilog/SystemVerilog/VHDL project and associate it with Perforce: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -lang vhdl -f $PROJ /my_project/filelist.f -p4 P4PORT=company_server:1666,P4CLIENT=perforce-work,P4USER=user1 Create a Verilog/SystemVerilog/VHDL project and associate it with ClearCase: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -lang vhdl -f $PROJ /my_project/filelist.f -clearcase Create an e Language project and add a couple of git repositories: $ > dvt_cli.sh createProject $PROJ /my_project -lang e -f /my/filelist.f -git /path/to/repo1/.git:/path/to/repo2/.git Create a Verilog/SystemVerilog project and associate it with Subversive SVN plugin: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -f $PROJ /my_project/filelist.f -svn <SVN repository URL> Create a SystemVerilog/CPP mixed language project and switch to the C/C++ perspective: $ > dvt_cli.sh createProject $PROJ /my_project -lang vlog -lang cpp_ext -perspective cpp Create a project from an existing template: $ > dvt_cli.sh createProjectFromTemplate /target/location -template $PROJ /template/ Import an existing project into the workspace and place it in its own workingset in a new DVT window: $ > dvt_cli.sh importProject $PROJ /my_project -workingset -newwindow Open a file in the context of my_project and reveal line #50: $ > dvt_cli.sh openFile $PROJ /my_project/e/bfm.e -line 50 -project my_project Save and close a file: $ > dvt_cli.sh closeFile $PROJ /my_project/e/bfm.e -forceSave Open a custom dialog and print its output to the console: $ > dvt_cli.sh openCustomDialog -file dialog.swtxml -project my_project Print a list of the files compiled in my_project: $ > dvt_cli.sh listCompiledFiles -project my_project -unique Note If you need to run multiple commands, each command should be passed to a separate dvt_cli.sh invocation. Note To run multiple commands, simply invoke dvt_cli.sh in the desired order or wrap the invocations in a separate script: $ > dvt_cli.sh importProject $PROJ /my_project -workingset -newwindow $ > dvt_cli.sh openFile $PROJ /my_project/e/bfm.e -line 50 -project my_project $ > dvt_cli.sh openCustomDialog -file dialog.swtxml -project my_project Note It is not recommended to run in parallel several dvt_cli.sh invocations which depend on each other. Syntax Makefile Example Back to top",
    "section_path": [],
    "tokens": 503,
    "source": "scraped"
  },
  {
    "id": "b487e043-1087-44be-9576-651bc4a8bef4",
    "title": "Refactoring Scripts | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/refactoring-scripts.html",
    "content": "Refactoring Scripts | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Refactoring Scripts In some situations - like porting code from a library to another, or when dealing with cross-project API refactoring - one has to perform several refactoring operations for many projects. DVT can help you automate such operations by providing scripted refactoring functionality. Refactoring scripts are XML files that describe a set of changes to be performed for a project (into source code, scripts or file/directory names). For instance, such a script can describe all the changes to be applied to a source base for migration between OVM and UVM libraries. Writing a Refactoring Script Below there is a thoroughly commented example script to illustrate the XML syntax used by the scripting engine. XML header and DTD specification on the first lines. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE refactor-script PUBLIC \"-//DVT//refactor-script\" \"refactor-script.dtd\" > Start of refactoring script content. The script name is displayed in visual controls. < refactor - script version = \"1\" name = \"My refactoring script\" > You can specify exceptions , i.e. paths that will not be affected by the refactoring. Paths are absolute or relative to the project root. You can specify both files and folders. For a folder, all files in it and in all its subfolders will be skipped. < exception kind = \"path\" path = \"skipme\" /> It is advised to exclude sensitive project configuration files, for example: < exception kind = \"path\" path = \".project\" /> Actual refactoring directives are called items . There are several kinds of items, differentiated by the action they perform. When writing a script, one must be careful not to have item collisions: situations when the same piece of text is modified by more than one item. Here are examples that illustrate all the actions currently available in DVT. replace-in-text : perform plain textual search & replace for all the text files in the project like source files, scripts etc. Note that the search string is case sensitive. < item action = \"replace-in-text\" search = \"ovm\" replacement = \"uvm\" /> replace-in-file-name and replace-in-dir-name : perform plain textual search & replace in the names of all files/folders within the project. < item action = \"replace-in-file-name\" search = \"ovm\" replacement = \"uvm\" /> < item action = \"replace-in-dir-name\" search = \"ovm\" replacement = \"uvm\" /> rename all occurrences of the specified element (declaration and usages). The element-full-name uniquely identifies a SystemVerilog language element, and should be specified as follows: for macros, the name of the macro preceded by a backtick, just like a macro call < item action = \"rename\" element - full - name = \"`my_macro\" newname = \"`my_macro_new_name\" /> for types, modules, methods, etc., the name of the element, preceded by the names of its enclosing elements, including the package (if it\u00e2\u0080\u0099s the case) < item action = \"rename\" element - full - name = \"my_pkg::my_class\" newname = \"my_class_new_name\" /> Note that the newname is just the name of the element. Here are some more examples: < item action = \"rename\" element - full - name = \"my_library.my_module.my_task\" newname = \"my_task_new_name\" /> < item action = \"rename\" element - full - name = \"outer_class.inner_class.my_function\" newname = \"my_function_new_name\" comment = \"XXX: API change. Function renamed from my_function to my_function_new_name.\" /> In the last example, outer_class is not inside any package (it\u00e2\u0080\u0099s in the global scope). Also, you can optionally specify a comment that will be inserted on the line above the occurence. If the comment contains a Reminders (TODO Markers) (like TODO , FIXME , XXX or a custom defined one), after refactoring is completed you can use the Tasks View to inspect action items or notes automatically added by the refactoring. add-comment : to each occurrence of the specified element. The comment will be inserted on the line above the occurrence. < item action = \"add-comment\" element - full - name = \"my_type.foo\" comment = \"FIXME: function removed from my_type API\" /> You can also specify whether you want to add comments only to the element declaration or only to its usages : < item action = \"add-comment\" apply - to = \"declaration\" comment = \" @deprecated API\" element - full - name = \"my_class.deprecated_function\" /> For add-comment items you can specify a set of elements that shall be affected by the refactoring (instead of specifying a single element via element-full-name ) using a declaration comment pattern matcher and optionally a path matcher: < item action = \"add-comment\" comment = \" FIXME: usage of deprecated ${element-signature}\" apply - to = \"usages\" element - comment - matches = \"*@deprecated*\" element - path - matches = \"*/my_vip/*\" /> You can also use the element-comment-matches-not to invert the logic of the matcher. Both element-comment-matches and element-path-matches perform simple pattern matching, that is * for any character sequence and ? for any character. You can use ${element-signature} in the comment, as shown in the example above: it shall be replaced with the element signature, as seen for example in tooltips. Finally, the script closing tag. </ refactor - script > To see a larger example, you can simply start the OVM to UVM Migration wizard and inspect the script behind it (there is an Inspect button on the right side of the first wizard page). Tip Right-click in the XML editor > Validate to early detect syntax problems (requires the DTD specification line in the xml header). Tip Use Ctrl + Space to invoke autocomplete in the XML editor for tag and attribute names (requires the DTD specification line in the xml header). Applying a Refactoring Script To apply a script, right click on the script.xml file and select Refactor > Apply a refactoring script . The refactoring wizard start automatically.\nYou can also right click on project , select Refactor > Apply a refactoring script , then browse to the script you want to apply. You can either apply the changes straightforward or inspect them in a Preview wizard page, where you can select which of the proposed changes should be performed. Also, on the top-right of the preview wizard you have a Filter button that allows you to filter changes by the type of refactoring action. To apply the refactoring, click Finish Select a file/change to see the source differences produced by the refactoring. Un-check a file/change to prevent those changes from being applied. Filter the displayed changes by type of refactoring item Tip Add +dvt_ref_scripts_debug+true directive to your .dvt/default.build to see debug information about the script execution in the DVT Build Console Add New Parameter to Module Diagrams On this page Writing a Refactoring Script Applying a Refactoring Script Back to top",
    "section_path": [],
    "tokens": 1125,
    "source": "scraped"
  },
  {
    "id": "0e25ec86-48d4-47e8-9842-465c89967272",
    "title": "Override Annotation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/override-constraints/override-constraint-annotation.html",
    "content": "Override Annotation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Override Annotation An Override Annotation indicates that a constraint overrides a parent class implementation. Override annotations are green triangles on the vertical ruler to the left of the editor, next to the constraint definition. Hover an override annotation to see the overridden parent. Click on an override annotation to jump to the parent constraint that is overridden. Override Constraints Inspect Overrides in the Quick Type Hierarchy View Back to top",
    "section_path": [],
    "tokens": 102,
    "source": "scraped"
  },
  {
    "id": "0102f599-8a4c-4c5f-8a64-7509d527998f",
    "title": "UVM Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/uvm-templates.html",
    "content": "UVM Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Templates DVT offers autocomplete templates for UVM components. Just type in the editor uvm then hit Ctrl + Space twice and a drop-down list will offer you the available templates. After you pick the desired template, you can fill in the template parameters (e.g. company prefix, component name etc.). UVM Smart Log UVM Verification Hierarchy Back to top",
    "section_path": [],
    "tokens": 91,
    "source": "scraped"
  },
  {
    "id": "536c87a2-2dc9-45bc-812d-4ecde5a8564e",
    "title": "Inactive Code Highlight | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/macros-support/inactive-code-highlight.html",
    "content": "Inactive Code Highlight | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Inactive Code Highlight Overview DVT editor marks the inactive code (i.e. code that is not compiled due to ifdef / ifndef ) with a colored background. Settings You can enable/disable the highlight and choose the highlight color: navigate to Window > Preferences then expand DVT > SystemVerilog > Editor . In the panel on the right side you can find the Inactive code highlight settings group. Macros Support Macro Expansion On this page Overview Settings Back to top",
    "section_path": [],
    "tokens": 111,
    "source": "scraped"
  },
  {
    "id": "2d3d7229-9b0f-468c-81a0-9d378125360f",
    "title": "Semantic Search | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/semantic-search/index.html",
    "content": "Semantic Search | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Semantic Search You can search for a specific type, method etc. in the current project or whole workspace. Press Ctrl + H to pop-up the search dialog. To search for the declaration of a specific type, method, field etc. : Press Ctrl + H to open the Search Dialog Click on the vlog Search tab. Type the name in the Search String (if you select in the editor before pressing Ctrl+H, the Search String is automatically set to the selection). Select type or field etc. and Declarations Click Search. To search for a whole word in all verilog files, in comments or not: Press Ctrl + H to open the Search Dialog Click on the vlog Search tab. Type the name in the Search String (if you select in the editor before pressing Ctrl+H, the Search String is automatically set to the selection). Select Whole Word and Do not search in comments or All occurrences Click Search. The search results are presented in the Search View . The Search View is automatically raised at any invocation. You can also go to menu Window > Show View > Other\u00e2\u0080\u00a6 > General > Search to open the Search View. Use up and down arrows to move from one match to another. Use search history to switch between various search results. Use search again to refresh search results. Autoinstance Using Drag and Drop Show Usages, Readers or Writers Back to top",
    "section_path": [],
    "tokens": 270,
    "source": "scraped"
  },
  {
    "id": "ea416235-aefa-44e8-9c5a-91b47fac9f67",
    "title": "How do I change the name of the xterm opened by a DVT Generic Run Configuration? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-do-i-change-the-name-of-the-xterm-opened-by-a-dvt-generic-run-configuration.html",
    "content": "How do I change the name of the xterm opened by a DVT Generic Run Configuration? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How do I change the name of the xterm opened by a DVT Generic Run Configuration? At the beginning of your script/command insert these commands: echo - ne \" \\033 ]0;YOUR_WINDOW_TITLE_HERE \\007 \" echo - ne \" \\033 ]1;YOUR_TASKBAR_TITLE_HERE \\007 \" How can I open a file in DVT from Questa? I get errors while installing or updating a plugin from an update site Back to top",
    "section_path": [],
    "tokens": 113,
    "source": "scraped"
  },
  {
    "id": "0e735fad-1810-4761-a0ae-f2e11009d164",
    "title": "Implement Extern Method | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/implement-extern-method.html",
    "content": "Implement Extern Method | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Implement Extern Method A warning is triggered for extern methods which are not implemented. Place the editor cursor on the warning\u00e2\u0080\u0099s line and press Ctrl + 1 , select Implement extern function \u00e2\u0080\u00a6 or Implement extern task \u00e2\u0080\u00a6 from the list of quick fix proposals and press Enter . The extern task or function implementation is inserted outside the class scope. Tip You can change the method signature by editing the Method Code Templates Note The implementation stub contains a TODO reminder which shows up the Tasks View. See Track Tasks using TODO Markers . Implement Extern Constraint Implement Missing Pure Virtual Methods Back to top",
    "section_path": [],
    "tokens": 139,
    "source": "scraped"
  },
  {
    "id": "9df503a5-ec45-42ab-9796-fdf43feec55c",
    "title": "Change Method Signature | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/change-method-signature.html",
    "content": "Change Method Signature | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Change Method Signature The change method signature refactoring allows you to add, reorder or remove the arguments of a method. All updates to existing method calls will be automatically performed. Place the cursor on the desired method, right-click and go to Refactor > Change Method Signature or simply press Shift+Alt+C . In the Change Method Signature dialog you can modify the method\u00e2\u0080\u0099s name and arguments. Method name changes are equivalent with Rename Refactoring . The list of arguments can be manipulated by using the buttons on the right side of the table. Add: Add a new argument at the end of the list. You will be prompted to provide: the argument type the argument name the actual argument to be used in existing function calls Remove: Remove the selected argument. The selected argument will not be part of the list anymore and will be erased from function calls as well. Up/Down: Change the position of the selected argument. Note The dialog status area presents validation information, such as duplicate parameters, invalid identifier names and duplicate methods. Click OK to perform the refactoring, or Preview to see the changes that are about to be performed in the source code.\nIn the Preview page you can select the changes that should be performed.\nAfter you click Finish the changes are performed, and the project is rebuilt. Note This functionality works only for ANSI style methods. Note In specific preprocessing scenarios - for example when a method declaration or a method call lies within a macro expansion - the refactoring cannot be automatically carried out. A FIXME comment will be inserted in the relevant code location and will show up in the Tasks View. See Track Tasks using TODO Markers . Split into Extern and Implementation Connect Instances Across the Design Hierarchy Back to top",
    "section_path": [],
    "tokens": 335,
    "source": "scraped"
  },
  {
    "id": "848e1a2f-8c29-43ec-9da2-0d13cff82182",
    "title": "Comments Formatting | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/comments-formatting.html",
    "content": "Comments Formatting | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Comments Formatting Comment formatting preferences allow you change how comments are rendered in tooltips. You can choose the markup language used to render the comments from: Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Editors \u00e2\u0080\u00a3 Markup language . Note The Autodetect option selects between Markdown, Javadoc and Natural Docs for each comment based on the syntax. If no syntax is detected, the comment will be rendered Verbatim. See also Specador Documentation Generator Markdown ( recommended ) Markdown is one of the world\u00e2\u0080\u0099s most popular markup languages that can be used to add formatting elements to plaintext text documents. Markdown uses symbols like asterisks and dashes to create formatting like headings and bold text. This makes it quicker to write than complex HTML code. It prioritizes readability by utilizing plain text and clear symbols to ensure the code remains easy to understand. Comments written in Markdown will be formatted based on the following syntax: Bold Font // **This word** and __this word__ should be bolded function bit my_function ( bit argument ); endfunction Italic Font // *This word* and _this word_ should be in italic font // ***This word*** should be italic and bolded function bit my_function ( bit argument ); endfunction Bullet List // Below is a list // + This is the first element // + This is the second element // This is the continuation of // the second element function bit my_function ( bit argument ); endfunction Numbered List // Below is a list //  1. First Item //  2. Second Item //  3. Third Item function bit my_function ( bit argument ); endfunction Heading // # This is a level 1 heading // ## This is a level 2 heading // ###### This is a level 6 heading function bit my_function ( bit argument ); endfunction Image // Below you can see a section of a diagram // // ![Alternative text](diagram_section.png) function bit my_function ( bit argument ); endfunction Note The path can be either absolute, relative to the current file or relative to additional image locations. To specify additional image locations use dvt_documentation_resource_locations_add directive. Link // [DVT Eclipse](https://eda.amiq.com) // [DVT Eclipse][1] // // [1]: https://eda.amiq.com // // [LABEL](#ELEMENT_NAME) // [LABEL][2] // // [2]: #ELEMENT_NAME function bit my_function ( bit argument ); endfunction Note If you Ctrl + right click on a link that contains an object name, it should jump to its declaration. ELEMENT_NAME must respect the following notations: fully qualified names PACKAGE::CLASS.method TYPE_NAME.INNER_TYPE_NAME or just TYPE_NAME, solved relative to the enclosing scope Quote // > This is a quote function bit my_function ( bit argument ); endfunction Start Code // Below is a code section // //     int a; //     if ( a > 4 ) //        return 4; //     return a; function bit my_function ( bit argument ); endfunction Table // | Header 1   | Header 2   | // |------------|------------| // | Row 1 Col1 | Row 1 Col2 | // | Row 2 Col1 | Row 2 Col2 | function bit my_function ( bit argument ); endfunction Javadoc Javadoc syntax relies on specific tags to guide how information is displayed in the generated documentation. These tags can offer insights into your code\u00e2\u0080\u0099s functionality, can facilitate documentation organization, and can enable linking to other elements. Comments written in Javadoc will be formatted based on the following tags: @author @link Note As links you can have: an element name, a file, a valid web URL. If you Ctrl + right click on a link that contains an object name, it should jump to its declaration. The element name must respect the following notations: fully qualified names PACKAGE::CLASS.method TYPE_NAME.INNER_TYPE_NAME or just TYPE_NAME, solved relative to the enclosing scope @param @return @see Note Works similar to @link , but it will be placed in a separate section at the bottom of the comment, named \u00e2\u0080\u009cSee also\u00e2\u0080\u009d. @since @version Natural Docs ( deprecated ) Important Natural Docs format is deprecated and will no longer receive updates, but support for existing functionality will continue. If the markup language preference is set to Autodetect , you must include at least one Natural Docs specific syntax element ( Topics , Hyperlinks , Images or Definition List ) to prevent conflicts with Markdown syntax, which takes precedence. Natural Docs is an open source documentation generator for multiple programming languages.  You document your code in a natural syntax that reads like plain English. Comments written in Natural Docs will be formatted based on the following syntax: Bold Font // *This word* should be bolded function bit my_function ( bit argument ); endfunction Bullet List // Below is a list // + This is the first element // + This is the second element // This is the continuation of // the second element function bit my_function ( bit argument ); endfunction Definition List // Below is a definition list // First Item - This is the definition // of the first Item // Second Item - This is the deinition // of the second item function bit my_function ( bit argument ); endfunction Heading // Before // // Title of the heading: // Content of the heading // // After function bit my_function ( bit argument ); endfunction Image // Below you can see a section of a diagram // // (see diagram_section.png) function bit my_function ( bit argument ); endfunction Note The path can be either absolute, relative to the current file or relative to additional image locations. To specify additional image locations use dvt_documentation_resource_locations_add directive. Italic Font // ~This word~ should be in italic font function bit my_function ( bit argument ); endfunction Link // Check this function out <my_other_function> function bit my_function ( bit argument ); endfunction Note As links you can have: an element name, a file, a valid web URL. If you Ctrl + right click on a link that contains an object name, it should jump to its declaration. The element name must respect the following notations: fully qualified names PACKAGE::CLASS.method TYPE_NAME.INNER_TYPE_NAME or just TYPE_NAME, solved relative to the enclosing scope Start Code // Below is a code section // (start code) //   int a; //   if ( a > 4 ) //      return 4; //   return a; // (end) function bit my_function ( bit argument ); endfunction Topic Line // Below you can see a topic line // // Function: my_first_function function bit my_function ( bit argument ); endfunction Underline Font // _This word_ should be underlined function bit my_function ( bit argument ); endfunction Reference Common Shortcuts On this page Markdown ( recommended ) Javadoc Natural Docs ( deprecated ) Back to top",
    "section_path": [],
    "tokens": 1130,
    "source": "scraped"
  },
  {
    "id": "19233fc6-3199-46b4-b146-822d5f858f5f",
    "title": "How does DVT integrate with CVS? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-does-dvt-integrate-with-cvs.html",
    "content": "How does DVT integrate with CVS? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How does DVT integrate with CVS? Get the CVS plugin The simplest way is to install DVT from a prepacked distribution that includes the CVS plugin for Eclipse. For an Eclipse installation that does not include the CVS plugin, go to Help \u00e2\u0080\u00a3 Install New Software , select Work With: All Available Sites then type CVS in the filter text input. After filtering is done, you should select Eclipse CVS Client under Collaboration , and follow the next steps of the wizard. Configure the CVS repository After the plug-in is installed, create a repository connection: go to Window \u00e2\u0080\u00a3 Open Perspective \u00e2\u0080\u00a3 Other , then select CVS Repository Exploring . Now, in the CVS Repositories view on the left side, right-click \u00e2\u0080\u00a3 New \u00e2\u0080\u00a3 Repository Location and fill in the connection information. After this step is completed successfully you can browse your repository and check out projects, or you should find in the Navigator View that the previously checked out projects are now recognized as shared projects. Tip If you right - click on a file/directory in the Navigator View , you should have common operations under the Team menu (Update/Commit/Show history etc). How does DVT integrate with emacs? How to set an environment variable within a Run Configuration? Back to top",
    "section_path": [],
    "tokens": 248,
    "source": "scraped"
  },
  {
    "id": "a253a624-c7e2-445e-8b31-0db74ace1e7b",
    "title": "Search Port in Verification Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/search-port-in-verification-hierarchy.html",
    "content": "Search Port in Verification Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Search Port in Verification Hierarchy You can search for a specific port in the verification hierarchy by using the Verification Hierarchy View . Press the Select Top button and pick one of the available top units/components. Make the ports panel visible by pressing the Show/Hide Ports button. In the instances filter text box, type the name of the port you are looking for, preceded by the dot \u00e2\u0080\u0098.\u00e2\u0080\u0099 character. The instances that contain the port are bolded. The ports are also bolded and promoted to the top of the ports pane. Search Port in Design Hierarchy Search all UVM Phase Overrides Back to top",
    "section_path": [],
    "tokens": 139,
    "source": "scraped"
  },
  {
    "id": "8d09e4e9-6d04-4667-ba00-ea66ad763b6d",
    "title": "How do I change the tooltip colors? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-do-i-change-the-tooltip-colors.html",
    "content": "How do I change the tooltip colors? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How do I change the tooltip colors? If you want to change the tooltip colors you can use Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Appearance \u00e2\u0080\u00a3 Colors and Fonts \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Tooltips and for content assist Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Appearance \u00e2\u0080\u00a3 Colors and Fonts \u00e2\u0080\u00a3 Basic . Some widget colors are not displayed properly. What can I do? How do I change Internet Proxy Settings? Back to top",
    "section_path": [],
    "tokens": 105,
    "source": "scraped"
  },
  {
    "id": "47c513a8-038d-4818-919b-b3817df70f76",
    "title": "Autoinstance Using Drag and Drop | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/module-automatic-instantiation/autoinstance-using-drag-and-drop.html",
    "content": "Autoinstance Using Drag and Drop | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Autoinstance Using Drag and Drop Design elements can be auto instantiated by dragging them from the Types View into the editor. You can customize what gets generated from menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Editor \u00e2\u0080\u00a3 Content Assist in the Auto-instantiation section. Autoinstance Using Autocomplete Semantic Search Back to top",
    "section_path": [],
    "tokens": 88,
    "source": "scraped"
  },
  {
    "id": "61379700-5645-457d-a891-f8381a4c8261",
    "title": "Override Using Autocomplete Proposals | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/override-constraints/override-constraints-using-autocomplete.html",
    "content": "Override Using Autocomplete Proposals | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Override Using Autocomplete Proposals Place your cursor inside a class and then press Ctrl + Space to trigger Content Assist . When doing so, the list of proposals includes constraints that are available to override. The adjacent Proposal Tooltip includes information about the action that will be performed. Upon choosing the constraint, a corresponding constraint stub will be generated at the cursor\u00e2\u0080\u0099s location. The constraints may be filtered by typing additional keywords such as static . Tip You can change the constraint signature by editing the Constraint Code Templates See also Content Assist (Autocomplete) . Override Using the Dialog Generate Getters and Setters Back to top",
    "section_path": [],
    "tokens": 140,
    "source": "scraped"
  },
  {
    "id": "7bd70206-7ecb-4b94-8c38-727177c96355",
    "title": "Quick Search in Views | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/index.html",
    "content": "Quick Search in Views | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Quick Search in Views Most DVT views have a Quick Search bar: The Quick Search bar allows you to easily locate a specific element by typing a few letters from its name. Besides simple Regex ( ? for any character and * for any character sequence), more advanced patterns are supported, for example CamelCase or hierarchical patterns like top//fifo/c.pi_data . CamelCase Simple Regex Hierarchical Search Search for Members Search Port in Design Hierarchy Search Port in Verification Hierarchy Search all UVM Phase Overrides Search Global API Show Instances in the Design Hierarchy View CamelCase Back to top",
    "section_path": [],
    "tokens": 131,
    "source": "scraped"
  },
  {
    "id": "da7fd491-9166-41e6-af24-4ee7d85c435d",
    "title": "Troubleshooting | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/troubleshooting.html",
    "content": "Troubleshooting | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Troubleshooting At its core, an LLM functions as a next-token prediction engine. It predicts the most likely next word in a sequence based on the context provided by the preceding text. The process of generating text usually involves some level of randomness in the choice of the next token. This randomness allows the model to produce varied and creative outputs instead of the same response every time given the same input, making the generation process non-deterministic. Why do I get unexpected replies? There are a couple of things you can do to improve the replies: Prompt engineering To increase the quality of a reply follow this guideline when writing a request to the LLM: Be Specific and Clear: Clearly define your question or task to minimize ambiguity. Specific questions and tasks usually lead to more accurate and relevant responses. Provide Context : Give the model adequate context to work with. This can include relevant code sections and accurate domain specific information. Use Prompt Snippets to easily do this. Use Examples : Include examples in your prompt. This can help the LLM \u00e2\u0080\u009cunderstand\u00e2\u0080\u009d the format or style you\u00e2\u0080\u0099re aiming for in the response. Set Explicit Constraints : If you have specific constraints regarding length, format, or content, make these clear in your prompt. Save the constraints as Custom Snippets and reuse them every time you need. Iterate and Refine : Experiment with different phrasings and structures to find what works best. Small adjustments can often lead to significant improvements in the quality of generated replies. The Chat features are designed to help you refine the prompt. Regenerate the reply Generate a new reply from the LLM by clicking the Regenerate button above the LLM reply in the chat. Due to the LLM\u00e2\u0080\u0099s non-deterministic characteristics, this can lead to different responses that may be more adequate. Alternatively, you can use natural language and request the LLM to generate additional solutions for your problem. Try a different LLM Sometimes, a specific LLM is just not fit for the task you are trying to accomplish. You can easily change the LLM using the Set Default Language Model command or you can regenerate just a specific reply with a different model using the Switch Language Model dropdown above the reply. If you\u00e2\u0080\u0099re using a local Ollama model, try getting a different version of that model with more parameters if your hardware allows, or change it with a completely different model. Why do I get different replies for the same request? The LLM generation process is non-deterministic. Most models can be tuned using different parameters and two commonly used parameters that control the randomness and variability are: Temperature : Higher temperature will make replies more, random, creative and diverse, lower temperature will get you more deterministic, factual and consistent replies. Top P : Lower values reduce diversity and focus on more probable words, higher values lead to a more diverse vocabulary and phrasing. These parameters can be set in the models.json file (see Advanced LLM Configuration ). What to do if I get errors or find a bug? When unexpected things happen, the AI Assistant will notify you with a popup in the bottom right corner. For in depth debug information you can check the AI Assistant log under the DVT AI Output Panel in VS Code or the DVT AI Console View in Eclipse. There are several types of information displayed in the log: debug information warnings and errors configuration information (e.g.\u00c2\u00a0API keys) raw messages exchanged between AI Assistants and the LLM provider Note The log contents contain sensitive information, for example sections of code, so these logs are not collected when you report an issue in DVT IDE. Add Comments to Selected Element Content Filters On this page Why do I get unexpected replies? Why do I get different replies for the same request? What to do if I get errors or find a bug? Back to top",
    "section_path": [],
    "tokens": 686,
    "source": "scraped"
  },
  {
    "id": "82788b15-620f-422c-aa0d-a604fc2886f7",
    "title": "Trace Connections | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/trace-connections/index.html",
    "content": "Trace Connections | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Trace Connections Trace Connections from Design Hierarchy Trace Connections from Editor Trace Connections View Trace Path Search Global API Trace Connections from Design Hierarchy Back to top",
    "section_path": [],
    "tokens": 59,
    "source": "scraped"
  },
  {
    "id": "141351d3-641a-419e-b06f-c4307d38d8a1",
    "title": "Simulation Prerequisites | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/debugger-integration/simulation-prerequisites.html",
    "content": "Simulation Prerequisites | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Simulation Prerequisites Simulator switches for SystemVerilog and VHDL In order for DVT to communicate with the simulator, you need to pass the simulator a set of switches. The table below details the required switches per simulator: Xcelium xrun -linedebug -input \u00e2\u0080\u009c@source $DVT_HOME/libs/dvt_debug_tcl/dvt_debug.tcl\u00e2\u0080\u009d \u00e2\u0080\u00a6 IUS irun -linedebug -input \u00e2\u0080\u009c@source $DVT_HOME/libs/dvt_debug_tcl/dvt_debug.tcl\u00e2\u0080\u009d \u00e2\u0080\u00a6 VCS vcs -debug_acc+all -debug_region+cell+encrypt \u00e2\u0080\u00a6 ./simv -ucli -i \u00e2\u0080\u009c$DVT_HOME/libs/dvt_debug_tcl/dvt_debug.tcl\u00e2\u0080\u009d \u00e2\u0080\u00a6 Questasim vlog -O0 -vopt +acc \u00e2\u0080\u00a6 vsim -vopt +acc -do \u00e2\u0080\u009cdo $DVT_HOME/libs/dvt_debug_tcl/dvt_debug.tcl\u00e2\u0080\u009d \u00e2\u0080\u00a6 Note When running vsim with -qwavedb option, the Variables View may not be populated correctly (missing local and class variables). Note In general, simulation runs slower when debugging is enabled. This has nothing to do with the DVT-Simulator integration. The extent of this effect is simulator-specific. Note The -qwavedb flag of vsim is known to interfere with the proper display of local and class variable in the Variables View. The dvt_sn_debug Library for e-Language In order for DVT to communicate with Specman, you need to load or precompile the dvt_sn_debug library into Specman. The library is typically located in the $DVT_HOME/libs folder, which you should add to your $SPECMAN_PATH For example: irun $DVT_HOME/libs/dvt_sn_debug/e/dvt_top.e .... The dvt_sn_debug library implements the communication between DVT and Specman in debug mode.\nIt doesn\u00e2\u0080\u0099t add any simulation overload. Communication between DVT and the simulator is done: when you connect when a breakpoint is hit when you switch threads or frames when you inspect variables (they are fetched lazily) when you add/remove or enable/disable breakpoints while being connected to the simulator Debugger Integration Launch a Debug Simulation Back to top",
    "section_path": [],
    "tokens": 289,
    "source": "scraped"
  },
  {
    "id": "3c5095bc-569d-4291-b930-ebcc89590ce9",
    "title": "Incremental Compilation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/incremental-compilation.html",
    "content": "Incremental Compilation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Incremental Compilation When something changes in your code, the DVT compiler updates the project database by analyzing the impact of your specific change across the entire project. This is called incremental compilation. Instead of waiting to recompile the entire project, you get instant feedback about the change.\nAny errors are flagged as you type, for example if you are using the wrong syntax, if you have a typo, or if some data types are mismatched. This way  the compile & fix cycles are significantly cut down. As the project database is properly updated on every change, the DVT functionality is accurate (hyperlinks, auto-compete, refactoring, diagrams, etc.). The DVT incremental compiler is triggered in 3 situations: When you save a file. When the inactivity timeout is reached, by default 5 seconds after you stop typing inside a DVT source code editor. When changes made outside DVT are detected, for example after a revision control system related operation which leads to code updates. Note The Build Automatically inactivity timeout can be modified from the Window > Preferences menu, then DVT > Build Configurations > General . Note The incremental compilation can be disabled if you go to the Project menu and uncheck Build Automatically . However, we strongly recommend not working with the incremental build disabled , since this will lead to an outdated DVT database and unreliable functionality. DVT warns you when you\u00e2\u0080\u0099re working with the Build Automatically preference disabled and keeps track of the changes you\u00e2\u0080\u0099ve made via a notification in the top-right corner of source code editor. Corner Case Considerations You can rely on the DVT incremental compiler to handle the vast majority of your code changes. However, particular types of changes have a substantial impact on the project database and the incremental compiler would take a while to do its job. To prevent potentially disrupting your work, such changes are not processed incrementally. Consequently, the project database is not up-to-date with the code changes. A notification in the top-right corner of the visible source code editors will inform you of such a state. Here are some examples: Changing the build configuration file, for example changing the value of a +define switch: Changing a file which has more than 15000 lines of code, for example editing a huge netlist: You can modify the maximum number of lines threshold by adding the +dvt_incremental_compile_max_lines+<threshold> directive in the build configuration file Changing a file which has less than 15000 lines but takes more than a configurable threshold to be parsed. A pop-up is shown: and the notification is displayed: This could happen for example when preprocessing is heavily used, and the actual amount of code to be analyzed is much bigger than the apparent length of the file. Changing a file which leads to many database modifications, for example commenting the definition of an enum used throughout the entire testbench. After a configurable timeout, a pop-up is shown: If you choose to stop checking, the database remains in an inconsistent state and the notification is displayed. In such cases don\u00e2\u0080\u0099t hesitate to reach out, as we constantly improve the performance of our tools based on user feedback - see the Performance section below. By default, the incremental build timeout is set to 4 seconds. When incremental build is performed on multiple files, the semantic checking timeout is increased proportionally (1 second for every 2 files) You can modify the incremental compilation timeout by adding the +dvt_incremental_compile_timeout+<timeout> directive in the build configuration file Changing a macro used in more than 50 files Changing the design hierarchy structure so that a full elaboration is needed When changing more than 50 files, the tool automatically triggers a full build. Performance Considerations We expect most common edits to be incrementally compiled in less than 500ms. In certain situations it might happen to grow up to a few seconds, for example think about changing a SystemVerilog base class upon which all of a UVM testbench is built. If incremental build feels slow, please report an issue using the following procedure: add the +dvt_profile_incremental directive in the .dvt/default.build project configuration file trigger the incremental build in the problematic context, or continue your work regularly until you feel the slowness again every time an incremental build takes more than 2 seconds, a file named dvt_thread_dump_<timestamp>.zip should be generated under the project root send the generated log file by submitting an How to Report an Issue? Note In case a thread dump file was not generated, it means that the source of slowness is elsewhere, perhaps a slow filesystem. In such a situation, please collect a thread dump and share it with us as described here: How to Report an Issue? Generating External Tool Scripts from the DVT Build Configuration Preprocessed Files Support Back to top",
    "section_path": [],
    "tokens": 828,
    "source": "scraped"
  },
  {
    "id": "2557a3d1-8ad3-4915-9e38-3b9a306e62a9",
    "title": "Add Port to Module | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/add-port-to-module.html",
    "content": "Add Port to Module | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Add Port to Module An error is triggered when connecting a non-existing port in a module instantiation. Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Add port \u00e2\u0080\u00a6 from the list of quick fix proposals and press Enter . Tip If the module is instantiated multiple time across the project, the Refactor Add Port Wizard is opened. See Add New Port to Module . Tip You may change the port direction. Press Enter when done. Add Parameter to Module Add Signal to Sensitivity List Back to top",
    "section_path": [],
    "tokens": 128,
    "source": "scraped"
  },
  {
    "id": "fd2ba020-f499-497b-a0d5-f5e5d12b6e16",
    "title": "Update Virtual Method Signature | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/update-virtual-method-signature.html",
    "content": "Update Virtual Method Signature | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Update Virtual Method Signature An error is triggered when the signature of a method override differs from the signature of the overridden virtual method. Place the editor cursor on the error\u00e2\u0080\u0099s line and press Ctrl + 1 , select Update \u00e2\u0080\u00a6 signature to match \u00e2\u0080\u00a6 definition from the list of quick fix proposals and press Enter . The method signature (return type, argument names, types, directions and default values) is updated accordingly to match the parent class definition: Update Module Instance Waive Compilation Problems Back to top",
    "section_path": [],
    "tokens": 121,
    "source": "scraped"
  },
  {
    "id": "77370875-7c39-463b-931c-949dd64f63a4",
    "title": "Expand Macro | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-assist-proposals/expand-macro.html",
    "content": "Expand Macro | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Expand Macro You can easily expand macro calls in the current file. Place the editor cursor on a macro call, press Ctrl + 1 , select Expand macro from the list of quick assist proposals and press Enter . The macro call is immediately expanded. Note By default, the expansion is done all levels inline. You can customize these settings by going to Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Refactoring and selecting the desired level and place of expansion. Tip You can also click on the link in the proposal\u00e2\u0080\u0099s tooltip and go directly to the preference page for customizing the expansion parameters. Collapse Macro Expand .* Port Connections Back to top",
    "section_path": [],
    "tokens": 146,
    "source": "scraped"
  },
  {
    "id": "fde87217-2abe-45f9-8261-78251ac54558",
    "title": "UVM Browser | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/uvm-browser.html",
    "content": "UVM Browser | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Browser The UVM Browser View is an intuitive entry point for exploring all the classes of a UVM-based verification environment. It allows you to explore UVM-based classes grouped by categories, like agents, monitors, drivers or sequences and easily inspect the UVM flow specific API, like overridden phases, class members registered to the\nfactory or TLM ports. Open the view from menu Window \u00e2\u0080\u00a3 Show View \u00e2\u0080\u00a3 Other\u00e2\u0080\u00a6 \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 UVM Browser . You can use CamelCase or Simple Regex to locate a specific element. Toolbar Prepend Package Name Prepend the enclosing package name to the name of each class, useful when you explore for example all agents across packages. Group By Package Group classes by package. You may chose to see for example all agents across packages or to explore all categories in a specific package. The top UVM Types Panel presents all the UVM-based classes defined in your verification environment. For convenience they are grouped by categories like agents or monitors. The inheritance hierarchy between classes is shown up to the UVM base class. Description Class is declared under a different package than the parent package presented in the view\u00e2\u0080\u0099s tree because one of its children are declared under that parent package and \u00e2\u0080\u009cGroup by Package\u00e2\u0080\u009d is enabled. Physical sequencer or sequence. A physical sequencer is a sequencer that is connected to a driver. A physical sequence always extends uvm_sequence parameterized with a class that extends uvm_sequence_item and contains `uvm_declare_p_sequencer macro with a physical sequencer as argument. The categories and their corresponding base classes are the following Categories Base class Notes Agents uvm_agent Drivers uvm_driver Envs uvm_env Items uvm_sequence_item Monitors uvm_monitor Memories uvm_mem Other Components uvm_component Any class deriving from uvm_component which does not fall into any other category within this table. Other Objects uvm_object Ports uvm_port_base, uvm_tlm_if_base, uvm_tlm_extension_base, uvm_sqr_if_base, uvm_tlm_req_rsp_channel, uvm_tlm_fifo_base Registers uvm_reg Backdoor Registers uvm_reg_backdoor Frontdoor Registers uvm_reg_frontdoor Register Adapters uvm_reg_adapter Register Blocks uvm_reg_block Register Fields uvm_reg_field Register Sequences uvm_reg_sequence FIFO Registers uvm_reg_fifo Register Files uvm_reg_file Register Maps uvm_reg_map Register Predictors uvm_reg_predictor Scoreboards uvm_scoreboard Sequencers uvm_sequencer Sequences uvm_sequence Tests uvm_test The bottom Members Panel panel displays class members. You can toggle the UVM Members Mode on/off using the button. In UVM Members Mode it displays the following members: Virtual interfaces Class members registered to the factory using the `uvm_field\u00e2\u0080\u00a6 macros Class members of an UVM-based type (TLM ports included) Overridden functions and tasks from parent UVM base classes When the UVM Members Mode is off, the Members Panel behaves exactly like the Members Panel of the Type Hierarchy View . Static UVM Configuration Queries UVM Compliance Review Back to top",
    "section_path": [],
    "tokens": 467,
    "source": "scraped"
  },
  {
    "id": "69198e99-4e94-4d79-98c9-f08162fa8fae",
    "title": "Common Shortcuts | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/common-shortcuts.html",
    "content": "Common Shortcuts | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Common Shortcuts Ctrl + Alt + = Toggle Editor Emulation Mode. For example, you can choose to switch between eclipse and emacs editors. Ctrl + M Maximize or un-maximize editor. Ctrl + S Save current file. Ctrl + Shift + S Save all files. Ctrl + W Close current file. Ctrl + Z / Ctrl + Shift + Z Undo / Redo. Ctrl + C / Ctrl + X / Ctrl + V Copy / Cut / Paste. Insert Switch between insert and overwrite mode. Ctrl + D Delete current line. Alt + Arrow Up / Alt + Arrow Down Move current line or selection up / down. Ctrl + / Comment / uncomment lines. Ctrl + Shift + X / Ctrl + Shift + Y Change selection to all upper / lower case. Alt + Shift + Arrow Up Incrementally expand selection to word / enclosing brackets / line / enclosing scope. Alt + Shift + Arrow Down Restore selection to the previous state after a Alt+Shift+Arrow Up expansion. Ctrl + Shift + A Toggle block selection. Shift + Alt + O Toggle Mark Occurrences. Cursor must be on the identifier. Smart Editing Ctrl + Shift + F Format source file or selection. Ctrl + Space Autocomplete. Ctrl + 1 Open the list of available Quick Fix / Quick Assist proposals. Cursor must be on the error line / in an appropriate scope. Shift + Alt + R Start rename refactoring operation. Cursor must be on the entity name. Ctrl + Shift + = Expand macro with all levels inline. Cursor must be on the macro call. Ctrl + = Collapse inline expansion of macro. Cursor must be on the @DVT_EXPAND_MACRO_INLINE_START pragma. Shift + Alt + K W Set module as input of Code Factory . Cursor must be on the module definition. Shift + Alt + K I Create an instance of the design element set as Code Factory input. Shift + Alt + K S List as signals the ports of the design element set as Code Factory input. Shift + Alt + K T Define a testbench that instantiates the design element set as Code Factory input, with all the required port connections already made. Shift + Alt + G Open the UVM Field Editor . Use it to inspect and edit UVM field registrations. Basic Navigation Ctrl + E Show list of open editors - use arrow keys and press Enter to switch. Ctrl + F6 / Ctrl + Shift + F6 Show list of open editors - similar to Ctrl+E, but switches immediately after release of Ctrl. Ctrl + Page Down / Ctrl + Page Up Switch to next/previous editor tab. Alt + Arrow Left / Alt + Arrow Right Go to previous/next editor in the navigation order (similar with a browser). Ctrl + Q Go to last edited location. Ctrl + L Open the Go to Line dialog. Use it to quickly jump to a line in the current file. Ctrl + Arrow Right / Ctrl + Arrow Left Jump one word to the right / left. Ctrl + Shift + P Go to matching bracket. Cursor must be on the bracket to match. Ctrl + K / Ctrl + Shift + K Jump to the next/prev match of the selected word in file. Ctrl + F Open the Find dialog. Use it to find some text in the current file. If you select something, it will automatically fill the query. Ctrl + Shift + R Show the Open Resource dialog to locate and open any file - see also Ctrl+I Quick Compile Order. Smart Navigation Ctrl + mouse over identifier Hyperlink to declaration, implementation, show usages, jump to assignment, \u00e2\u0080\u00a6. F2 Show tooltip. Cursor must be on the entity name. Ctrl + Shift + Space Show positional tooltip \u00e2\u0080\u0093 cursor on argument/port connection to see corresponding method parameter/port definition. F3 Jump to declaration. Cursor must be on the entity name. Ctrl + F3 Open the hyperlink actions menu. Cursor must be on the entity name. Ctrl + Shift + G Find references in workspace. Cursor must be on the entity name. Ctrl + Shift + M Find references in file. Cursor must be on the entity name. Ctrl + H Open Search dialog to search across project for plain text or specific elements like types, methods, variables\u00e2\u0080\u00a6. Ctrl + . / Ctrl + , Comment current line or selection.Jump to next / jump to previous compiler syntax warning or error in the editor. Ctrl + I Open the Quick Compile Order View dialog. Use it to quickly open a file. Ctrl + O Open the Quick Outline View dialog. Use it to quickly move around in large files. Ctrl + Shift + T Open the Quick Types View dialog. Use it to quickly open a specific type definition. Ctrl + Shift + D Open the Quick Macros View dialog. Use it to quickly jump to a macro definition. Ctrl + T Open the Quick Type Hierarchy View dialog. You can quickly see inheritance tree for a class, function etc. For methods, tasks etc. you also see the implementations along the hierarchy (icons are not grayed). Cursor must be on the entity name. Ctrl + Shift + O Open the Quick Layers View . Cursor must be on the entity name. Use it to quickly locate and jump to an extension. F4 Open and update the Type Hierarchy View to see the inheritance tree and members of a struct. Cursor must be on the entity name. Shift + F3 Open the Layers View to see all externsions/external implementations. Cursor must be on the entity name. Shift + F4 Open and update the Design Hierarchy View to see the design structure. Cursor must be on the entity name. Shift + F6 Open and update the Verification Hierarchy View to see the UVM instances structure. Cursor must be on the UVM registered class. Ctrl + Alt + H Open the Call Hierarchy View to see the call tree of a selected function or task. Cursor must be on the method name. Ctrl + Alt + Shift + S Open the UVM Sequence Tree View to see the call tree of a selected sequence. Cursor must be on the sequence name. Others Ctrl + Shift + L Show all shortcuts. F5 Refresh. Shift + Alt + P Copy full path of file. The file may be selected in a view or open in an editor. Ctrl + U Open the Quick Run dialog. Use it to select a Run Configuration to launch. Ctrl + 3 Brings up the Quick Access dialog - UI elements such as commands, views, wizards, preference pages etc. can be accessed directly by typing their name. Ctrl + Shift + H Open Help Search. Alt + R + T + <Configuration number> With this shortcut you can quickly access a Run Configuration from  Run > Run History. Firstly, Alt+R will open the Run menu, then type T  to open Run History and then type the number of the Configuration from that list. Ctrl + Alt + R Rebuild Project. Comments Formatting Custom Pragmas Back to top",
    "section_path": [],
    "tokens": 1226,
    "source": "scraped"
  },
  {
    "id": "315bd513-ab28-4480-a395-5fb8cc7419a2",
    "title": "Connect to an Existing Simulation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/debugger-integration/connect-to-an-existing-simulation.html",
    "content": "Connect to an Existing Simulation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Connect to an Existing Simulation By host/port Parameters Assuming you know the connection parameters (host, port) you can directly connect to a simulation using a Debug DVT run configuration. Note DVT can also connect to a simulation running on a remote machine. By Sockets File Assuming you know the working directory of a simulation, you can create an empty DVT Generic run configuration (for example using a dummy echo for the launch command) and just specify the working directory. DVT will scan for a sockets file in the working directory and prompt you to connect to the running simulation. The dvt_debug Command creates the sockets file. Note For SystemVerilog / VHDL simulations, the socket and the sockets file are created automatically when the simulation starts, assuming you fulfilled the Simulation Prerequisites . The dvt_debug Command Assuming you fulfilled the Simulation Prerequisites , at the simulator prompt you can type dvt_debug . This will create a communication socket where DVT can connect to. The connection parameters (host, port) will be printed in the simulator console. This command allows you to connect to a simulation that was launched outside DVT, and later on you want to connect to it from DVT. The dvt_debug command also dumps a sockets file in the current directory. Launch a Debug Simulation Breakpoints Back to top",
    "section_path": [],
    "tokens": 254,
    "source": "scraped"
  },
  {
    "id": "abcbf854-9eba-4a60-96ef-bda80ec2e4e4",
    "title": "Quick VMM Documentation Access | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/vmm-support/quick-vmm-documentation-access.html",
    "content": "Quick VMM Documentation Access | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Quick VMM Documentation Access The Doxygen documentation is available at menu Help \u00e2\u0080\u00a3 Help Contents \u00e2\u0080\u00a3 VMM \u00e2\u0080\u0098\u00e2\u0080\u0099release number\u00e2\u0080\u0099\u00e2\u0080\u0099 Doxygen .  You may choose documentation version from menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 Help \u00e2\u0080\u00a3 VMM Doxygen . The SNPS VMM documentation is available at menu Help \u00e2\u0080\u00a3 Help Contents \u00e2\u0080\u00a3 SNPS VMM .  You need to configure the path to installed documentation from menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 Help \u00e2\u0080\u00a3 SNPS VMM . The SNPS Testbench documentation is available at menu Help \u00e2\u0080\u00a3 Help Contents \u00e2\u0080\u00a3 SNPS Testbench .  You need to configure the path to installed documentation from menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 Help \u00e2\u0080\u00a3 SNPS Testbench . You can use Ctrl + Shift + H to quickly search through documentation (with or without selection in the editor). VMM Smart Log VMM Templates Back to top",
    "section_path": [],
    "tokens": 171,
    "source": "scraped"
  },
  {
    "id": "8386ff87-ba08-4115-b4a7-de26e81f7688",
    "title": "Low Power Format Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/low-power-format-support/index.html",
    "content": "Low Power Format Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Low Power Format Support DVT analyzes power format files (either UPF or CPF) and presents power domain information in: Power Domain View Design Hierarchy View - using labels and/or colors Schematic Diagrams , Flow Diagrams and Block Diagrams - using labels and/or colors Breadcrumb Navigation Bar - using colors and tooltips Tooltips in the Verilog and VHDL Editors Inspect View Power format project nature In order to work with power format files, you have to enable the Power Format nature for your project. In the New DVT Project Wizard check UPF/CPF For an existing project, right-click on it in the Project Explorer View , choose Change DVT Nature then check UPF/CPF The Power Format nature works only in conjunction with at least one of Verilog or VHDL natures. Power format files Use one of the following build configuration directives to specify a power format file to be analyzed: Compatibility mode Directive ANY +dvt_upf+<upf_file> +dvt_cpf+<cpf_file> ius.irun -lps_1801 <upf_file> -lps_cpf <cpf_file> vcs.vloganvcs.vhdlgan -upf <upf_file> questa.vlogquesta.vcom -pa_upf <upf_file> Power format analysis At full build, after elaborating the design, DVT analyzes (interprets) the provided power format file and elaborates the power domains.\nTCL and power domain errors are detected and reported during this phase. All analyzed power format files are decorated with a blue bullet.\nFiles outside the project directory are automatically linked under the DVT Auto-Linked folder. Note By default, the working directory of the TCL interpreter is the DVT project directory.\nTo change it, use +dvt_compilation_root within the invocation where the power format file is specified, for example: + dvt_init + dvt_compilation_root +/ path / to / new / compilation / root + dvt_upf / path / to / file . upf Note Environment variables defined using +dvt_setenv within the invocation where the power format file is specified are available in the TCL $::env array. Tip To print power format analysis debug information in the DVT Build Console add this directive to your build configuration file: +dvt_pf_debug Tip If a file called dvt_pre_interpret.tcl exists in any of the the User and Common Settings Location it will be interpreted before the provided power format file. If several such files exist, they will all be interpreted, in precedence order of the User and Common Settings Locations. This mechanism allows you to define TCL variables or functions for debugging or deployment purposes. Incremental power format analysis Whenever you change a power format file which was analyzed during the full build phase, DVT triggers a power format file analysis and a power domain elaboration. Whenever you change a design file (Verilog or VHDL) which was compiled during the full build phase, DVT triggers a power domain elaboration (analysis of power format files is not performed). The following Common Power Format (CPF) and Unified Power Format (UPF) commands are supported by DVT: CPF up to Version 2.1 create_power_domain -name <power_domain_name> -default -instances <instance_list> -exclude_instances <instance_list> set_hierarchy_separator <separator_character> set_instance <instance> include <cpf_file> UPF (IEEE Std 1801\u00e2\u0084\u00a2) up to Version 3.0 create_power_domain <power_domain_name> -elements <instance_list> -exclude_elements <instance_list> -include_scope -scope <scope> upf_version <version> set_scope <scope> load_upf <upf_file> -scope <scope> -version <version> Supply Network Diagram Bit Field Diagrams Supply Network Diagram Back to top",
    "section_path": [],
    "tokens": 557,
    "source": "scraped"
  },
  {
    "id": "c925540f-58c2-4829-82da-5d828716608d",
    "title": "VMM Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/vmm-support/index.html",
    "content": "VMM Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide VMM Support VMM Smart Log Quick VMM Documentation Access VMM Templates OVM to UVM Migration VMM Smart Log Back to top",
    "section_path": [],
    "tokens": 53,
    "source": "scraped"
  },
  {
    "id": "362ee003-349a-4d46-a8df-9407ddd82bba",
    "title": "How to set an environment variable within a Run Configuration? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-to-set-an-environment-variable-within-a-run-configuration.html",
    "content": "How to set an environment variable within a Run Configuration? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to set an environment variable within a Run Configuration? More details here . How does DVT integrate with CVS? How to run a remote Unix command from DVT Eclipse for Windows? Back to top",
    "section_path": [],
    "tokens": 75,
    "source": "scraped"
  },
  {
    "id": "7549bef3-e486-45d4-b47a-9eb65b7007a2",
    "title": "Backup and Local History | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/getting-started/workspace/backup-and-local-history.html",
    "content": "Backup and Local History | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Backup and Local History The Eclipse platform provides a similar to autosaved backup files functionality (<name>.bak in win, <name>~ in emacs etc.). It is more elaborated, quite similar with revision control systems in capabilities (compare, multiple versions across time etc.) To quote from the platform manual: \u00e2\u0080\u009cA local edit history of a file is maintained when you create or modify a file. Each time you edit and save the file, a copy is saved so that you can replace the current file with a previous edit or even restore a deleted file. You can also compare the contents of all the local edits. Each edit in the local history is uniquely represented by the date and time the file was saved. Only files have local history; projects and folders do not.\u00e2\u0080\u009d Some quick access hints: Right click on a file \u00e2\u0080\u00a3 Compare With \u00e2\u0080\u00a3 Local History\u00e2\u0080\u00a6 and compare with various file snapshots taken over time From menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Workspace \u00e2\u0080\u00a3 Local History you can configure how often snapshots are taken and for how long preserved. Right click in the editor and chose Compare With/Replace With \u00e2\u0080\u00a3 Local History\u00e2\u0080\u00a6 . Linked Resources Basic Tutorial Back to top",
    "section_path": [],
    "tokens": 235,
    "source": "scraped"
  },
  {
    "id": "90000d51-bb65-4096-940d-dd1304a06929",
    "title": "Architecture UML Diagrams | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/diagrams/architecture-uml-diagrams.html",
    "content": "Architecture UML Diagrams | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Architecture UML Diagrams An Architecture UML Diagram presents the associations between all the entities that inherit from a commonly used set of base classes. Typically these are components like monitors, drivers, agents etc. To create an Architecture UML Diagram use the New Diagram toolbar button and select Architecture UML Diagram from the menu. You can tune the default set of base classes and filters from menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 Diagrams \u00e2\u0080\u00a3 UML Diagrams \u00e2\u0080\u00a3 Architecture . UML Diagrams Sequences UML Diagrams Back to top",
    "section_path": [],
    "tokens": 120,
    "source": "scraped"
  },
  {
    "id": "ea404c4b-eba2-4468-a136-ace765d88ef2",
    "title": "Refresh | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/getting-started/workspace/refresh.html",
    "content": "Refresh | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Refresh Once you start Eclipse, the workspace is usually read from the disk (not necessarily, caches are also kept from the previous invocation). From this point on, usually, what ever changes you do outside of Eclipse on resources in the workspace are not reflected immediately. You need to request for a refresh (right click on a project and chose Refresh from the drop down menu). \u00e2\u0080\u009cUsually\u00e2\u0080\u009d above because it can be customized. To customize the way refresh behaves and eventually switch it to fully detect each change whenever it occurs, use menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Workspace . From here you can customize if refresh is done on startup, how often etc. Refresh is a basic and primitive support of concurrency and also has to do with performance. Maybe I don\u00e2\u0080\u0099t want to be notified of every change on resources in my projects if somebody is also processing part of the data outside Eclipse. It may take a while, even not be relevant and stop me from working until the external processing is complete. For example compilation. Hence maybe I want to trigger it when I know for sure I am interested in some external changes. This does not imply that conflicts (for example editing a file that changed on the disk) are not promptly signaled by Eclipse. It happens often that you don\u00e2\u0080\u0099t find some files in your workspace (of course inside a project) although from explorer or console it seems they are there. Maybe you forgot to refresh? See also What is a Workspace Workspace and Workbench What is a Project Workspace and Workbench Linked Resources Back to top",
    "section_path": [],
    "tokens": 304,
    "source": "scraped"
  },
  {
    "id": "7410fed9-47a5-4346-98f4-a09a1910b215",
    "title": "Correct Spelling In Comments and Strings | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-fix-proposals/correct-spelling-in-comments-and-strings.html",
    "content": "Correct Spelling In Comments and Strings | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Correct Spelling In Comments and Strings DVT provides a quick way to fix typos in comments and strings. Place the editor cursor on the underlined word and press Ctrl + 1 , select Change to \u00e2\u0080\u00a6 from the list of quick fix proposals and press Enter . The misspelled word is replaced with a correct word of your choice. Add Virtual Qualifier to Interface Type Create Class In New File Back to top",
    "section_path": [],
    "tokens": 109,
    "source": "scraped"
  },
  {
    "id": "2964b84d-0206-42ba-ba9b-0234fb622f8c",
    "title": "Comments | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/comments.html",
    "content": "Comments | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Comments The following comment styles are allowed: # single line comment // single line comment -- single line comment /* multi line comment */ Strings Environment Variables Back to top",
    "section_path": [],
    "tokens": 61,
    "source": "scraped"
  },
  {
    "id": "a03bef5d-7c3e-430e-ac40-0737968d222b",
    "title": "I am new to Eclipse, where should I start from? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/i-am-new-to-eclipse-where-should-i-start-from.html",
    "content": "I am new to Eclipse, where should I start from? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide I am new to Eclipse, where should I start from? Online from http://www.eclipse.org/documentation . For example \u00e2\u0080\u009cEclipse Ganymede Documentation (HTML Help Center)\u00e2\u0080\u009d is for Eclipse 3.4. The same documentation is available from Eclipse menu Help \u00e2\u0080\u00a3 Help Contents . Start with Workbench User Guide chapters Getting Started and Tasks . Really useful and relaxing is the Tips and Tricks chapter. If you have installed the platform, you can always take a tour from menu Help \u00e2\u0080\u00a3 Welcome . There is no experience compared with practice, especially for GUI intensive apps. You can browse for more resources in the Eclipse site www.eclipse.org with good articles and responsive communities available. Be prepared to discover nice functionality all the time. From time to time we recommend to read tips, tricks or concepts. Q & A Where can I find DVT Help? Back to top",
    "section_path": [],
    "tokens": 181,
    "source": "scraped"
  },
  {
    "id": "0117f2b9-7209-4742-9a75-7117fa04a4bf",
    "title": "What is a project template? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/project-templates/what-is-a-project-template.html",
    "content": "What is a project template? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide What is a project template? A project template is a parameterized directory tree . Both in the file contents (.v, .sv, .sh, .e, .vhd, .txt - practically any file) and in the file or directory names you can use parameters . Combined with TODO markers , you can use a project template as a customized wizard . Parameters are IDs surrounded by double underscores (for example __pkg_prefix__ ) or by x_ and _x (for example x_pkg_prefix_x ). This convention allows you to edit the template like any other project using DVT in its full power - autocomplete, hyperlinks etc. Parameters are highlighted distinctively: Note It is not mandatory (but elegant) to use DVT for template creation. It is very elegant to apply the template using DVT. When you generate code using the project template, parameters are replaced in all files (including their names) with the values you specify: See also How to generate code from a project template Template Configuration Project Templates How to generate code from a project template Back to top",
    "section_path": [],
    "tokens": 208,
    "source": "scraped"
  },
  {
    "id": "9ae0d38a-8084-46d7-8f9d-88b90e285a8e",
    "title": "Code Templates | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-templates/index.html",
    "content": "Code Templates | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Code Templates Code Templates in Autocomplete Constraint Code Templates Method Code Templates Global Code Templates Project Level Code Templates Code Templates View Predefined Content Filters Code Templates in Autocomplete Back to top",
    "section_path": [],
    "tokens": 64,
    "source": "scraped"
  },
  {
    "id": "8b347c88-1716-4edd-ac9e-e9ea72898358",
    "title": "Predefined Content Filters | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-filters/predefined-content-filters.html",
    "content": "Predefined Content Filters | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Predefined Content Filters By default, elements defined in the UVM, OVM and VMM libraries are filtered out by Predefined Content Filters from the following views: Call Hierarchy Checks Coverage Diagram Macros (and Quick Macros) Outline (and Quick Outline) Problems Search Tasks Type Hierarchy (Members Panel) Types (and Quick Types) UVM Browser (Classes and Members Panels) UVM Field Editor (Dialog) UVM Sequence Tree Verification Hierarchy You can easily enable/disable Predefined Content Filters form the preference page: menu Window \u00e2\u0080\u00a3 Preferences then DVT \u00e2\u0080\u00a3 Content Filters . The Predefined Content Filters definitions are: <filter kind= \"HIDE\" name= \"OVM SystemVerilog Predefined Filter\" > <view-set match= \"TRUE\" > <view name= \"CALL_HIERARCHY\" /> <view name= \"FIELD_EDITOR\" /> <view name= \"OUTLINE\" /> <view name= \"PROBLEMS\" /> <view name= \"SEARCH\" /> <view name= \"TASKS\" /> <view name= \"TYPE_HIERARCHY_MEMBERS\" /> <view name= \"TYPES\" /> <view name= \"TYPES_MEMBERS\" /> <view name= \"UVM_BROWSER_CLASSES\" /> <view name= \"UVM_BROWSER_MEMBERS\" /> <view name= \"UVM_SEQUENCE_TREE\" /> <view name= \"VERIFICATION_HIERARCHY\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"TRUE\" > <path include-children= \"TRUE\" pattern= \"*/ovm.svh\" /> <path include-children= \"TRUE\" pattern= \"*/ovm_pkg.sv\" /> </path-set> </filter> <filter kind= \"HIDE\" name= \"OVM E Language Predefined Filter\" > <view-set match= \"TRUE\" > <view name= \"CALL_HIERARCHY\" /> <view name= \"FIELD_EDITOR\" /> <view name= \"OUTLINE\" /> <view name= \"PROBLEMS\" /> <view name= \"SEARCH\" /> <view name= \"TASKS\" /> <view name= \"TYPE_HIERARCHY_MEMBERS\" /> <view name= \"TYPES\" /> <view name= \"TYPES_MEMBERS\" /> <view name= \"UVM_BROWSER_CLASSES\" /> <view name= \"UVM_BROWSER_MEMBERS\" /> <view name= \"UVM_SEQUENCE_TREE\" /> <view name= \"VERIFICATION_HIERARCHY\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"FALSE\" > <path include-children= \"TRUE\" pattern= \"*/ovm_e_top.e\" /> </path-set> </filter> <filter kind= \"HIDE\" name= \"UVM SystemVerilog Predefined Filter\" > <view-set match= \"TRUE\" > <view name= \"CALL_HIERARCHY\" /> <view name= \"FIELD_EDITOR\" /> <view name= \"OUTLINE\" /> <view name= \"PROBLEMS\" /> <view name= \"SEARCH\" /> <view name= \"TASKS\" /> <view name= \"TYPE_HIERARCHY_MEMBERS\" /> <view name= \"TYPES\" /> <view name= \"TYPES_MEMBERS\" /> <view name= \"UVM_BROWSER_CLASSES\" /> <view name= \"UVM_BROWSER_MEMBERS\" /> <view name= \"UVM_SEQUENCE_TREE\" /> <view name= \"VERIFICATION_HIERARCHY\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"TRUE\" > <path include-children= \"TRUE\" pattern= \"*/uvm.svh\" /> <path include-children= \"TRUE\" pattern= \"*/uvm_pkg.sv\" /> <path include-children= \"TRUE\" pattern= \"*/cdns_uvm_pkg.sv\" /> <path include-children= \"TRUE\" pattern= \"*/questa_uvm_pkg.sv\" /> </path-set> </filter> <filter kind= \"HIDE\" name= \"UVM E Language Predefined Filter\" > <view-set match= \"TRUE\" > <view name= \"CALL_HIERARCHY\" /> <view name= \"FIELD_EDITOR\" /> <view name= \"OUTLINE\" /> <view name= \"PROBLEMS\" /> <view name= \"SEARCH\" /> <view name= \"TASKS\" /> <view name= \"TYPE_HIERARCHY_MEMBERS\" /> <view name= \"TYPES\" /> <view name= \"TYPES_MEMBERS\" /> <view name= \"UVM_BROWSER_CLASSES\" /> <view name= \"UVM_BROWSER_MEMBERS\" /> <view name= \"UVM_SEQUENCE_TREE\" /> <view name= \"VERIFICATION_HIERARCHY\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"FALSE\" > <path include-children= \"TRUE\" pattern= \"*/uvm_e_top.e\" /> </path-set> </filter> <filter kind= \"HIDE\" name= \"VMM SystemVerilog Predefined Filter\" > <view-set match= \"TRUE\" > <view name= \"CALL_HIERARCHY\" /> <view name= \"FIELD_EDITOR\" /> <view name= \"OUTLINE\" /> <view name= \"PROBLEMS\" /> <view name= \"SEARCH\" /> <view name= \"TASKS\" /> <view name= \"TYPE_HIERARCHY_MEMBERS\" /> <view name= \"TYPES\" /> <view name= \"TYPES_MEMBERS\" /> <view name= \"UVM_BROWSER_CLASSES\" /> <view name= \"UVM_BROWSER_MEMBERS\" /> <view name= \"UVM_SEQUENCE_TREE\" /> <view name= \"VERIFICATION_HIERARCHY\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"TRUE\" > <path include-children= \"TRUE\" pattern= \"*/vmm.sv\" /> </path-set> </filter> <filter name= \"OVM SystemVerilog Predefined Diagram Filter\" kind= \"HIDE\" > <view-set match= \"TRUE\" > <view name= \"DIAGRAM\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"TRUE\" > <path include-children= \"TRUE\" pattern= \"*/ovm.svh\" /> <path include-children= \"TRUE\" pattern= \"*/ovm_pkg.sv\" /> </path-set> <element-type-set match= \"FALSE\" > <element-type name= \"CLASS\" language= \"SV\" /> </element-type-set> </filter> <filter name= \"OVM E Language Predefined Diagram Filter\" kind= \"HIDE\" > <view-set match= \"TRUE\" > <view name= \"DIAGRAM\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"FALSE\" > <path include-children= \"TRUE\" pattern= \"*/ovm_e_top.e\" /> </path-set> <element-type-set match= \"FALSE\" > <element-type name= \"CLASS\" language= \"E\" /> </element-type-set> </filter> <filter name= \"UVM SystemVerilog Predefined Diagram Filter\" kind= \"HIDE\" > <view-set match= \"TRUE\" > <view name= \"DIAGRAM\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"TRUE\" > <path include-children= \"TRUE\" pattern= \"*/uvm.svh\" /> <path include-children= \"TRUE\" pattern= \"*/uvm_pkg.sv\" /> </path-set> <element-type-set match= \"FALSE\" > <element-type name= \"CLASS\" language= \"SV\" /> </element-type-set> </filter> <filter name= \"UVM E Language Predefined Diagram Filter\" kind= \"HIDE\" > <view-set match= \"TRUE\" > <view name= \"DIAGRAM\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"FALSE\" > <path include-children= \"TRUE\" pattern= \"*/uvm_e_top.e\" /> </path-set> <element-type-set match= \"FALSE\" > <element-type name= \"CLASS\" language= \"E\" /> </element-type-set> </filter> <filter name= \"VMM SystemVerilog Predefined Diagram Filter\" kind= \"HIDE\" > <view-set match= \"TRUE\" > <view name= \"DIAGRAM\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"TRUE\" > <path include-children= \"TRUE\" pattern= \"*/vmm.sv\" /> </path-set> <element-type-set match= \"FALSE\" > <element-type name= \"CLASS\" language= \"SV\" /> </element-type-set> </filter> <filter name= \"UVM Predefined Macros View Filter\" kind= \"HIDE\" > <view-set match= \"TRUE\" > <view name= \"MACRO\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"TRUE\" > <path include-children= \"TRUE\" pattern= \"*/uvm.svh\" /> <path include-children= \"TRUE\" pattern= \"*/uvm_pkg.sv\" /> </path-set> <element-text-set match= \"FALSE\" > <element-text pattern= \"uvm_info\" /> <element-text pattern= \"uvm_warning\" /> <element-text pattern= \"uvm_error\" /> <element-text pattern= \"uvm_fatal\" /> <element-text pattern= \"uvm_info_context\" /> <element-text pattern= \"uvm_warning_context\" /> <element-text pattern= \"uvm_error_context\" /> <element-text pattern= \"uvm_fatal_context\" /> <element-text pattern= \"uvm_field_utils_begin\" /> <element-text pattern= \"uvm_field_utils_end\" /> <element-text pattern= \"uvm_object_utils\" /> <element-text pattern= \"uvm_object_param_utils\" /> <element-text pattern= \"uvm_object_utils_begin\" /> <element-text pattern= \"uvm_object_param_utils_begin\" /> <element-text pattern= \"uvm_object_utils_end\" /> <element-text pattern= \"uvm_component_utils\" /> <element-text pattern= \"uvm_component_param_utils\" /> <element-text pattern= \"uvm_component_utils_begin\" /> <element-text pattern= \"uvm_component_param_utils_begin\" /> <element-text pattern= \"uvm_component_end\" /> <element-text pattern= \"uvm_object_registry\" /> <element-text pattern= \"uvm_component_registry\" /> <element-text pattern= \"uvm_field_int\" /> <element-text pattern= \"uvm_field_object\" /> <element-text pattern= \"uvm_field_string\" /> <element-text pattern= \"uvm_field_enum\" /> <element-text pattern= \"uvm_field_real\" /> <element-text pattern= \"uvm_field_event\" /> <element-text pattern= \"uvm_field_sarray_int\" /> <element-text pattern= \"uvm_field_sarray_object\" /> <element-text pattern= \"uvm_field_sarray_string\" /> <element-text pattern= \"uvm_field_sarray_enum\" /> <element-text pattern= \"uvm_field_array_int\" /> <element-text pattern= \"uvm_field_array_object\" /> <element-text pattern= \"uvm_field_array_string\" /> <element-text pattern= \"uvm_field_array_enum\" /> <element-text pattern= \"uvm_field_queue_int\" /> <element-text pattern= \"uvm_field_queue_object\" /> <element-text pattern= \"uvm_field_queue_string\" /> <element-text pattern= \"uvm_field_queue_enum\" /> <element-text pattern= \"uvm_field_aa_int_string\" /> <element-text pattern= \"uvm_field_aa_object_string\" /> <element-text pattern= \"uvm_field_aa_string_string\" /> <element-text pattern= \"uvm_field_aa_object_int\" /> <element-text pattern= \"uvm_field_aa_int_int\" /> <element-text pattern= \"uvm_field_aa_int_int_unsigned\" /> <element-text pattern= \"uvm_field_aa_int_integer\" /> <element-text pattern= \"uvm_field_aa_int_integer_unsigned\" /> <element-text pattern= \"uvm_field_aa_int_byte\" /> <element-text pattern= \"uvm_field_aa_int_byte_unsigned\" /> <element-text pattern= \"uvm_field_aa_int_shortint\" /> <element-text pattern= \"uvm_field_aa_int_shortint_unsigned\" /> <element-text pattern= \"uvm_field_aa_int_longint\" /> <element-text pattern= \"uvm_field_aa_int_longint_unsigned\" /> <element-text pattern= \"uvm_field_aa_int_key\" /> <element-text pattern= \"uvm_field_aa_int_enumkey\" /> <element-text pattern= \"uvm_record_attribute\" /> <element-text pattern= \"uvm_record_field\" /> <element-text pattern= \"uvm_pack_intN\" /> <element-text pattern= \"uvm_pack_enumN\" /> <element-text pattern= \"uvm_pack_sarrayN\" /> <element-text pattern= \"uvm_pack_arrayN\" /> <element-text pattern= \"uvm_pack_queueN\" /> <element-text pattern= \"uvm_pack_int\" /> <element-text pattern= \"uvm_pack_enum\" /> <element-text pattern= \"uvm_pack_string\" /> <element-text pattern= \"uvm_pack_real\" /> <element-text pattern= \"uvm_pack_sarray\" /> <element-text pattern= \"uvm_pack_array\" /> <element-text pattern= \"uvm_pack_queue\" /> <element-text pattern= \"uvm_unpack_intN\" /> <element-text pattern= \"uvm_unpack_enumN\" /> <element-text pattern= \"uvm_unpack_sarrayN\" /> <element-text pattern= \"uvm_unpack_arrayN\" /> <element-text pattern= \"uvm_unpack_queueN\" /> <element-text pattern= \"uvm_unpack_int\" /> <element-text pattern= \"uvm_unpack_enum\" /> <element-text pattern= \"uvm_unpack_string\" /> <element-text pattern= \"uvm_unpack_real\" /> <element-text pattern= \"uvm_unpack_sarray\" /> <element-text pattern= \"uvm_unpack_array\" /> <element-text pattern= \"uvm_unpack_queue\" /> <element-text pattern= \"uvm_create\" /> <element-text pattern= \"uvm_do\" /> <element-text pattern= \"uvm_do_pri\" /> <element-text pattern= \"uvm_do_with\" /> <element-text pattern= \"uvm_do_pri_with\" /> <element-text pattern= \"uvm_create_on\" /> <element-text pattern= \"uvm_do_on\" /> <element-text pattern= \"uvm_do_on_pri\" /> <element-text pattern= \"uvm_do_on_with\" /> <element-text pattern= \"uvm_do_on_pri_with\" /> <element-text pattern= \"uvm_send\" /> <element-text pattern= \"uvm_send_pri\" /> <element-text pattern= \"uvm_rand_send\" /> <element-text pattern= \"uvm_rand_send_pri\" /> <element-text pattern= \"uvm_rand_send_with\" /> <element-text pattern= \"uvm_rand_send_pri_with\" /> <element-text pattern= \"uvm_declare_p_sequencer\" /> <element-text pattern= \"uvm_register_cb\" /> <element-text pattern= \"uvm_set_super_type\" /> <element-text pattern= \"uvm_do_callbacks\" /> <element-text pattern= \"uvm_do_obj_callbacks\" /> <element-text pattern= \"uvm_do_callbacks_exit_on\" /> <element-text pattern= \"uvm_do_obj_callbacks_exit_on\" /> <element-text pattern= \"uvm_blocking_put_imp_decl\" /> <element-text pattern= \"uvm_nonblocking_put_imp_decl\" /> <element-text pattern= \"uvm_put_imp_decl\" /> <element-text pattern= \"uvm_blocking_get_imp_decl\" /> <element-text pattern= \"uvm_nonblocking_get_imp_decl\" /> <element-text pattern= \"uvm_get_imp_decl\" /> <element-text pattern= \"uvm_blocking_peek_imp_decl\" /> <element-text pattern= \"uvm_nonblocking_peek_imp_decl\" /> <element-text pattern= \"uvm_peek_imp_decl\" /> <element-text pattern= \"uvm_blocking_get_peek_imp_decl\" /> <element-text pattern= \"uvm_nonblocking_get_peek_imp_decl\" /> <element-text pattern= \"uvm_get_peek_imp_decl\" /> <element-text pattern= \"uvm_blocking_master_imp_decl\" /> <element-text pattern= \"uvm_nonblocking_master_imp_decl\" /> <element-text pattern= \"uvm_master_imp_decl\" /> <element-text pattern= \"uvm_blocking_slave_imp_decl\" /> <element-text pattern= \"uvm_nonblocking_slave_imp_decl\" /> <element-text pattern= \"uvm_slave_imp_decl\" /> <element-text pattern= \"uvm_blocking_transport_imp_decl\" /> <element-text pattern= \"uvm_nonblocking_transport_imp_decl\" /> <element-text pattern= \"uvm_transport_imp_decl\" /> <element-text pattern= \"uvm_analysis_imp_decl\" /> <element-text pattern= \"UVM_REG_ADDR_WIDTH\" /> <element-text pattern= \"UVM_REG_DATA_WIDTH\" /> <element-text pattern= \"UVM_REG_BYTENABLE_WIDTH\" /> <element-text pattern= \"UVM_REG_CVR_WIDTH\" /> <element-text pattern= \"UVM_DEFAULT_TIMEOUT\" /> <element-text pattern= \"UVM_MAX_STREAMBITS\" /> <element-text pattern= \"UVM_PACKER_MAX_BYTES\" /> <element-text pattern= \"UVM_TLM_B_MASK\" /> <element-text pattern= \"UVM_TLM_B_TRANSPORT_IMP\" /> <element-text pattern= \"UVM_TLM_FUNCTION_ERROR\" /> <element-text pattern= \"UVM_TLM_NB_BW_MASK\" /> <element-text pattern= \"UVM_TLM_NB_FW_MASK\" /> <element-text pattern= \"UVM_TLM_NB_TRANSPORT_BW_IMP\" /> <element-text pattern= \"UVM_TLM_NB_TRANSPORT_FW_IMP\" /> <element-text pattern= \"UVM_TLM_TASK_ERROR\" /> </element-text-set> </filter> <filter name= \"OVM Predefined Macros View Filter\" kind= \"HIDE\" > <view-set match= \"TRUE\" > <view name= \"MACRO\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"TRUE\" > <path include-children= \"TRUE\" pattern= \"*/ovm.svh\" /> <path include-children= \"TRUE\" pattern= \"*/ovm_pkg.sv\" /> </path-set> <element-text-set match= \"FALSE\" > <element-text pattern= \"ovm_phase_func_decl\" /> <element-text pattern= \"ovm_phase_task_decl\" /> <element-text pattern= \"ovm_phase_func_topdown_decl\" /> <element-text pattern= \"ovm_phase_func_bottomup_decl\" /> <element-text pattern= \"ovm_phase_task_topdown_decl\" /> <element-text pattern= \"ovm_phase_task_bottomup_decl\" /> <element-text pattern= \"ovm_info\" /> <element-text pattern= \"ovm_warning\" /> <element-text pattern= \"ovm_error\" /> <element-text pattern= \"ovm_fatal\" /> <element-text pattern= \"ovm_field_utils_begin\" /> <element-text pattern= \"ovm_field_utils_end\" /> <element-text pattern= \"ovm_object_utils\" /> <element-text pattern= \"ovm_object_param_utils\" /> <element-text pattern= \"ovm_object_utils_begin\" /> <element-text pattern= \"ovm_object_param_utils_begin\" /> <element-text pattern= \"ovm_object_utils_end\" /> <element-text pattern= \"ovm_component_utils\" /> <element-text pattern= \"ovm_component_param_utils\" /> <element-text pattern= \"ovm_component_utils_begin\" /> <element-text pattern= \"ovm_component_param_utils_begin\" /> <element-text pattern= \"ovm_component_end\" /> <element-text pattern= \"ovm_field_int\" /> <element-text pattern= \"ovm_field_object\" /> <element-text pattern= \"ovm_field_string\" /> <element-text pattern= \"ovm_field_enum\" /> <element-text pattern= \"ovm_field_real\" /> <element-text pattern= \"ovm_field_event\" /> <element-text pattern= \"ovm_field_sarray_int\" /> <element-text pattern= \"ovm_field_sarray_object\" /> <element-text pattern= \"ovm_field_sarray_string\" /> <element-text pattern= \"ovm_field_sarray_enum\" /> <element-text pattern= \"ovm_field_array_int\" /> <element-text pattern= \"ovm_field_array_object\" /> <element-text pattern= \"ovm_field_array_string\" /> <element-text pattern= \"ovm_field_array_enum\" /> <element-text pattern= \"ovm_field_queue_int\" /> <element-text pattern= \"ovm_field_queue_object\" /> <element-text pattern= \"ovm_field_queue_string\" /> <element-text pattern= \"ovm_field_queue_enum\" /> <element-text pattern= \"ovm_field_aa_int_string\" /> <element-text pattern= \"ovm_field_aa_object_string\" /> <element-text pattern= \"ovm_field_aa_string_string\" /> <element-text pattern= \"ovm_field_aa_object_int\" /> <element-text pattern= \"ovm_field_aa_int_int\" /> <element-text pattern= \"ovm_field_aa_int_int_unsigned\" /> <element-text pattern= \"ovm_field_aa_int_integer\" /> <element-text pattern= \"ovm_field_aa_int_integer_unsigned\" /> <element-text pattern= \"ovm_field_aa_int_byte\" /> <element-text pattern= \"ovm_field_aa_int_byte_unsigned\" /> <element-text pattern= \"ovm_field_aa_int_shortint\" /> <element-text pattern= \"ovm_field_aa_int_shortint_unsigned\" /> <element-text pattern= \"ovm_field_aa_int_longint\" /> <element-text pattern= \"ovm_field_aa_int_longint_unsigned\" /> <element-text pattern= \"ovm_field_aa_int_key\" /> <element-text pattern= \"ovm_field_aa_int_enumkey\" /> <element-text pattern= \"ovm_declare_p_sequencer\" /> <element-text pattern= \"ovm_sequence_utils_begin\" /> <element-text pattern= \"ovm_sequence_utils_end\" /> <element-text pattern= \"ovm_sequence_utils\" /> <element-text pattern= \"ovm_update_sequence_lib\" /> <element-text pattern= \"ovm_update_sequence_lib_and_item\" /> <element-text pattern= \"ovm_sequencer_utils\" /> <element-text pattern= \"ovm_sequencer_utils_begin\" /> <element-text pattern= \"ovm_sequencer_param_utils\" /> <element-text pattern= \"ovm_sequencer_param_utils_begin\" /> <element-text pattern= \"ovm_sequencer_utils_end\" /> <element-text pattern= \"ovm_create\" /> <element-text pattern= \"ovm_do\" /> <element-text pattern= \"ovm_do_pri\" /> <element-text pattern= \"ovm_do_with\" /> <element-text pattern= \"ovm_do_pri_with\" /> <element-text pattern= \"ovm_send\" /> <element-text pattern= \"ovm_send_pri\" /> <element-text pattern= \"ovm_rand_send\" /> <element-text pattern= \"ovm_rand_send_pri\" /> <element-text pattern= \"ovm_rand_send_with\" /> <element-text pattern= \"ovm_rand_send_pri_with\" /> <element-text pattern= \"ovm_create_on\" /> <element-text pattern= \"ovm_do_on\" /> <element-text pattern= \"ovm_do_on_pri\" /> <element-text pattern= \"ovm_do_on_with\" /> <element-text pattern= \"ovm_do_on_pri_with\" /> <element-text pattern= \"ovm_blocking_put_imp_decl\" /> <element-text pattern= \"ovm_nonblocking_put_imp_decl\" /> <element-text pattern= \"ovm_put_imp_decl\" /> <element-text pattern= \"ovm_blocking_get_imp_decl\" /> <element-text pattern= \"ovm_nonblocking_get_imp_decl\" /> <element-text pattern= \"ovm_get_imp_decl\" /> <element-text pattern= \"ovm_blocking_peek_imp_decl\" /> <element-text pattern= \"ovm_nonblocking_peek_imp_decl\" /> <element-text pattern= \"ovm_peek_imp_decl\" /> <element-text pattern= \"ovm_blocking_get_peek_imp_decl\" /> <element-text pattern= \"ovm_nonblocking_get_peek_imp_decl\" /> <element-text pattern= \"ovm_get_peek_imp_decl\" /> <element-text pattern= \"ovm_blocking_master_imp_decl\" /> <element-text pattern= \"ovm_nonblocking_master_imp_decl\" /> <element-text pattern= \"ovm_master_imp_decl\" /> <element-text pattern= \"ovm_blocking_slave_imp_decl\" /> <element-text pattern= \"ovm_nonblocking_slave_imp_decl\" /> <element-text pattern= \"ovm_slave_imp_decl\" /> <element-text pattern= \"ovm_blocking_transport_imp_decl\" /> <element-text pattern= \"ovm_nonblocking_transport_imp_decl\" /> <element-text pattern= \"ovm_transport_imp_decl\" /> <element-text pattern= \"ovm_analysis_imp_decl\" /> <element-text pattern= \"ovm_do_callbacks\" /> <element-text pattern= \"ovm_do_obj_callbacks\" /> <element-text pattern= \"ovm_do_callbacks_exit_on\" /> <element-text pattern= \"ovm_do_obj_callbacks_exit_on\" /> <element-text pattern= \"ovm_do_task_callbacks\" /> <element-text pattern= \"ovm_do_ext_task_callbacks\" /> </element-text-set> </filter> <filter name= \"Predefined UVM Browser Members View Filter\" kind= \"HIDE\" > <view-set match= \"TRUE\" > <view name= \"UVM_BROWSER_MEMBERS\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"TRUE\" > <path include-children= \"FALSE\" pattern= \"*/uvm_e_top.e\" /> <path include-children= \"FALSE\" pattern= \"*/vr_ad_top.e\" /> <path include-children= \"FALSE\" pattern= \"*/uvm_scbd_top.e\" /> </path-set> </filter> <filter name= \"Xilinx Predefined Filter\" kind= \"HIDE\" > <view-set match= \"TRUE\" > <view name= \"CALL_HIERARCHY\" /> <view name= \"DIAGRAM\" /> <view name= \"FIELD_EDITOR\" /> <view name= \"MACRO\" /> <view name= \"OUTLINE\" /> <view name= \"PROBLEMS\" /> <view name= \"SEARCH\" /> <view name= \"TASKS\" /> <view name= \"TYPE_HIERARCHY_MEMBERS\" /> <view name= \"TYPES\" /> <view name= \"TYPES_MEMBERS\" /> <view name= \"UVM_BROWSER_CLASSES\" /> <view name= \"UVM_BROWSER_MEMBERS\" /> <view name= \"UVM_SEQUENCE_TREE\" /> </view-set> <path-set match= \"TRUE\" apply-to-macro-call-stack= \"TRUE\" > <path include-children= \"FALSE\" pattern= \"$DVT_XILINX_HOME*\" /> </path-set> </filter> <filter name= \"Xilinx Library Name Filter\" kind= \"HIDE\" > <view-set match= \"TRUE\" > <view name= \"CALL_HIERARCHY\" /> <view name= \"DIAGRAM\" /> <view name= \"FIELD_EDITOR\" /> <view name= \"MACRO\" /> <view name= \"OUTLINE\" /> <view name= \"PROBLEMS\" /> <view name= \"SEARCH\" /> <view name= \"TASKS\" /> <view name= \"TYPE_HIERARCHY_MEMBERS\" /> <view name= \"TYPES\" /> <view name= \"TYPES_MEMBERS\" /> <view name= \"UVM_BROWSER_CLASSES\" /> <view name= \"UVM_BROWSER_MEMBERS\" /> <view name= \"UVM_SEQUENCE_TREE\" /> </view-set> <element-type-set match= \"TRUE\" > <element-type name= \"LIBRARY\" language= \"SV\" /> <element-type name= \"LIBRARY\" language= \"VHDL\" /> </element-type-set> <element-text-set match= \"TRUE\" > <element-text pattern= \"unisim\" /> <element-text pattern= \"unimacro\" /> <element-text pattern= \"unifast\" /> <element-text pattern= \"xilinxcorelib\" /> <element-text pattern= \"cpld\" /> <element-text pattern= \"simprim\" /> <element-text pattern= \"secureip_ver\" /> <element-text pattern= \"unisims_ver\" /> <element-text pattern= \"unifast_ver\" /> <element-text pattern= \"unimacro_ver\" /> <element-text pattern= \"simprims_ver\" /> <element-text pattern= \"xilinxcorelib_ver\" /> <element-text pattern= \"uni9000_ver\" /> <element-text pattern= \"cpld_ver\" /> <element-text pattern= \"retarget\" /> </element-text-set> </filter> <filter name= \"C/C++ System Headers Predefined Filter\" kind= \"HIDE\" > <view-set match= \"TRUE\" > <view name= \"TYPES\" /> <view name= \"MACRO\" /> <view name= \"PROBLEMS\" /> </view-set> <path-set match= \"TRUE\" > <path include-children= \"TRUE\" pattern= \"<gcc system header incdirs>\" /> </path-set> </filter> <filter name= \"PSS C/C++ Headers Predefined Filter\" kind= \"HIDE\" > <view-set match= \"TRUE\" > <view name= \"TYPES\" /> <view name= \"MACRO\" /> <view name= \"PROBLEMS\" /> </view-set> <path-set match= \"TRUE\" > <path include-children= \"TRUE\" pattern= \"*/include/pss/*\" /> </path-set> </filter> <filter name= \"SystemC Headers Predefined Filter\" > <view-set match= \"TRUE\" > <view name= \"TYPES\" /> <view name= \"MACRO\" /> <view name= \"PROBLEMS\" /> </view-set> <path-set match= \"TRUE\" > <path include-children= \"TRUE\" pattern= \"*/src/sysc/*\" /> <path include-children= \"TRUE\" pattern= \"*/libs/systemc*\" /> </path-set> </filter> Content Filters Examples Code Templates Back to top",
    "section_path": [],
    "tokens": 2297,
    "source": "scraped"
  },
  {
    "id": "3f585546-9a8f-46a3-b5df-1a749f6525c7",
    "title": "Advanced LLM Configuration | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/advanced-llm-configuration.html",
    "content": "Advanced LLM Configuration | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Advanced LLM Configuration To set up the models used by AI Assistant you can use the environment variables or a configuration file / VS Code setting . Environment variables-based configuration The fastest way to set-up the models is through specific environment variables. Note When the models configuration file exists, the environment variables-based model configuration is skipped. Predefined connectors AI Assistant offers built-in support for popular LLM models via predefined connectors. Some of these connectors can also be adapted to work with other LLM providers that utilize the same API scheme or protocol by modifying the base URL or endpoint. OpenAI OPENAI_API_KEY - required OPENAI_BASE_URL - optional OPENAI_MODELS - optional, comma-separated values AzureOpenAI OPENAI_API_VERSION - required AZURE_OPENAI_API_KEY - required AZURE_OPENAI_ENDPOINT or OPENAI_BASE_URL - required AZURE_OPENAI_MODELS - optional, comma-separated values Anthropic ANTHROPIC_API_KEY - required ANTHROPIC_BASE_URL - optional ANTHROPIC_MODELS - optional, comma-separated values Google AI GOOGLE_AI_API_KEY - required GOOGLE_AI_MODELS - optional, comma-separated values GitHub Copilot The process of setting up GitHub Copilot in VS Code involves the following steps: Install the GitHub Copilot Chat extension. Sign-in with your GitHub account. When asked, allow DVT to use the Copilot features. COPILOT_MODELS - optional, comma-separated values GitHub Copilot are not available in Eclipse Ollama OLLAMA_HOST - required OLLAMA_MODELS - optional, comma-separated values Models selection To adjust the selection of models, utilize the <...>_MODELS environment variable. This variable should contain a comma-separated list of model names. If you specify exact model names, their availability won\u00e2\u0080\u0099t be verified. Although non-existent models will appear in the list, attempting to use them will result in an error. You can also use wildcard-based patterns  ( * and ? ) rather than specifying exact model names. Only models that match these patterns will be included in the list. Note Patterns work only with model factories / providers / connectors capable of listing the available models. When using the OpenAI connector with non-OpenAI compatible servers by setting OPENAI_BASE_URL , listing the available models might not be available. In this case avoid using wildcards and specify the exact model names. File-based configuration AI Assistant offers the flexibility to fine-tune its configuration for more advanced use cases. For instance: Setting additional options for the model factory / provider / connector (timeout, max_retries, \u00e2\u0080\u00a6). Changing the LLM parameters (temperature, top_p, \u00e2\u0080\u00a6). Using short lived api keys / tokens. Pre-configuring an immutable set of available models for all users. Several formats are supported for file-based configuration: JSON with Comments models.jsonc or VS Code settings.json -> DVT.languageModels JSON models.json JavaScript models.js TypeScript models.ts When you need a dynamic configuration (ex. for short-lived API keys or tokens), it\u00e2\u0080\u0099s best to use the JavaScript or TypeScript format. Otherwise, the JSON-based formats are generally preferred. Regardless of the format you choose, the configuration has the following properties: version - required , number (latest version is 2 ) configs - required , array of dynamic configurations Each dynamic configuration has the following properties: provider - required , string models - required , comma-separated values string, array of strings, or async function returning an array of strings (JavaScript / TypeScript) providerOptions - optional , object or async function returning an object (JavaScript / TypeScript) modelOptions - optional , object or async function returning an object (JavaScript / TypeScript) Note modelOptions and providerOptions are specific to each model factory / provider / connector, see supported options . AI Assistant looks for the model configs in these locations: $DVT_HOME/config/ai/models.{json,jsonc,js,ts} $DVT_AI_DIR/models.{json,jsonc,js,ts} $HOME/.dvt/ai/models.{json,jsonc,js,ts} <project>/.dvt/ai/models.{json,jsonc,js,ts} VS Code Settings -> DVT.AI.languageModels (JSON) Note While the models configuration files are loaded and executed only once unless modified, dynamic configurations are cached for only a brief period (10-60 seconds). Ensure that functions used by dynamic configurations do not have lengthy execution times. It\u00e2\u0080\u0099s a good practice to cache their values and compute them only when necessary, such as when short-lived tokens have expired. In certain setups, it is preferred to have an officially approved configuration for all users, preventing any changes by them. This can be accomplished by adding a file named final within the $DVT_HOME/config/ai/ directory. This approach is effective only in read-only shared installations, typically those based on DVT distros, as users should not be able to modify the installation files. Warning This is not considered a security feature because users with adequate permissions can install DVT locally and apply their own configurations. Predefined connectors AI Assistant offers built-in support for popular LLM models via predefined connectors. Some of these connectors can also be adapted to work with other LLM providers that utilize the same API scheme or protocol by modifying the base URL or endpoint. Use the following values to set the models through file-base dynamic configurations . To find more information about the supported options, their meaning and default values, please refer to the official documentation of each API provider. OpenAI provider: openai providerOptions: apiKey baseURL - https://api.openai.com/v1 organization project timeout - 60000 ms maxRetries - 2 defaultHeaders modelOptions: max_completion_tokens temperature top_p frequency_penalty presence_penalty reasoning_effort AzureOpenAI provider: azure-openai providerOptions: apiKey apiVersion endpoint baseURL deployment organization project timeout - 60000 ms maxRetries - 2 defaultHeaders modelOptions: max_completion_tokens temperature top_p frequency_penalty presence_penalty reasoning_effort Anthropic provider: anthropic providerOptions: apiKey authToken baseURL - https://api.anthropic.com timeout - 60000 ms maxRetries - 2 defaultHeaders modelOptions: max_tokens - 4096 temperature top_k top_p Google AI provider: google providerOptions: apiKey GitHub Copilot provider: copilot Ollama provider: ollama providerOptions: host headers modelOptions: temperature top_k top_p repeat_penalty presence_penalty frequency_penalty Formats JSON / JSON with Comments { \"version\" : 3 , \"configs\" : [ { \"provider\" : \"openai\" , \"models\" : \"gpt-4*\" , \"modelOptions\" : { \"temperature\" : 0.3 }, \"providerOptions\" : { \"apiKey\" : \"...\" } } ] } JavaScript export default { version : 3 , configs : [ { provider : \"openai\" , models : \"gpt-4*\" , modelOptions : { temperature : 0.3 }, providerOptions : { apiKey : \"...\" } } ] } TypeScript import { ModelsConfig } from \"./@api/v3\" export default { version : 3 , configs : [ { provider : \"openai\" , models : \"gpt-4*\" , modelOptions : { temperature : 0.3 }, providerOptions : { apiKey : \"...\" } } ] } satisfies ModelsConfig Examples Using an OpenAI compatible server with short term token /* Example of model config for an OpenAI compatible server with short term token LLM access token / api key is obtained from an authentication server and it is refreshed after 60 minutes */ /* LLM inference server base URL */ const SERVER_BASE_URL = '...' /* Comma separated list of models available on the server. Wildcard-based patterns can be used as long as the server supports listing models (/models endpoint) */ const SERVER_MODELS = '...' /* Authentication server URL */ const AUTH_URL = '...' /* Authentication user */ const AUTH_USER = '...' /* Authentication password / secret */ const AUTH_PASS = '...' /* JSON property from authentication server's response that holds the token / api key */ const AUTH_RESPONSE_TOKEN_PROPERTY = 'access_token' /* Refresh the token / api key after it expires */ const TOKEN_EXPIRATION_PERIOD = /* min */ 60 * /* sec */ 60 * /*  ms */ 1000 ; /* ------------------------------------------------------------------------ */ const api = acquireDvtAiApi (); let cachedToken ; let tokenExpirationTimestamp = 0 ; async function getToken () { const now = Date . now (); if ( tokenExpirationTimestamp <= now ) { if ( cachedToken ) api . log . info ( `Cached token expired @ ${ new Date ( tokenExpirationTimestamp ). toLocaleString () } ` ) tokenExpirationTimestamp = now + TOKEN_EXPIRATION_PERIOD ; cachedToken = await requestToken (); } else { api . log . info ( \"Reusing cached token\" ); } return cachedToken ; } async function requestToken () { api . log . info ( `Requesting new token...` ); try { const response = await fetch ( AUTH_URL , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , }, body : JSON . stringify ({ username : AUTH_USER , password : AUTH_PASS }), }); if ( ! response . ok ) throw new Error ( `Error fetching token. HTTP response code ${ response . status } : ${ response . statusText } ` ); const data = ( await response . json ()); return data [ AUTH_RESPONSE_TOKEN_PROPERTY ]; } catch ( e ) { api . log . error ( `Error fetching token. ${ e . name } : ${ e . message } ` ); throw new Error ( \"Error fetching token.\" , { cause : e }); } finally { api . log . info ( `Requesting new token... DONE` ); } } export default { version : 3 , configs : [{ provider : \"openai\" , models : SERVER_MODELS , providerOptions : async () => { return { apiKey : await getToken (), baseURL : SERVER_BASE_URL } } }] } Reference How to On this page Environment variables-based configuration Predefined connectors OpenAI AzureOpenAI Anthropic Google AI GitHub Copilot Ollama Models selection File-based configuration Predefined connectors OpenAI AzureOpenAI Anthropic Google AI GitHub Copilot Ollama Formats JSON / JSON with Comments JavaScript TypeScript Examples Using an OpenAI compatible server with short term token Back to top",
    "section_path": [],
    "tokens": 1542,
    "source": "scraped"
  },
  {
    "id": "78023c68-c44f-40fe-92be-ac6ed51f5f98",
    "title": "Runtime UVM Configuration Queries | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/runtime-uvm-configuration-queries.html",
    "content": "Runtime UVM Configuration Queries | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Runtime UVM Configuration Queries After setting a runtime elaborated Verification top, the following views are automatically populated to help you browse and debug the testbench structure and configuration: Verification Hierarchy View Registers View Factory Overrides View Config DB View UVM Support Static UVM Configuration Queries Back to top",
    "section_path": [],
    "tokens": 82,
    "source": "scraped"
  },
  {
    "id": "57cfb2d2-805a-407c-935a-e25ac0779863",
    "title": "Semantic Checks | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/compile-checks/semantic-checks.html",
    "content": "Semantic Checks | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Semantic Checks ID Message Assignment patterns ASSIGNMENT_PATTERN_VALUES Expecting # value(s), found # INCOMPLETE_ASSIGNMENT_PATTERN Assignment pattern for struct # is missing association(s) to member(s) # ASSIGNMENT_PATTERN_MULTIPLE_ASSOCIATIONS Assignment pattern for struct # has multiple associations for member(s) # Associated types (fields, variables, functions, etc.) ILLEGAL_TYPE_REFERENCE Unexpected type # of # (type is #) ILLEGAL_TYPE_REFERENCE Unexpected type # of # (use virtual [interface] in front of #) ILLEGAL_NET_DATATYPE Illegal net data type # ILLEGAL_NET_DATATYPE Illegal net 2-state data type # ILLEGAL_BIT_VECTOR User-defined nettype # has unpacked data type # ILLEGAL_CUNIT_REFERENCE Reference to compilation unit identifier # not allowed in package NON_EXISTING_TYPE Non existing type # USAGE_BEFORE_DECLARATION Element # is used before being declared at line # in # Blocks DUPLICATE_CLOCKING Duplicate clocking block #, already declared at line # file # DUPLICATE_NAMED_BLOCK Duplicate named block #, already declared at line # file # UNRESTRICTED_LOOP_GENERATE_BLOCK Loop block # does not end UNINITIALIZED_LOOP_BLOCK Cannot initialize loop block # UNRESOLVED_LOOP_BLOCK_CONDITION Cannot resolve loop block # condition UNRESOLVED_LOOP_BLOCK_STEP Cannot resolve loop block # step assignment UNRESOLVED_BLOCK_CONDITION Cannot resolve block # condition: # MISSING_BLOCK_CONDITION No condition found for block # Checkers DUPLICATE_CHECKER Duplicate checker #, already declared at line # file # UNDECLARED_CHECKER Checker # is not declared ILLEGAL_CHECKER_INSTANCE Instance # of checker # not allowed in procedural code of a checker ILLEGAL_CHECKER_INSTANCE Instance # of checker # not allowed in fork-join, fork-join_any or fork-join_none Classes CIRCULAR_INHERITANCE Class # extends itself DUPLICATE_CLASS Duplicate class #, already declared at line # file # DUPLICATE_CONSTRUCTOR Duplicate constructor # already declared at line # file # EXTEND_CLASS Extending non existing class # EXTERN_CONSTRAINT_UNDECLARED Outer class constraint # was not declared extern inside class # EXTERN_FUNCTION_UNDECLARED Outer class function # was not declared extern inside class # EXTERN_TASK_UNDECLARED Outer class task # was not declared extern inside class # EXTEND_INTERFACE_CLASS Extending interface class # by non-interface class not allowed IMPLEMENT_CLASS Implementing non-interface class # by class not allowed IMPLEMENT_INTERFACE_CLASS Implementing non existing interface class # ILLEGAL_SUPER_USE Class # does not have a super class Configurations INVALID_LIBLIST Liblist is empty for # UNDECLARED_CELL Cell # is not declared UNDECLARED_CONFIGURATION Configuration # is not declared UNDECLARED_DESIGN Top design # is not declared UNDECLARED_LIBRARY Library # is not declared Constraints DUPLICATE_CONSTRAINT Duplicate constraint #, already declared at line # file # DUPLICATE_CONSTRAINT_IMPL Duplicate constraint implementation for #, already declared at line # file # EMPTY_IMPLICIT_CONSTRAINT_IMPLEMENTATION Implicit external constraint # is not implemented INVALID_DISABLE_SOFT_CONSTRAINT_PARAMETER The disable soft parameter # should be a variable UNIMPLEMENTED_EXPLICIT_EXTERNAL_CONSTRAINT Explicit external constraint # is not implemented Covergroups DUPLICATE_COVER_CROSS Duplicate cover cross #, already declared at line # file # DUPLICATE_COVERGROUP Duplicate covergroup #, already declared at line # file # DUPLICATE_COVERPOINT Duplicate coverpoint #, already declared at line # file # ILLEGAL_COVERPOINT_EXPRESSION Coverpoint expression must be of an integral data type WITH_COVERPOINT_BINS_EXPRESSION Coverpoint bins with expression should explicitly contain item Design Elaboration UNELABORATED_PACKAGE Package #.# is not elaborated UNELABORATED_MODULE/INTERFACE/PROGRAM/CHECKER Module/Interface/Program/Checker #.# is not elaborated UNSPECIFIED_TOP Please specify a -top module/entity/configuration in the project build file INVALID_TOP_CONFIGURATION Configuration # has no valid tops INVALID_TOP Top # cannot be instantiated CYCLICAL_ORDER Cycle discovered when elaborating parameters DUPLICATE_TOP_NAME Another top with the same name # has been elaborated RECURRENCE_DETECTED Recurrence detected for instance type # NON_CHECKER_INSTANCE_INSIDE_PROGRAM Module/Interface/Program/UDP instance # not allowed inside program BLACK_BOXED_INSTANCE Instance # is black boxed BLACK_BOXED_GENERATE_BLOCK Generate block # is black boxed SKIPPED_INSTANCE Instance # is skipped SKIPPED_GENERATE_BLOCK Generate block # is skipped Events DUPLICATE_EVENT Duplicate event #, already declared at line # file # ILLEGAL_EVENT The following events must be of a singular data type:# Enumerations DUPLICATE_ENUM_LITERAL Duplicate enumeration literal #, already declared at line # file # IMPLICIT_ENUM_CAST Auto-cast from enum type # to enum type # Extern methods EXTERN_METHOD_SIGNATURE Return data type # for extern method # does not match prototype EXTERN_METHOD_SIGNATURE Scope resolution operator shall be used to indicate the internal return type # for extern method # EXTERN_METHOD_SIGNATURE Number of arguments # for extern method # does not match prototype EXTERN_METHOD_SIGNATURE Name of argument # for extern method # does not match prototype EXTERN_METHOD_SIGNATURE Type of argument # for extern method # does not match prototype EXTERN_METHOD_SIGNATURE Direction of argument # for extern method # does not match prototype EXTERN_METHOD_SIGNATURE Default value of argument # for extern method # does not match prototype; the prototype declaration is used Instances DUPLICATE_INSTANCE Duplicate instance #, already declared at line # file # DUPLICATE_BOUND_INSTANCE Duplicate bound instance # added from both instance # and instance # DUPLICATE_BOUND_INSTANCE Duplicate bound instance # added from instance # DUPLICATE_BOUND_INSTANCE Name collision in target scope of bound instance # with element declared at line # file # IMPLICIT_PORT_CONNECTION Cannot infer implicit connection for port(s) # INVALID_BINDS Failed to resolve all the bind directives in # tries INVALID_BIND_TARGET_SCOPE Bind target scope # and module # of bind target instance # must match INVALID_BIND_UNDERNEATH_BIND_INSTANCE Cannot bind instance # underneath bind instance # MISSING_PORT_CONNECTION Missing port connection to # port(s) # MULTIPLE_PORT_CONNECTIONS Multiple connections to port # NOT_IN_LIST_OF_PORTS # not in the list of # ports\u00e2\u0080\u009d NOF_PORT_CONNECTIONS Expected # port connections, found # NON_EXISTING_PORT Non existing port # of module # NOT_A_CHECKER_INSTANCE Instance # is not a checker instance UNDECLARED_MODULE Module # is not declared UNDECLARED_MODULE Module # is not declared for instance # UNDECLARED_BIND_TARGET Bind target # is not declared UNKNOWN_ARRAY_OF_INSTANCES_RANGE Could not determine range of array of instances # UNELABORATED_BIND_TARGET Hierarchical name # is not elaborated UNRESOLVED_BIND_TARGET_INSTANCE Module # of bind target instance # is not declared UDP_PORT_CONNECTION Named port connection to # not allowed for UDP instance # UDP_PORT_CONNECTION Dot star connection not allowed for UDP instance # Illegal class members access (local, protected, static) ILLEGAL_HIERARCHICAL_ACCESS Illegal hierarchical reference detected on #.# (illegal hierarchical name containing type name #) ILLEGAL_NON_STATIC_ACCESS Non-static member # of class # cannot be accessed from static function/task ILLEGAL_NON_STATIC_ACCESS Non-static member # of class # cannot be accessed outside its class scope. ILLEGAL_NON_STATIC_ACCESS Non-static member # of class # cannot be accessed via class scope resolution operator :: ILLEGAL_STATIC_ACCESS Element # cannot be accessed statically from design # ILLEGAL_STATIC_ACCESS Enum name # cannot be accessed statically from enum type # ILLEGAL_STATIC_ACCESS Element # cannot be accessed statically from struct type # ILLEGAL_STATIC_ACCESS Element # cannot be accessed statically from union type # ILLEGAL_PRIVATE_ACCESS Private member # of class # is not visible in this scope ILLEGAL_PROTECTED_ACCESS Protected member # of class # is not visible in this scope Implicit declarations (port mapping, assigns) ILLEGAL_IMPLICIT Illegal implicit declaration of # when `default_nettype set to none Interfaces DUPLICATE_INTERFACE Duplicate interface #, already declared at line # file # Hierarchical identifiers UNDECLARED_IDENTIFIER Identifier # is not declared UNDECLARED_IDENTIFIER Identifier # is not a member of # (type # is undeclared) UNDECLARED_IDENTIFIER Identifier # is not a member of # UNEXPECTED_IDENTIFIER Expecting function # but actual target is not a function Method calls NON_EXISTING_METHOD_ARGUMENT Non existing argument # of function/task # METHOD_CALL_ARGUMENTS Expecting maximum # argument(s) when calling #, found # METHOD_CALL_ARGUMENTS Method call # is missing argument value to # # MULTIPLE_ARGUMENT_VALUES Multiple values for argument # MISSING_ARG_FORMAT_SPEC Missing argument for # when calling # INVALID_FORMAT_SPEC Invalid %# when calling # EXTRA_ARG_FORMAT_SPEC Extra argument # when calling # ILLEGAL_FORMAT_SPEC Illegal format specifier %# for argument # when calling ILLEGAL_WITH_CLAUSE # does not support a with clause ILLEGAL_WITH_CLAUSE Array method # does not support a with clause ILLEGAL_WITH_CLAUSE_EXPRESSION Illegal type # of with clause expression for method # MISSING_WITH_CLAUSE Method # requires a with clause UNSUPPORTED_METHOD Method # is undefined for associative arrays UNSUPPORTED_METHOD Method # is undefined for associative arrays with wildcard index type UNSUPPORTED_METHOD Method # is undefined for arrays of non-numeric type (use # clause) UNDECLARED_SYSTEM_METHOD System task or function # is not declared Methods, DPI DUPLICATE_ARGUMENT Duplicate argument #, already declared at line # file # DUPLICATE_FUNCTION Duplicate function #, already declared at line # file # DUPLICATE_FUNCTION_IMPL Duplicate function implementation for #, already implemented at line # file # DUPLICATE_NAME Duplicate name #, already built-in method DUPLICATE_METHOD_IMPLEMENTATION Duplicate method implementation for #, already defined at line # file # DUPLICATE_PRODUCTION Duplicate production #, already declared at line # in # DUPLICATE_TASK Duplicate task # already declared at line # file # DUPLICATE_TASK_IMPL Duplicate task implementation for #, already implemented at line # file # DUPLICATE_VARIABLE Duplicate variable # already declared at line # file # EXPORT_DPI_FUNCTION_IMPL Export DPI function # was not implemented EXPORT_DPI_TASK_IMPL Export DPI task # was not implemented DPI_FUNCTION_RETURN_TYPE Return type # of DPI function # not allowed ILLEGAL_OVERRIDE Illegal override of built-in method # ILLEGAL_PURE_VIRTUAL Pure virtual method prototype # cannot be declared in non-virtual class INVALID_STATIC_OVERRIDE Virtual method # cannot be overridden by static method NOT_IMPLEMENTED_PURE_VIRTUAL Sub-class # does not implement pure virtual method(s) from super-classes: # OVERRIDE_VIRTUAL_METHOD Function # overrides task # OVERRIDE_VIRTUAL_METHOD Task # overrides # OVERRIDE_VIRTUAL_METHOD Return data type # for method # does not match # of overridden # OVERRIDE_VIRTUAL_METHOD Number of arguments # for method # does not match # of overridden # OVERRIDE_VIRTUAL_METHOD Type # of argument # for method # does not match # of overridden # OVERRIDE_VIRTUAL_METHOD Direction # of argument # for method # does not match # of overridden # OVERRIDE_VIRTUAL_METHOD Missing default value of argument # for method # (overridden # provides a default value) OVERRIDE_VIRTUAL_METHOD Unexpected default value of argument # for method # (overridden # does not provide a default value) OVERRIDE_VIRTUAL_METHOD Implementation of interface class method # must have virtual qualifier VIRTUAL_CLASS_INSTANTIATION Object # cannot be instantiated because # is a virtual class VIRTUAL_CLASS_INSTANTIATION Illegal call of virtual class typed constructor #::new UNDECLARED_ARGUMENT Expected argument, found local variable # ILLEGAL_DEFAULT_VALUE Illegal default value # for # formal port # UNUSED_RETURN_VALUE The return value of function # is not used ILLEGAL_EXPRESSION Void function/Task # cannot be used as an expression Modports and Clocking Blocks DIRECTION_MISMATCH Port # was specified as # in # Modules DUPLICATE_MODULE Duplicate module #, already declared at line # file # Nets, Variables, Fields, Properties DUPLICATE_FIELD Duplicate field #, already declared at line # file # DUPLICATE_PORT Duplicate port #, already declared at line # in # STATIC_INITIALIZATION Explicit static or automatic is required when implicit static variable is initialized UNDECLARED_PORT Port # direction declaration is missing Packages DUPLICATE_PACKAGE Duplicate package #, already declared at line # file # IMPORT_IN_CLASS Import statement not allowed within class scope IMPORT_PACKAGE Package # importing itself not allowed NON_EXISTING_PACKAGE Non existing package # MISSING_IMPORT_ELEMENT Explicit export element ignored (element not imported) MISSING_IMPORT_PACKAGE Wild-card export package ignored (package not imported) MULTIPLE_PACKAGES Name # exists in multiple imported packages (#, #, and possibly others) Parameters DUPLICATE_PARAMETER Duplicate parameter #, already declared at line # file # ILLEGAL_PARAMETER_OVERRIDE Expecting a type when overriding parameter #, found value # MISSING_DEFAULT_VALUE Parameter # must have a default value NOF_PARAM_OVERRIDES Expected # parameter overrides, found # MISSING_PARAMETER_OVERRIDE Expected override or default value for parameter # NON_EXISTING_PARAMETER Non existing parameter # of type # UNRESOLVED_FORMAL_PARAMETER Cannot determine formal parameter # of # NON_EXISTING_PARAMETER Non existing parameter # of type # UNRESOLVED_PARAMETER_VALUE Cannot determine # value of parameter # from expression: # UNRESOLVED_ENUM_NAME_VALUE Cannot determine value of enum name # from expression: # UNCONNECTED_PARAMETER Parameter # of module/interface # is not connected NON_OVERRIDABLE_PARAMETER Localparam # cannot be overridden NON_OVERRIDABLE_PARAMETER Parameter # cannot be overridden (is outside design parameter port list) Preprocessing CYCLIC_INCLUDE Cyclic include detected CYCLIC_MACRO Cyclic define detected FAILED_TO_OPEN_INCLUDE_FILE Cannot open `include file # NON_EXISTING_INCLUDE_FILE No such file # MISMATCHED_ENDIF Expecting `endif label # found # REDEFINED_MACRO Redefinition of macro name # UNDEFINED_MACRO Undefined macro name: # WRONG_NUMBER_OF_MACRO_ARGUMENTS Number of macro instance parameters # not equal to macro define parameters # Primitives DUPLICATE_PRIMITIVE Duplicate primitive #, already declared at line # file # Programs DUPLICATE_PROGRAM Duplicate program #, already declared at line # file # Type Checking ILLEGAL_ASSIGNMENT Illegal assignment to type # from type # (cannot assign a(n) packed / unpacked type to a(n) unpacked / packed type) ILLEGAL_ASSIGNMENT Illegal assignment to type # from type # (arrays have incompatible dimensions / packed dimensions / unpacked dimensions / element types / element type signing / 2-state/4-state element types) ILLEGAL_ASSIGNMENT Illegal assignment to type # from type # (class types are not assignment compatible) ILLEGAL_ASSIGNMENT Illegal assignment of # to parameter / argument / port # of type # ILLEGAL_ASSIGNMENT Illegal assignment of # to parameter / [ref] port / [ref] argument # of type # (cannot assign a(n) packed / unpacked type to a(n) unpacked / packed type) ILLEGAL_ASSIGNMENT Illegal assignment of # \u00e2\u0080\u0098parameter / [ref] port / [ref] argument # of type # (arrays have incompatible dimensions / packed dimensions / unpacked dimensions / element types / element type signing / 2-state/4-state element types) ILLEGAL_ASSIGNMENT Illegal assignment of # [ref] port / argument # of type # (class types are not assignment compatible) ILLEGAL_ASSIGNMENT Illegal assignment of expression # to ref port / argument # ILLEGAL_ASSIGNMENT Illegal assignment of constant # to ref port / argument # ILLEGAL_ASSIGNMENT Illegal assignment of constant # to non-constant ref argument # ILLEGAL_ASSIGNMENT Illegal assignment of #-bit type to ref port / argument # of #-bit type ILLEGAL_ASSIGNMENT Illegal assignment of dynamic array # to object # ILLEGAL_ASSIGNMENT Illegal use of assignment pattern to type # ILLEGAL_ASSIGNMENT Illegal use of ordered assignment pattern to associative array ILLEGAL_ASSIGNMENT Illegal use of concatenation to associative array ILLEGAL_ASSIGNMENT Illegal assignment of concatenation member # of type # to array element of type # ILLEGAL_NET_ASSIGNMENT Cannot use net # as left hand side in procedural assignment ILLEGAL_NON_BLOCKING_ASSIGNMENT Cannot use automatic variable # as left hand side in non-blocking assignment ILLEGAL_CAST_OPERATION Cannot cast # of type # to # ILLEGAL_VOID_CAST Void cast of task # not allowed ILLEGAL_CONSTANT_ASSIGN Constant # cannot be assigned ILLEGAL_CONSTANT_ASSIGN Constant ref # cannot be assigned ILLEGAL_FOREACH_LOOP Number of dimensions specified in FOREACH_LOOP is bigger than # dimensions ILLEGAL_OPERAND Unexpected # as first operand ILLEGAL_PARAMETER_OVERRIDE Expecting type name for parameter #.# but found variable name # ILLEGAL_REPEAT_LOOP Reference to the entire array # is not permitted in this context ILLEGAL_REPEAT_LOOP Using string # without index is not supported in the given context ILLEGAL_REPEAT_LOOP Reference to the entire unpacked struct / union # is not permitted in this context ILLEGAL_TYPE_REFERENCE # cannot be resolved to a variable ILLEGAL_VARIABLE_REFERENCE # cannot be resolved to a type ILLEGAL_NON_INTERFACE_VIRTUAL_FIELD \u00e2\u0080\u0098virtual\u00e2\u0080\u0099 keyword not allowed with non-interface type # UNDEFINED_OPERATOR Operator # is undefined for argument type # UNDEFINED_OPERATOR Operator # is undefined for argument types #, # UNDEFINED_OPERATOR Operator # is undefined for argument types #, # (arrays have incompatible dimensions / packed dimensions / unpacked dimensions / element types / element type signing / 2-state/4-state element types) UNDEFINED_OPERATOR Concatenation operator is undefined for argument # of type # UNDEFINED_OPERATOR The type of target # is # while the type of the source is # UNDEFINED_OPERATOR Set member # of type # is incompatible with left-hand side expression type # UNDEFINED_OPERATOR Set member of type # is incompatible with left-hand side expression type # ILLEGAL_CONSTANT_PRIMARY Expecting a constant primary, but found # Typedefs DUPLICATE_TYPEDEF Duplicate typedef #, already declared at line # file # MISSING_TYPE_IMPLEMENTATION # type is not implemented Jump statements ILLEGAL_CONTINUE_OUTSIDE_LOOP Continue statement not allowed outside loop ILLEGAL_BREAK_OUTSIDE_LOOP Break statement not allowed outside loop ILLEGAL_EMPTY_RETURN Empty return not allowed in non-void function, expecting # ILLEGAL_RETURN_VALUE_TYPE Illegal return value of type # for function of type # ILLEGAL_RETURN_VALUE_TYPE Illegal return value of type # for function of type # (cannot assign a(n) packed / unpacked type to a(n) unpacked / packed type) ILLEGAL_RETURN_VALUE_TYPE Illegal return value of type # for function of type # (arrays have incompatible dimensions / packed dimensions / unpacked dimensions / element types / element type signing / 2-state/4-state element types) ILLEGAL_RETURN_VALUE_TYPE Illegal return value of type # for function of type # (class types are not assignment compatible) ILLEGAL_VALUE_RETURN Value return not allowed in task ILLEGAL_VALUE_RETURN Value return not allowed in void function ILLEGAL_VALUE_RETURN Value return not allowed in constructor Miscellaneous SELECT_NOT_ALLOWED Select expression for variable # not allowed Compile Waivers Synthesis Checks Back to top",
    "section_path": [],
    "tokens": 2690,
    "source": "scraped"
  },
  {
    "id": "fc95e399-75de-434a-88c8-5f24b643e2de",
    "title": "UVM Field Editor | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/uvm-support/uvm-field-editor.html",
    "content": "UVM Field Editor | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Field Editor The UVM Field Editor enables you to inspect and edit UVM field registrations. It allows you to quickly add, remove and edit the registration macros and presents field statistics (total no. of fields, no. of registered fields, no. of warnings/errors). Triggering Triggering the UVM Field Editor for a certain class: place the cursor anywhere inside the class definition, right click and select Source \u00e2\u0080\u00a3 UVM Field Editor from the pop-up menu. If you place the cursor on a field, the UVM Field Editor will show up with the respective field selected. If there are no previously registered macros, the uvm_*_utils_begin and uvm_*_utils_end macros shall be determined based on the class found at the cursor position. For a class that inherits from uvm_sequence , a pop-up dialog will ask you to select the desired sequencer from the available ones. Interface On the left side of the Field Editor Dialog there is a list containing all the fields in the class. You can register/unregister the class by clicking on the checkbox in the Class group. When the class is registered you can register or unregister fields by checking the corresponding checkboxes. When selecting a field you can also find information about the macro used for registration in the UVM Registration Macro group. If it\u00e2\u0080\u0099s not the desired macro you can fix it using the Fix button. On the right side you can see the flag status of the registered fields. Its main features are highlighted and explained below: Summary information regarding registrations: no. of registered fields, total no. of fields in class, no. of errors, no. of warnings. Content Filters matched indication Class checkbox that allows you to toggle the registration state. Field type Field name Field icon. The field icons have the following meanings: Icon Meaning The class is not registered The class is registered The field is a virtual interface The field is instantiated and is a UVM Component The field is instantiated and is a UVM Object The field is a port The field is an array The field is not registered. The field is registered. The field is registered and affected by a warning. The field is registered and affected by an error. Field registration checkbox that allows you to toggle the registration state. Select/Deselect all buttons. Used to register/unregister all the fields in a class. Fix button. Used to fix a macro registration if the right one isn\u00e2\u0080\u0099t used The UVM Registration Macro that is currently used for the selected field. Message area: displays error/warning messages. Field operation checkbox. If checked, the flag will be added to the registration. Field operation controls: allow you to select / clear all of the checkboxes. Print radix radio button. If checked, the radix will be set in the registration. At most one radix can be specified. Tooltip: hover with the mouse pointer any field operation checkbox or print radix radio button to obtain information about the flag. Clear print radix: allows you to unset the print radix (set all radio buttons off). Problems UVM Field Editor reports the following problems: Message Severity This field is registered with <current_macro_name> instead of <macro_determined_by_dvt> Error Radix flag is specified more than once. Error The flags for the field registration are incorrectly specified. They should be OR-ed together using | (pipe character). Error DVT could not determine a registration macro for this field. uvm_field_object will be used. Warning Tips Shortcut You can quickly trigger by using Alt + Shift + G . Fixing problems To fix a problem, press the Fix button if it\u00e2\u0080\u0099s a wrong registration macro or unregister and register the field. Note Registering and unregistering the field will reset the flags/registration macro. Multiple selection You can\u00e2\u0080\u0099t use multiple selection to perform registration/unregistration of more fields. Note If you want you can register/unregister all the fields using the Select/Deselect all buttons. UVM Content Filters UVM Runtime Elaboration On this page Triggering Interface Problems Tips Back to top",
    "section_path": [],
    "tokens": 691,
    "source": "scraped"
  },
  {
    "id": "e019e58d-5502-4ca2-bab0-ff4b24e7e50f",
    "title": "How do I change the background color of the Editor? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-do-i-change-the-background-color-of-the-editor.html",
    "content": "How do I change the background color of the Editor? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How do I change the background color of the Editor? Go to Window \u00e2\u0080\u00a3 Preferences , then navigate to General \u00e2\u0080\u00a3 Editors \u00e2\u0080\u00a3 Text Editors . In the panel on the right, from the Appearance color options list select Background color , then use the color picker to choose the desired color (the System default checkbox must be unchecked). I am using the Common Desktop Environment via Citrix and experiencing crashes. What can I do? Some widget colors are not displayed properly. What can I do? Back to top",
    "section_path": [],
    "tokens": 129,
    "source": "scraped"
  },
  {
    "id": "6a584c45-59a4-471e-9211-8a1ad8e3e167",
    "title": "Workspace and Workbench | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/getting-started/workspace/workspace-and-workbench.html",
    "content": "Workspace and Workbench | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Workspace and Workbench Work Workspace and workbench are different terms for different concepts, however they sound quite similar to be mistakenly interchanged. The \u00e2\u0080\u009cwork\u00e2\u0080\u009d prefix has a tendency to make us lose the interest, so I guess we don\u00e2\u0080\u0099t get to hear clearly the \u00e2\u0080\u009cspace\u00e2\u0080\u009d or \u00e2\u0080\u009cbench\u00e2\u0080\u009d that follow, hence both workspace and workbench collapse under the annoying \u00e2\u0080\u009csomething about work\u00e2\u0080\u009d. Workspace One of the first things you specify when you start Eclipse is the workspace location. The workspace is a directory that holds information about the projects you work on, as well as the Eclipse preferences (from layout to behavior). We can say that the workspace \u00e2\u0080\u009cholds\u00e2\u0080\u009d the Integrated Development Environment: the data you work on (organized in projects) and how you work with it (preferences). It is your \u00e2\u0080\u009cspace of work\u00e2\u0080\u009d or \u00e2\u0080\u009cworking space\u00e2\u0080\u009d or \u00e2\u0080\u009cworking universe\u00e2\u0080\u009d. Depending on your style, you can do all your work in a single workspace, no matter how different projects in your life, for example a Web project to publish your photos, a Verification project and a Java project where you learn how to program. Or you can chose to have several workspaces, each one dedicated to a specific state of mind or universe of thinking. Workbench The workbench is practically the Eclipse main window. It is the bench where you organize your instruments, except that now you don\u00e2\u0080\u0099t have power supplies, signal generators or oscilloscopes, but different views and editors . Views and editors are your instruments to manipulate sources and data. You arrange them at hand for a specific task (exploring, debugging, coding etc.). What instruments you use and how you lay them out on your bench ( workbench ) is known as a perspective : with what and from what angles you look at your data. Eclipse allows you quickly to reorganize your workbench, by choosing a different perspective. Don\u00e2\u0080\u0099t have to spend time moving the signal generator away, just switch to another perspective. Workspace Again The projects (your data) are not necessarily physically located in the workspace directory. They can be simple pointers to other locations on the disk. However the workspace aggregates all your \u00e2\u0080\u009crelevant\u00e2\u0080\u009d projects for a specific development universe. When you create a new empty project in the workspace, it is located in the actual workspace directory. When you create a project from existing source, the workspace keeps a pointer to the project folder. When you import a project in your workspace, again the workspace keeps a pointer to the project folder. (Importing is an interesting concept, documented separately). Note You can switch at any time from one workspace to another (menu File \u00e2\u0080\u00a3 Switch workspace\u00e2\u0080\u00a6 ). You can start several Eclipse instances looking at various workspaces (chose when prompted at start or in batch mode \u00e2\u0080\u009ceclipse -d <workspace location>\u00e2\u0080\u009d). However, you cannot have two Eclipse instances looking at the same workspace at once. Eclipse locks the workspace, as indicated by the .metadata/.lock file in the workspace directory. See also What is a Workspace Project Natures Refresh On this page Work Workspace Workbench Workspace Again Back to top",
    "section_path": [],
    "tokens": 546,
    "source": "scraped"
  },
  {
    "id": "2e69a43d-16ad-42d3-85f8-04d218163ebf",
    "title": "UVM Components Diagrams | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/diagrams/uvm-components-diagrams.html",
    "content": "UVM Components Diagrams | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide UVM Components Diagrams UVM Components Diagrams help you inspect and document the structure of a verification environment. You can create a component diagram in one of the following ways: Right - Click in the Verification Hierarchy View and select Show Diagram . This way is faster, but the generated diagram might not be completely accurate because it\u00e2\u0080\u0099s missing the runtime information. Generate the diagram using the simulator and open it in DVT. This way requires to run the simulation with some additional files compiled, but the generated diagram will be complete. The following operations are available in the Right - Click context menu: Go to Create Call Jump to the create call for the selected instance. Go to Type Jump to the declaration of the selected element\u00e2\u0080\u0099s type. It is available for nodes and labeled edges. Component Diagrams from Verification Hierarchy To generate the Component Diagrams from the Verification Hierarchy View , Right - Click on an entry in the view and select Show Diagram . Component Diagrams from Simulation To generate the Component Diagrams from simulation, some additional arguments must be added to the build directives, depending on the simulator. IUS: \u00e2\u0080\u009c-f $DVT_HOME/libs/dvt_chs/dvt_chs.top.ius.f\u00e2\u0080\u009d. When using -makelib/-endlib add \u00e2\u0080\u009c-f $DVT_HOME/libs/dvt_chs/dvt_chs.ius.f\u00e2\u0080\u009d inside the library and \u00e2\u0080\u009c-top dvt_chs_module\u00e2\u0080\u009d outside of it. VCS: \u00e2\u0080\u009c-f $DVT_HOME/libs/dvt_chs/dvt_chs.vcs.f\u00e2\u0080\u009d Questa: \u00e2\u0080\u009c-f $DVT_HOME/libs/dvt_chs/dvt_chs.questa.f\u00e2\u0080\u009d Note To generate diagrams for OVM environments, use the appropriate filelist from $DVT_HOME/libs/dvt_chs/ovm When the simulation starts, a component_hierarchy_of_<test_name>.chd will be generated in the working directory.\nOpen the generated file in DVT to inspect the diagram. The location of the diagram can be changed by setting the DVT_CHS_FILE environment variable before running the simulation. export DVT_CHS_FILE=/path/to/a/components_diagram.chd # sh, bash setenv DVT_CHS_FILE /path/to/a/components_diagram.chd # csh, tcsh You can stop the test immediately after the diagram has been generated by setting the DVT_CHS_STOP_TEST environment variable before running the simulation. export DVT_CHS_STOP_TEST=true # sh, bash setenv DVT_CHS_STOP_TEST=true # csh, tcsh Diagram Filters You can customize the diagram using the Filters button  in the diagram editor toolbar. Use the drop-down menu at the top of the dialog to select from available filters. Use the buttons in the top-right corner of the dialog to create, duplicate, or delete the current filter. Use the checkboxes at the bottom of the dialog to further clean up the diagram. A filter is defined using filter rules (one per line). The general form of a filter rule is: command element_kinds matching regex [ using color_name_or_code ] command is one of hide , show , or color element_kinds is a comma-separated list of kinds. The available kinds are instances , types , ports , port types and transaction types regex is a regular expression that matches the relevant diagram element labels color_name_or_code is a color specified by name , 6- or 3-digit hexadecimal code , comma-separated decimal RGB code or the keyword random . This is relevant only for color rules. Tip You can use content assist to write the filters ( CTRL + Space ). To apply a filter rule only to elements under a specific instance, you must provide the relevant path in the regex section of the rule: a path must always begin with the name of the top instance in the diagram (if instance is under top_instance , then top_instance/instance/\u00e2\u0080\u00a6 is valid, while instance/\u00e2\u0080\u00a6 is not) a path consists only of names of instances and \u00e2\u0080\u009c / \u00e2\u0080\u009d each level is separated from the previous using \u00e2\u0080\u009c / \u00e2\u0080\u009d (valid: top_instance/inst1/inst2/\u00e2\u0080\u00a6 ; not valid: top_instance.inst1.inst2\u00e2\u0080\u00a6 ) regular expressions may be used in the path section of a rule (for example, top_instance/.*/some_instance ) if the regex contains \u00e2\u0080\u009c / \u00e2\u0080\u009d, everything before the last \u00e2\u0080\u009c/\u00e2\u0080\u009d is the path , the rest is used to match the relevant diagram elements (in the following example, the bolded text is the path: top_instance/.*/inst1/ .*drv.*) if the regex does not contain \u00e2\u0080\u009c / \u00e2\u0080\u009d, it applies to all elements of the appropriate element_kinds Tip You can hide the hierarchy under an instance with the filter \u00e2\u0080\u009chide instances matching path/to/instance/.* \u00e2\u0080\u009d. With the predefined filter in the image above, the resulting diagram will be similar to the following: Design Diagrams Diagram Actions On this page Component Diagrams from Verification Hierarchy Component Diagrams from Simulation Diagram Filters Back to top",
    "section_path": [],
    "tokens": 735,
    "source": "scraped"
  },
  {
    "id": "b840859c-cb61-48dc-8012-6c074c062328",
    "title": "OVM Smart Log | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ovm-support/ovm-smart-log.html",
    "content": "OVM Smart Log | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide OVM Smart Log DVT ships with predefined filters for OVM that allow you to view colored and hyper-linked logs like the one below. To turn on OVM Smart Log: Select the predefined OVM filters as indicated below: OVM Field Editor Quick OVM Documentation Access Back to top",
    "section_path": [],
    "tokens": 80,
    "source": "scraped"
  },
  {
    "id": "be6530e9-ee69-414d-94e5-973780c4b1ac",
    "title": "Run Configurations | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/external-tools-integration/run-configurations.html",
    "content": "Run Configurations | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Run Configurations You can invoke (run) any executable from Eclipse and see its output in the Console View . You just need to create a Run Configuration from menu Run > Run\u00e2\u0080\u00a6 . VlogDT provides one type of configuration: DVT Generic DVT Generic Run Configuration Menu Run > Run Configurations\u00e2\u0080\u00a6 . Select DVT Generic configuration and click the New button. Specify name, working directory, run as command or script and the content of the command or script . Click Run . Before writing the command you can specify how to run the content. Run as a: command: the content must be a single line command with arguments script: the content must be a multiline script, preceded by a hash exclam; in Windows the script will run using cmd.exe, if a #!/bin/sh hash exclam exists on the first line the script will be executed using Busybox included in the distribution If run as a command is selected the content should look like this: sh -c \"echo Test ${string_prompt:Parameter 1} ${string_prompt:Parameter 2}\" or if run as a script is selected a script with hash exclam must be specified: #!/bin/sh echo Test ${ string_prompt : Parameter 1 } ${ string_prompt : Parameter 2 } for i in ` seq 5 -1 0 ` ; do echo Starting in $i seconds sleep 1 done echo Test started Parameters can be specified using Eclipse variables or DVT Custom Dialogs can be used for more complex dialogs. As a result you will be asked to provide the \u00e2\u0080\u009cParameter 1\u00e2\u0080\u009d e.g. \u00e2\u0080\u009crun\u00e2\u0080\u009d\nand \u00e2\u0080\u009cParameter 2\u00e2\u0080\u009d e.g. \u00e2\u0080\u009cscript\u00e2\u0080\u009d. The result of running the command will be: \u00e2\u0080\u009cTest run script\u00e2\u0080\u009d Note The parameters ${VAR} are considered Eclipse variables that and will be resolved before running the command. To use shell variables in the command you must use the $VAR syntax. When running as a command, unresolved Eclipse variables will trigger an error and the run will be aborted. not be reported. When running as a script the unresolved Eclipse variables will remain untouched. Supported Launch Modes You may choose if a launch configuration can be launched in Run mode, Debug mode or both. When both modes are supported, launching from a Custom Shortcut and Button for a Run Configuration will prompt for launch mode. See Debugger Integration for more details on debugging your code in DVT. Quick Run You can launch again at any time from menu Run > Run History\u00e2\u0080\u00a6 or directly from the toolbar (simple click launches last): You can also use the Run > Quick Run menu (or Ctrl+U shortcut key) to quickly launch any existing Run Configuration: The DVT Quick Run dialog will pop-up and present a list of all available Run Configurations. You can use the quick filter to search for a specific Run Configuration, up and down arrows to navigate in the list and Enter to launch: Output The invocation output is dumped to the Console View . Click on hyperlinks in the Console View to jump directly to the to source location. Run Configuration Session Type Note The options available under the command/script text box can be used to control the process session that will be used to run the command or script. The following session types are available: Same process session as DVT The process will be a direct child of DVT The process must manage its subprocesses if termination signals are received, otherwise orphaned processes may appear Job control is not available stdin, stdout, stderr will be available in \u00e2\u0080\u009cConsole View\u00e2\u0080\u009d , tty will not be available A new process session The process will be launched using a wrapper script that will create a new process session The process may manage its subprocesses if termination signals are received, but \u00e2\u0080\u009cTerminate all spawned processes\u00e2\u0080\u00a6\u00e2\u0080\u009d option can be used to kill all subprocesses when the parent process ends or is terminated Job control is available stdin, stdout, stderr will be available in \u00e2\u0080\u009cConsole View\u00e2\u0080\u009d , tty will not be available An xterm process session (xterm must be available in the system) The process will be launched using xterm that will create a new process session The process may manage its subprocesses if termination signals are received, but \u00e2\u0080\u009cTerminate all spawned processes\u00e2\u0080\u00a6\u00e2\u0080\u009d option can be used to kill all subprocesses when the parent process ends or is terminated Job control is available tty, stdin, stdout and stderr will be available in xterm , the stdout, stderr can be redirected to \u00e2\u0080\u009cConsole View\u00e2\u0080\u009d using \u00e2\u0080\u009cRedirect xterm output\u00e2\u0080\u00a6\u00e2\u0080\u009d option xterm window can remain on screen when the process ends or is terminated if \u00e2\u0080\u009cHold xterm window open\u00e2\u0080\u00a6\u00e2\u0080\u009d option is selected Custom Shortcut and Button for a Run Configuration On the main toolbar click on Run > Run Configurations\u00e2\u0080\u00a6 > Select a DVT Generic run configuration and click on Shortcuts Tab . You can choose to add a button in the main toolbar or a shortcut (for example, ALT+SHIFT+1). Warning It is not recommended to remove the shortcuts from Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 General \u00e2\u0080\u00a3 Keys , you should remove them from the Shortcuts Tab . Toolbar buttons must have an icon. You can specify the path to an icon or generate one by selecting the Geerate icon option. Each icon can have a one character label and a background color. You can specify the position of a button in the toolbar by modifying the Position # . Buttons are placed in the toolbar from left to right, ordered from 0 to N. If there are more buttons with the same number, they will be ordered alphabetically. Note You cannot create shortcuts for read-only run configuration files. Using environment variables in DVT Generic Run Configurations Environment variables can be set in the following ways: in the shell where DVT was launched using the +dvt_setenv+ directive in the project\u00e2\u0080\u0099s build configuration file (.dvt/default.build) - see Environment Variables from the Environment tab of the Run Configurations dialog (menu Run > Run Configurations) directly within the command getting executed, for example: sh -c \u00e2\u0080\u009cenv PROJECT_DIR=${project_loc} iev -f ${project_loc}/iev/iev.f -c\u00e2\u0080\u009d . To ensure that an environment variable ENV_VAR is expanded correctly, use the simple $ENV_VAR notation. Use the enclosing curly brackets ${ENV_VAR} notation only for Eclipse specific variables. You can find a list of these DVT Generic Run Configuration Variables . Using an alias in a DVT Generic Run Configuration Aliases only work in interactive shells. The command specified in the Run Configuration should be: <your_shell> -ic \u00e2\u0080\u009c<your_alias>\u00e2\u0080\u009d for example bash -ic \u00e2\u0080\u009cll\u00e2\u0080\u009d When you create a new DVT Generic Run Configuration, DVT tries to guess the shell that you use from the $SHELL system variable and fills it in for you. DVT Generic Run Configuration Variables The following variables are available when you configure a run configuration. These variables are automatically expanded each time the run configuration is launched. DVT variables Name Description ${selected_resources_loc} Absolute file system path of the selected resources separated by system file separator character. You can pass as argument a string to be used as separator. ${selected_resources_path} Workspace relative path of the selected resources separated by system file separator character. You can pass as argument a string to be used as separator. ${selected_resources_name} The name of the selected resources separated by system file separator character. You can pass as argument a string to be used as separator. ${selected_resource_line} The line of the cursor from the selected resource. ${dvt_current_build_file} Absolute path to the current DVT build file ${dvt_cli} Expands to the full DVT CLI path, using as the workspace option the current workspace: $DVT_HOME/bin/dvt_cli.sh -workspace ${workspace_loc} ${dvt_sim_compile_file_list} List of files compiled by DVT, in compilation dependency order, including library and compile syntax information (VHDL only). Each line in the variable expansion has the format: <library> <langauage_syntax> <file_full_path>. If a file path is provided as an argument to this variable, all the files required for the compilation of the provided file are listed (including itself). If in addition \u00e2\u0080\u009ccomp_deps\u00e2\u0080\u009d is provided as first argument, the entities instantiated through components will also be considered a compilation dependency Eclipse variables Name Description ${workspace_loc} The absolute path on the system\u00e2\u0080\u0099s hard drive to Eclipse\u00e2\u0080\u0099s workspace directory ${workspace_loc:<resource path>} The absolute path on the system\u00e2\u0080\u0099s hard drive to the specified resource. The <resource path> is the full path of the resource relative to the workspace root. For example ${workspace_loc:/MyProject/MyFile.txt}. Note that the expanded result of this variable is not the same as ${workspace_loc}/MyProject/MyFile.txt if the project\u00e2\u0080\u0099s contents directory for MyProject is outside the workspace directory. ${project_loc} The absolute path on the system\u00e2\u0080\u0099s hard drive to the currently selected resource\u00e2\u0080\u0099s project or to the project being built if the external tool is run as part of a build. ${project_loc:<resource path>} The absolute path on the system\u00e2\u0080\u0099s hard drive to the specified resource\u00e2\u0080\u0099s project. The <resource path> is the full path of the resource relative to the workspace root. For example ${workspace_loc:/MyProject/MyFile.txt}. Note that the expanded result of this variable is not the same as ${workspace_loc}/MyProject if the project\u00e2\u0080\u0099s contents directory for MyProject is outside the workspace directory. ${container_loc} The absolute path on the system\u00e2\u0080\u0099s hard drive to the currently selected resource\u00e2\u0080\u0099s parent (either a folder or project). ${container_loc:<resource path>} The absolute path on the system\u00e2\u0080\u0099s hard drive to the specified resource\u00e2\u0080\u0099s parent (either a folder or project). The <resource path> is the full path of the resource relative to the workspace root. For example:${workspace_loc:/MyProject/MyFolder/MyFile.txt}. Note that the expanded result of this variable is not the same as ${workspace_loc}/MyProject/MyFolder if the project\u00e2\u0080\u0099s contents directory for MyProject is outside the workspace directory. ${resource_loc} The absolute path on the system\u00e2\u0080\u0099s hard drive to the currently selected resource. ${resource_loc:<resource path>} The absolute path on the system\u00e2\u0080\u0099s hard drive to the specified resource. The <resource path> is the full path of the resource relative to the workspace root. For example ${workspace_loc:/MyProject/MyFile.txt}. Note that the expanded result of this variable is not the same as ${workspace_loc}/MyProject/MyFile.txt if the project\u00e2\u0080\u0099s contents directory for MyProject is outside the workspace directory. ${project_path} The full path, relative to the workspace root, of the currently selected resource\u00e2\u0080\u0099s project or of the project being built if the external tool is run as part of a build. ${container_path} The full path, relative to the workspace root, of the currently selected resource\u00e2\u0080\u0099s parent (either a folder or project). ${resource_path} The full path, relative to the workspace root, of the currently selected resource. ${project_name} The name of the currently selected resource\u00e2\u0080\u0099s project or of the project being built if the external tool is run as part of a build. ${container_name} The name of the currently selected resource\u00e2\u0080\u0099s parent (either a folder or project). ${resource_name} The name of the currently selected resource. External Tools Integration Smart Log On this page Run Configuration Session Type Custom Shortcut and Button for a Run Configuration Using environment variables in DVT Generic Run Configurations Using an alias in a DVT Generic Run Configuration DVT Generic Run Configuration Variables Back to top",
    "section_path": [],
    "tokens": 1841,
    "source": "scraped"
  },
  {
    "id": "44455d17-67f6-4420-9f8f-08459344c914",
    "title": "Save could not be completed | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/save-could-not-be-completed.html",
    "content": "Save could not be completed | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Save could not be completed You might encounter the following error message while trying to save a file in the DVT editor: Save could not be completed. Reason: Some characters cannot be mapped using \u00e2\u0080\u009cCHAR_ENCODING\u00e2\u0080\u009d character encoding. Either change the encoding or remove the characters that are not supported by the \u00e2\u0080\u009cCHAR_ENCODING\u00e2\u0080\u009d character encoding. This means there are other characters than \u00e2\u0080\u009cCHAR_ENCODING\u00e2\u0080\u009d (e.g. ASCII) in the edited file, most probably introduced by another tool that was used for editing the same file. In order to locate (and eventually remove) these characters, you can use the following perl command: perl - nwe 'print if /[^[ :ascii: ]]/' filename How to start DVT Eclipse with a different eclipse.ini IBM Clearcase Plugin Back to top",
    "section_path": [],
    "tokens": 157,
    "source": "scraped"
  },
  {
    "id": "2fb82c0f-4558-4940-92cb-dc8ff6295493",
    "title": "Scripts | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/scripts.html",
    "content": "Scripts | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Scripts dvt.sh DVT Eclipse IDE Launcher dvt.sh [-h[elp]] [-site site] [-bg] [-dvt_log_location <file>] [-workspace <dir> [-import_workspace_settings <dir> | -force_import_workspace_settings <dir>]] [-eclipsespace <dir>] [-heap_size <size>] [-stack_size <size>] [-options <opt>] [-eclipse_args <args> --] -help                                   Show this help. -bg                                     Launch DVT in background. -dvt_log_location <file>                Path to the log of stdout/sterr. Default is /tmp/dvt_log_<PID>. -workspace <dir>                        Path to the eclipse workspace (temporary eclipse directory). -import_workspace_settings <dir>        Path to the eclipse workspace from which settings will be imported. -force_import_workspace_settings <dir>  Same as -import_workspace_settings, but it will overwrite target workspace settings. -eclipsespace <dir>                     Path to the Eclipse configuration and user area. Default is /home/user/.eclipse. -heap_size <size>                       Set the Java heap size (syntax is <N>[g|G|m|M|k|K]). Default is 3072m. -stack_size <size>                      Set the Java thread stack size (syntax is <N>[g|G|m|M|k|K]). Default is 4m. -options <option list>                  Comma separated list of options: disable_browser                   - do not use SWT browser component and skip auto-config disable_swt_auto_config           - do not auto-config SWT GTK version and SWT browser engine disable_chromium                  - do not use bundled Chromium browser engine disable_xulrunner                 - do not use bundled XULRunner browser engine disable_webkit                    - do not use OS's WebKit browser engine disable_cairo                     - do not use Cairo advanced graphics library disable_force_gtk2                - do not force Eclipse to use GTK2 disable_gtk_theme                 - do not use custom GTK2 themes generated through DVT disable_force_classic_theme       - do not force Eclipse to use the classic theme disable_gtk_scroll_overlay        - use traditional scrollbars instead of scrollbars overlayed on top of content disable_shutdown_timeout          - do not force stop JVM when shutdown exceeds 5 seconds disable_chromium_mtml             - do not use Chromium multithreaded message loop disable_chromium_launcher_library - do not use Chromium launcher library disable_chromium_early_init       - do not use early init for Chromium browser engine disable_chromium_web_security     - do not enforce same-origin policy for Chromium browser engine dump_allocated_swt_resources      - dump SWT allocated resources when 'No more handles' error is thrown -eclipse_args <args>                    A list of eclipse.ini arguments to be passed directly to the Eclipse binary. To indicate the end of list use -- argument. See also http://wiki.eclipse.org/Eclipse.ini . Examples Start DVT without any option. You will be prompted for the workspace location. $> dvt.sh Start DVT with the maximum heap size of 4096 MB. You will be prompted for the workspace location. $> dvt.sh -heap_size 4096m Start DVT in the specified workspace. $> dvt.sh -workspace /home/$USER/dvt/workspace Start DVT in the specified workspace and use the specified Eclipse configuration and user area (plugins installed by user on top of a shared installation). $> dvt.sh -workspace /home/$USER/dvt/workspace -eclipsespace /path/to/$USER/dvt/eclipsespace Start DVT with a custom configuration file. The default is $DVT_HOME/eclipse/eclipse.ini. $> dvt.sh -eclipse_args --launcher.ini /home/$USER/dvt/eclipse.ini dvt_cli.sh See Command Line Interface . dvt_from_rawtokens.sh Creates and opens a DVT project from a rawtokens file. dvt_from_raw_tokens.sh [-workspace <dir>] -projectpath <dir> -rawtokens <file1> [ ... -rawtokens <fileN>] -overwrite Where: [-workspace <dir>]   Path to the eclipse workspace. Default: ~/dvt_eclipse_workspace -projectpath <dir>   Path to the DVT project. It will be created. -rawtokens <file>    Path to a rawtokens file. [-overwrite]         Delete project directory if already exists. Examples dvt_from_rawtokens.sh -workspace $HOME/dvt_workspace -projectpath $HOME/dvt_projects/aproject -rawtokens rawtokens.v -rawtokens rawtokens_lib.v dvt_kit_installer.sh This script is a command line utility that can be used to install / uninstall plugins delivered with the DVT Kit Distros. The script allows you to enable in a DVT distro any of the following plugins: Available Plugins Revision Control System Plugins: CVS                  (org.eclipse.cvs) CLEARCASE            (net.sourceforge.eclipseccase) GIT                  (org.eclipse.egit) PERFORCE.2021.2      (com.perforce.team.feature) - Only in distros based on Eclipse 4.22 PERFORCE.2022.1      (com.perforce.team.feature) - Only in distros based on Eclipse 4.22, 4.24 PERFORCE.2022.2      (com.perforce.team.feature) - Only in distros based on Eclipse 4.22, 4.24 PERFORCE.2023.1      (com.perforce.team.feature) - Only in distros based on Eclipse 4.22, 4.24 PERFORCE.2023.2      (com.perforce.team.feature) - Only in distros based on Eclipse 4.22, 4.24 PERFORCE.2024.1      (com.perforce.team.feature) - Only in distros based on Eclipse 4.33 SVN                  (org.eclipse.team.svn) Language Support Plugins: BASH                 (de.jcup.basheditor) CPP                  (org.eclipse.cdt) JAVA                 (org.eclipse.jdt) JENKINSFILE          (de.jcup.jenkinseditor) - Only in distros based on Eclipse 4.33 JSON                 (jsonedit-feature) PERL                 (org.epic.feature.main) PYTHON               (org.python.pydev.feature) RUBY                 (io.github.pyvesb.eclipse_solargraph) TCL                  (org.eclipse.dltk.tcl) YAML                 (de.jcup.yamleditor) Review and Task Management Plugins: GERRIT               (org.eclipse.egerrit.feature) MYLYN                (org.eclipse.mylyn_feature) Other Plugins: EDITOR_CONFIG        (editorconfig-eclipse-feature) Usage dvt_kit_installer . sh [ options ] operation OPTIONS : The options must be specified before the operation [ - w | workspace < dir > ] - Temporary workspace directory ( default / tmp / ) [ - s | simulate ] - Simulate the operation [ - h | help ] - Display this help OPERATIONS : The operation must be specified after the options and only one operation can be specified followed by a list of plugins ( containing at least one plugin ) [ - i | install < space separated list of plugins > ] - Install the plugins specified in the list [ - d | delete | uninstall < space separated list of plugins > ] - Uninstall the plugins specified in the list [ - li | list_installed ] - List the plugins installed with this script [ - la | list_available ] - List the plugins available for this distribution Examples Install the plugins for GIT and C++ $DVT_HOME/bin/dvt_kit_installer.sh install GIT CPP Uninstall the plugin for GIT $DVT_HOME/bin/dvt_kit_installer.sh uninstall GIT List installed plugins $DVT_HOME/bin/dvt_kit_installer.sh list_installed List available plugins for this distribution $DVT_HOME/bin/dvt_kit_installer.sh list_available Simulate the installation of the JAVA plugin $DVT_HOME/bin/dvt_kit_installer.sh -s install JAVA dvt_plugin_installer.sh This script is a command line utility that can be used to install/uninstall/update plugins from any type of update site into the DVT Eclipse distribution. Usage: $DVT_HOME/bin/dvt_plugin_installer.sh ... [-i|install <feature>]* - The name of the feature to be installed [-d|delete|uninstall <feature>]* - The name of the feature to be uninstalled [-u|update <feature>]* - The name of the feature to be updated [-r|repo|repository <uri>]* - Repository URI or filesystem path [-w|workspace <dir>] - Temporary workspace directory for this script (default /tmp/) [-s|simulate] - Simulate the operation [-li|list_installed] - List installed features [-h|help] - Display this help Examples Update DVT offline from a downloaded archived update site: $DVT_HOME/bin/dvt_plugin_installer.sh               \\ repo /path/to/dvt_update_site-*.zip             \\ update ro.amiq.dvt.feature Update DVT from online update site: $DVT_HOME/bin/dvt_plugin_installer.sh               \\ repo https://eda.amiq.com/update/latest/   \\ update ro.amiq.dvt.feature Uninstall a plugin (ViPlugin) from the distribution: $DVT_HOME/bin/dvt_plugin_installer.sh               \\ delete com.mbartl.eclipse.viplugin.feature List all installed plugins: $DVT_HOME/bin/dvt_plugin_installer.sh list_installed dvt_build.sh This script allows you to use the DVT compiler in batch mode. dvt_build.sh [-cmd <command file>] [-compile_waivers <XML file>] [-custom_report_location <directory>] [-gen_custom_report <FTL file>] [-heap_size <size>] [-help] [-ignore_build_config_errors] [-license_queue_timeout <timeout>] [-print_all_compile_problems] [-lang <language>] [-log <log file>] [-print_compile_waivers_info] [-silent] [-stack_size <size>] [-version] [-rure] [-run_cmd <file>] [-seed <seed>] [-uvm_test <uvm_test_name>] [-uvm_verbosity <uvm_verbosity>] [-ovm_test <ovm_test_name>] [-ovm_verbosity <ovm_verbosity>] Where: [-cmd <command file>] Optional. Compile using the specified compilation arguments file. If not specified, compilation arguments are automatically detected by scanning the current working directory for source files. [-compile_waivers <XML file>] Optional. Waive compilation errors using the waivers specified in the XML file. Waivers specified with this flag will have the highest precedence. [-custom_report_location <directory>] Optional. Destination directory for the custom build report. [-gen_custom_report <FTL file>] Optional, one or more. Generate a custom report using the specified template. [-heap_size <size>] Optional. Set the Java heap size (syntax is <N>[g|G|m|M|k|K]). Default is 3072m. [-help] Print help and exit. [-ignore_build_config_errors] Optional. Ignore build configuration errors. [-license_queue_timeout <timeout>] Optional. Maximum time in seconds to wait in queue for a license when one is not available. [-print_all_compile_problems] Optional. Print all compile problems. Include waived problems if used with \"-print_compile_waivers_info\". [-lang <language>] Mandatory. Enable support for the specified language (e, vlog, vhdl). [-log <log file>] Optional. Log to specified file. [-print_compile_waivers_info] Optional. Prints how many problems each compile waiver has matched. [-silent] Optional. Turn on minimal output. [-stack_size <size>] Optional. Set the Java thread stack size (syntax is <N>[g|G|m|M|k|K]). Default is 4m. [-version] Print version and exit. [-rure] Optional. Run UVM Runtime Elaboration. [-run_cmd <file>] Optional. Run UVM Runtime Elaboration using the specified run arguments file. [-seed <seed>] Optional. Seed for running UVM Runtime Elaboration. [-uvm_test <uvm_test_name>] . Optional. Test used when running UVM Runtime Elaboration [-uvm_verbosity <uvm_verbosity>] Optional. UVM verbosity used when running UVM Runtime Elaboration [-ovm_test <ovm_test_name>] Optional. Test used when running OVM Runtime Elaboration [-ovm_verbosity <ovm_verbosity>] Optional. OVM verbosity used when running OVM Runtime Elaboration Exit code 0 : The compilation completed successfully: at least a source file got analyzed and no configuration or compilation errors were reported 1 : Either no source files were compiled or configuration/compilation errors were encountered Examples Compile using the specified arguments file in mixed SystemVerilog + VHDL language: dvt_build . sh - lang vlog - lang vhdl - cmd my_compile . args Compile and generate a custom report using the specified template file: dvt_build . sh - lang vlog - cmd my_compile . args - gen_custom_report template . xml . ftl Run UVM Runtime Elaboration using the specified arguments file in SystemVerilog language: dvt_build . sh - lang vlog - cmd my_compile . args - rure - run_cmd my_run . args Run UVM Runtime Elaboration using the specified uvm test name and seed in SystemVerilog language: dvt_build . sh - lang vlog - cmd my_compile . args - rure - uvm_test my_uvm_test - seed 2 Custom Report To generate a custom compilation report in a text-based format starting from a template use the -gen_custom_report .\nYou must provide the path to a FreeMarker template file (see FreeMarker ).\nBy default the custom report is generated in the current working directory. Specify a different location using -custom_report_location . Inside the template file, information about the compilation results can be obtained using the API available on the ${builder} variable. Main API getAllProblems() : returns a list of all the compile problems getAllWaivers() : returns a list of all the compile waivers getAllFiles() : returns a list of all the compiled files in compilation order; a file may be compiled multiples times getTotalCompilationTimeFormatted() : returns the total compilation time getTotalCompilationTimeMilliseconds() : returns the total compilation time in milliseconds getNofCompiledLines() : returns the total number of compiled lines Problems API getId() getSeverity() getMessage() getLine() getFile() Waivers API getDescription() getName() getSeverity() getFile() getLine() getHitCount() : how many problems a waiver has matched getMatches() : returns the waiver\u00e2\u0080\u0099s \u00e2\u0080\u009cmatch\u00e2\u0080\u009d clauses Match Clause API getPath() getMessage() File API getPath() getCompileSyntax() : returns the language and language version that was used to compile a file (e.g. Verilog_2001) getNofLines() getCompileIndex() getCompileTime() Custom Report Examples Example 1 - XML Report Template < report > < #list builder.getAllProblems() as problem> < problem id = \"${problem.getId()}\" severity = \"${problem.getSeverity()}\" line = \"${problem.getLine()}\" message =< #if (problem.getMessage())?has_content>\"${problem.getMessage()}\"<#else>\"*\"</#if> file = \"${problem.getFile()}\" /> </ #list> </ report > The resulting XML file will look like this: < report > < problem id = \"MISSING_PORT_CONNECTION\" severity = \"WARNING\" line = \"5\" message = \"MISSING_PORT_CONNECTION: Missing port connection to input port(s) 'bist_req_i'\" file = \"mx_1/top.v\" /> < problem id = \"IMPLICIT_LIBRARY_ACCESS\" severity = \"WARNING\" line = \"31\" message = \"IMPLICIT_LIBRARY_ACCESS: Access to 'work' library is implicit; the library clause can be removed\" file = \"mx_1/jop/ext/gaisler/srctrl.vhd\" /> </ report > Example 2 - JSON Report Template { \"nofCompiledLines\" : \"${builder.getNofCompiledLines()}\" , \"compilationTime\" : \"${builder.getTotalCompilationTimeFormatted()}\" \"files\" : [ < #list builder.getAllFiles() as file> { \"filePath\" : \"${file.getPath()}\" , \"compilationTime\" : \"${file.getCompilationTime()}\" , \"fileNofLine\" : \"${file.getNofLines()}\" , \"fileSyntax\" : \"${file.getSyntax()}\" , \"fileCompilationIndex\" : \"${file.getCompilationIndex()}\" , }, </ #list> ], \"waivers\" : [ < #list builder.getAllWaivers() as waiver> { \"waiverName\" : \"${waiver.getName()}\" , \"waiverSeverity\" : \"${waiver.getSeverity()}\" , \"waiverDefLine\" : \"${waiver.getLine()}\" , \"waiverDescription\" : < #if (waiver.getDescription())?has_content>\"${waiver.getDescription()}\"<#else>\"*\"</#if>, \"waiverFile\" : \"${waiver.getFile()}\" , \"waiverHitCount\" : \"${waiver.getHitCount()}\" , \"waiverMatches\" : [ < #list waiver.getMatches() as match> { \"matchPath\" : < #if (match.getPath())?has_content>\"${match.getPath()}\"<#else>\"*\"</#if>, \"matchMessage\" : < #if (match.getMessage())?has_content>\"${match.getMessage()}\"<#else>\"*\"</#if>, }, </ #list> ] }, </ #list> ] , \"problems\" : [ < #list builder.getAllProblems() as problem> { \"problemId\" : \"${problem.getId()}\" , \"problemSeverity\" : \"${problem.getSeverity()}\" , \"problemLine\" : \"${problem.getLine()}\" , \"problemMessage\" : < #if (problem.getMessage())?has_content>\"${problem.getMessage()}\"<#else>\"*\"</#if>, \"problemFile\" : \"${problem.getFile()}\" , }, </ #list> ] } The resulting JSON file will look like this { \"nofCompiledLines\" : \"22,602\" , \"compilationTime\" : \"5s.531ms\" \"files\" : [ { \"filePath\" : \"mx_1/top.v\" , \"compilationTime\" : \"305\" , \"fileNofLine\" : \"190\" , \"fileSyntax\" : \"Verilog_2001\" , \"fileCompilationIndex\" : \"1\" , }, { \"filePath\" : \"mx_1/i2c_master_slave_core/verilog/rtl/controller_interface.v\" , \"compilationTime\" : \"71\" , \"fileNofLine\" : \"547\" , \"fileSyntax\" : \"Verilog_2001\" , \"fileCompilationIndex\" : \"2\" , }, \"waivers\" : [ { \"waiverName\" : \"SIGNAL_NEVER_USED\" , \"waiverSeverity\" : \"DISABLED\" , \"waiverDefLine\" : \"21\" , \"waiverDescription\" : \"*This waiver disables all problems that contain 'SIGNAL_NEVER_USED' inside their message AND were reported under 'mx_1/jop/vhdl/top/'.\" , \"waiverFile\" : \"mx_1/.dvt/waivers.xml\" , \"waiverHitCount\" : \"146\" , \"waiverMatches\" : [ { \"matchPath\" : \"mx_1/jop/vhdl/top/\" , \"matchMessage\" : \"SIGNAL_NEVER_USED: Signal is never used\" , }, { \"matchPath\" : \"*\" , \"matchMessage\" : \"*SIGNAL_NEVER_USED*\" , }, ] }, { \"waiverName\" : \"\" , \"waiverSeverity\" : \"ERROR\" , \"waiverDefLine\" : \"25\" , \"waiverDescription\" : \"*\" , \"waiverFile\" : \"mx_1/.dvt/waivers.xml\" , \"waiverHitCount\" : \"6\" , \"waiverMatches\" : [ { \"matchPath\" : \"mx_1/jop/vhdl/simulation/tb_jop_iic.vhd\" , \"matchMessage\" : \"NON_STANDARD_API: Unexpected method/\" , }, { \"matchPath\" : \"''\" , \"matchMessage\" : \"*SIGNAL_NEVER_WRITTEN*\" , }, ] }, ], \"problems\" : [ { \"problemId\" : \"MISSING_PORT_CONNECTION\" , \"problemSeverity\" : \"WARNING\" , \"problemLine\" : \"5\" , \"problemMessage\" : \"MISSING_PORT_CONNECTION: Missing port connection to input port(s) 'bist_req_i'\" , \"problemFile\" : \"mx_1/top.v\" , }, { \"problemId\" : \"MISSING_PORT_CONNECTION\" , \"problemSeverity\" : \"WARNING\" , \"problemLine\" : \"5\" , \"problemMessage\" : \"MISSING_PORT_CONNECTION: Missing port connection to output port(s) 'bist_ack_o, bist_err_o'\" , \"problemFile\" : \"mx_1/top.v\" , } ] } Memory Monitor Syntax Coloring On this page dvt.sh dvt_cli.sh dvt_from_rawtokens.sh dvt_kit_installer.sh dvt_plugin_installer.sh dvt_build.sh Custom Report Custom Report Examples Back to top",
    "section_path": [],
    "tokens": 2234,
    "source": "scraped"
  },
  {
    "id": "b8008f37-0eff-4ea5-961c-44403c1c8f88",
    "title": "Search all UVM Phase Overrides | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/search-all-uvm-phase-overrides.html",
    "content": "Search all UVM Phase Overrides | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Search all UVM Phase Overrides Use the Types View to see where a specific function is declared. For example, type .*phase in the Types View Quick Search to locate all UVM phase overrides. The classes that contain the declarations are bolded. The matching type members are also bolded and promoted to the top of the members pane. Search Port in Verification Hierarchy Search Global API Back to top",
    "section_path": [],
    "tokens": 103,
    "source": "scraped"
  },
  {
    "id": "982b19d0-fb1e-4670-b41f-792f9205c912",
    "title": "Compile Checks | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/compile-checks/index.html",
    "content": "Compile Checks | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Compile Checks The DVT internal builder performs various checks on the source code. Syntax Checks indicate wrong syntax according to the IEEE standard, for example typos like \u00e2\u0080\u0098clas\u00e2\u0080\u0099 instead of \u00e2\u0080\u0098class\u00e2\u0080\u0099 when declaring a class. Syntactic checking is the first level checking performed on the code during parsing. Semantic Checks indicate wrong semantic according to the IEEE standard, for example calling an undefined function \u00e2\u0080\u0098foo()\u00e2\u0080\u0099. For performance reasons, not all semantic checks are performed at once. A subset is performed during full or incremental compilation. The complete set of checks is performed on demand, when explicitly triggered. Synthesis Checks indicate constructs that are not supported by synthesis tools or constructs that may lead to simulation mismatches between the generated netlist and RTL. Performance Checks indicate constructs that may lead to simulation performance degradation. Dead Code Checks indicate constructs that are not used. Unused code may result in poor code readability and simulation performance degradation. Non Standard Checks indicate syntax or semantic that is not standard, although some simulators support it. Non standard syntax is the result of legacy or additional language capabilities that may get into future standard releases. Check failures are signaled as compile problems, with the error or warning severity. The compile problems are presented in the Problems View . For performance reasons not all compile problems are visible at once in the Problems View . You can use Compile Waivers to change the severity (promote/demote) or disable the problems reported by DVT during build. Compile Waivers Compile Waivers Examples Compile Waivers File Syntax (XML) Semantic Checks Synthesis Checks Performance Checks Dead Code Checks Non Standard Checks Use of External Programs Compile Waivers Back to top",
    "section_path": [],
    "tokens": 310,
    "source": "scraped"
  },
  {
    "id": "f4c27e0c-2ad3-4a93-bb0a-2473c14b3b26",
    "title": "Trace Connections from Editor | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/trace-connections/trace-connections-from-editor.html",
    "content": "Trace Connections from Editor | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Trace Connections from Editor You can trace connections directly from the DVT editor. All trace kinds ( Trace Drive , Trace Load , Trace Drive and Load ) are available. Start by placing the editor cursor over a port or internal signal and select Trace \u00e2\u0080\u00a3 trace kind from the right-click context menu. The Trace Connections View opens. Note Signals are traced across port connections and combinational logic: continuous assignments and combinational always blocks in SystemVerilog, concurrent signal assignments and combinational processes in VHDL. Note Interface and struct type signals are supported. Note The current breadcrumb navigation bar is used to determine the module instance to which the traced signal belongs. See Breadcrumb Navigation Bar for more details. Trace Connections from Design Hierarchy Trace Connections View Back to top",
    "section_path": [],
    "tokens": 163,
    "source": "scraped"
  },
  {
    "id": "27dff20a-a32e-474c-860b-b85f59ea4ef7",
    "title": "How to | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/how-to.html",
    "content": "How to | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to Set-up Local LLMs Using Ollama Add Comments to Selected Element Previewing the HTML Output Customization Advanced LLM Configuration Set-up Local LLMs Using Ollama Back to top",
    "section_path": [],
    "tokens": 60,
    "source": "scraped"
  },
  {
    "id": "247aa331-a53e-4222-8da1-0009623057f1",
    "title": "Override Constraints Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/content-assist/override-constraints.html",
    "content": "Override Constraints Using Autocomplete | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Override Constraints Using Autocomplete Place your cursor inside a class and then press Ctrl + Space to trigger Content Assist . When doing so, the list of proposals includes constraints that are available to override. The adjacent Proposal Tooltip includes information about the action that will be performed. Upon choosing the constraint, a corresponding constraint stub will be generated at the cursor\u00e2\u0080\u0099s location. The constraints may be filtered by typing additional keywords such as static . Tip You can change the constraint signature by editing the Constraint Code Templates Override Functions Using Autocomplete Implement Extern Functions Using Autocomplete Back to top",
    "section_path": [],
    "tokens": 135,
    "source": "scraped"
  },
  {
    "id": "d819fb7a-7aa6-4067-b238-ec7db5533a42",
    "title": "How to start DVT Eclipse with a different eclipse.ini | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-to-start-dvt-eclipse-with-a-different-eclipseini.html",
    "content": "How to start DVT Eclipse with a different eclipse.ini | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How to start DVT Eclipse with a different eclipse.ini You might encounter situations when changing the default eclipse.ini configuration file is necessary, but you don\u00e2\u0080\u0099t have write permissions over it. You can pass a different eclipse.ini file using launcher.ini argument. If you use DVT as plugin: ./ eclipse -- launcher . ini < location > If you use the prepacked distribution: ./ dvt . sh - eclipse_args -- launcher . ini < location > Locking is not possible in the directory\u00e2\u0080\u00a6 Save could not be completed Back to top",
    "section_path": [],
    "tokens": 128,
    "source": "scraped"
  },
  {
    "id": "82f25e54-2c14-4f7f-a4d8-588bf6aeebf6",
    "title": "How do I print source code? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-do-i-print-source-code.html",
    "content": "How do I print source code? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How do I print source code? For black and white printing you can use enscript - if it is available on your platform. Go to Run \u00e2\u0080\u00a3 External Tools \u00e2\u0080\u00a3 External Tools Configurations\u00e2\u0080\u00a6 and follow the next steps: Create a new Launch Configuration enscript location (you can use which enscript command to get its path) enscript arguments Apply \u00e2\u0080\u00a3 Run The above enscript arguments ( -2rT4v -DDuplex:true -dPhotosmart_C5100 ) used in this example mean:\n2 = 2 columns on page,r = landscape, T4 = tab size 4, v = verbose, Photosmart_C5110 = a printer name See also man enscript (in a Unix/Linux console). For color printing, you can copy/paste into Word / Open Office. The highlight is preserved. You can customize fonts / preview etc. in office tools. How do I link mylyn with Bugzilla? How do I disable Eclipse Software Sites? Back to top",
    "section_path": [],
    "tokens": 181,
    "source": "scraped"
  },
  {
    "id": "d1db3d05-6120-47fd-817a-f4f7b80a4ce1",
    "title": "Set-up Local LLMs Using Ollama | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ai-assistant/how-to/set-up-local-llms-using-ollama.html",
    "content": "Set-up Local LLMs Using Ollama | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Set-up Local LLMs Using Ollama Ollama is a lightweight, extensible framework for running language models on the local machine. It provides a simple API and CLI for creating, running, and managing models, as well as a library of pre-built models that can be easily used in a variety of applications. To set-up Ollama on your local machine following these steps: Download and install Ollama from its official website . Start the Ollama server on localhost:11434 using: ollama serve Pull a model from Ollama library : ollama pull <model name> Now the local LLM is ready to be used by AI Assistant. If Ollama runs on the default host and port, no additional configuration is needed for the AI Assistant. All models pulled locally and served by Ollama will show up in the AI Assistant (e.g.\u00c2\u00a0default model selection list). Recommendations: Use models with at least 7B parameters, preferably more. Smaller models typically don\u00e2\u0080\u0099t produce useful results. Some models to start with: llama3.1:8b llama3.1:70b deepseek-coder-v2:16b codestral:22b Running LLMs locally is resource intensive, for example, Llama 3.1 model with 8B parameters requires 4.7G disk space to download and 8G RAM to run. The model speed (tokens/sec) depends on the processing power. A GPU will deliver the best results, running only on CPU will result in slow replies. Ollama supports GPU acceleration. You should refer to the documentation to find out if your GPU is supported. How to Add Comments to Selected Element Back to top",
    "section_path": [],
    "tokens": 278,
    "source": "scraped"
  },
  {
    "id": "f5f1ddf1-36a8-42c7-b8eb-6b24b85278bb",
    "title": "Watch Expressions | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/debugger-integration/watch-expressions.html",
    "content": "Watch Expressions | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Watch Expressions You can select any expression in the editor, then right-click > Watch to add it to the Expressions View . You can also easily add any expression in the Expressions View using the + button. Variables Debug Specific Configurations Back to top",
    "section_path": [],
    "tokens": 76,
    "source": "scraped"
  },
  {
    "id": "fab6ad99-008f-46e9-bd90-ced7f2b1fc31",
    "title": "Override Using the Type Hierarchy View | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/override-functions/override-functions-using-the-type-hierarchy-view.html",
    "content": "Override Using the Type Hierarchy View | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Override Using the Type Hierarchy View You can override a function by pressing F4 to open the Type Hierarchy View > enable \u00e2\u0080\u0098\u00e2\u0080\u0099Show All Inherited Members\u00e2\u0080\u0099\u00e2\u0080\u0099 option (highlighted in the image below) > select a function > right-click > Override The function\u00e2\u0080\u0099s body will be placed at the end of the class. To override a function from a OVM/UVM/VMM class you have to disable either the Predefined Content Filters for these libraries or the entire Content Filters functionality in order to see the function in the Type Hierarchy View. Override Using Autocomplete Override Constraints Back to top",
    "section_path": [],
    "tokens": 133,
    "source": "scraped"
  },
  {
    "id": "5dac23e4-2afb-4a00-8d43-0385646515e3",
    "title": "Dead Code Checks | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/compile-checks/dead-code-checks.html",
    "content": "Dead Code Checks | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Dead Code Checks ID Message PARAMETER_NEVER_USED Parameter # is never used SIGNAL_NEVER_READ Signal # is never read SIGNAL_NEVER_USED Signal # is never used SIGNAL_NEVER_WRITTEN Signal # is never written SENSITIVITY_NONE The process is never evaluated (sensitive to nothing) SIGNAL_RESET_BUT_NOT_DRIVEN Signal # is reset but not driven Performance Checks Non Standard Checks Back to top",
    "section_path": [],
    "tokens": 87,
    "source": "scraped"
  },
  {
    "id": "37b46764-0bb1-4d61-a750-86f67537cca7",
    "title": "Mapping Linux to Windows (/proj/ to Z:\\proj\\) | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/mapping-linux-to-windows-proj-to-zproj.html",
    "content": "Mapping Linux to Windows (/proj/ to Z:\\proj\\) | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Mapping Linux to Windows (/proj/ to Z:\\proj\\) Linux directories can be mapped to Windows drives, allowing editing files from Windows. For example /home/dvt is mapped to Z:\\ .\nThis has an impact on paths configured for a DVT project.\nThe paths are set using Linux conventions, however Eclipse runs in Windows and the DVT builder needs to know about the mapping in order to compile the files. To specify the mapping, set the system variable %DVT_CROSSPLATFORM_MAP% before invoking Eclipse. You can add multiple mappings separated by \u00e2\u0080\u009c;\u00e2\u0080\u009d e.g.: / projects /= p : \\ ; / home / lars /= Z : \\ lars \\ Important Please do not put any mapping of type /=\\, we are handling this automatically. How do I Access Files Outside Project Dir - Working with Linked Resources Subversive vs Subclipse Back to top",
    "section_path": [],
    "tokens": 176,
    "source": "scraped"
  },
  {
    "id": "72211a6d-8649-4897-898b-288f0a563bcc",
    "title": "Export HTML/PDF Documentation | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/export-documentation/index.html",
    "content": "Export HTML/PDF Documentation | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Export HTML/PDF Documentation To generate HTML or PDF Documentation click on Specador \u00e2\u0080\u00a3 Generate Documentation\u00e2\u0080\u00a6 menu entry (requires a Specador license). This action will bring-up a dialog for specifying settings: 1. Common Settings Tab Specify the documentation title, author and copyright notice The output directory - target directory where the documentation will be placed Select the output format of your documentation (HTML | PDF) Option to include the API source code 2. Advanced Settings Tab Option to create a custom Table of Contents Select the comment formatter or apply comment filters Names Filter - exclude types names that match these filters Paths filter - exclude files from documentation 3. API Settings Tab Check which libraries and which kind of API to include in the documentation. 4. Diagrams Settings Tab Check which kind of diagrams you want to include in the documentation. Note It is recommended to perform a full build before exporting the documentation. Note For more informations check out the Specador User Guide . Preview HTML Documentation Supply Network Diagram Preview HTML Documentation Back to top",
    "section_path": [],
    "tokens": 210,
    "source": "scraped"
  },
  {
    "id": "26d27a1e-dcfd-47d2-8fc5-16c97a6ba30c",
    "title": "Quick OVM Documentation Access | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/ovm-support/quick-ovm-documentation-access.html",
    "content": "Quick OVM Documentation Access | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Quick OVM Documentation Access The Doxygen documentation is available at menu Help > Help Contents > OVM release number Doxygen .  You may choose documentation version from menu Window > Preferences > Help > OVM Doxygen . The CDN OVM/UVM User Guide is available at menu Help > Help Contents > CDN OVM/UVM User Guide . You need to configure the path to installed documentation from menu Window > Preferences > Help > CDN OVM/UVM User Guide. You can use Ctrl+Shift+H to quickly search through documentation (with or without selection in the editor). OVM Smart Log OVM Templates Back to top",
    "section_path": [],
    "tokens": 135,
    "source": "scraped"
  },
  {
    "id": "b94293aa-999c-4508-81fb-be4b8e0f9832",
    "title": "Managed Settings | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/settings-management/managed-setting.html",
    "content": "Managed Settings | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Managed Settings Not all settings are used in the same way. Some of the settings might be used only when the platform starts and others only when a specific operation is invoked. The following list presents the type of settings, the file where they are stored by default and order of precedence: Eclipse Launcher Configuration file name : eclipse.ini description : settings used by the Eclipse launcher (executable) to start the process, for example memory allocation thresholds precedence : dvt.sh arguments user common $DVT_HOME/eclipse/eclipse.ini handling : merged by precedence order; flags that have a key-value nature will be overwritten by the higher precedence value and all other flags will be accumulated relevant settings : memory allocation thresholds (-Xms, -Xmx, -Xss) flags used by Eclipse compiler exclude options GTK RC File file name : theme.gtkrc description : settings used by GTK window manager under linux operating system to determine the window colors for buttons, text, etc. precedence : user common $HOME/.dvt.gtkrc handling : replaced by precedence order; the file with higher precedence will be used Workspace Preferences file name : preferences.ini description : any changes done through Window \u00e2\u0080\u00a3 Preferences dialog will be automatically reflected in the preferences.ini file at user level; precedence : user common handling : merged by precedence order; preferences will be overwritten by the higher precedence value relevant settings : key bindings global code templates editor customizations task tags DVT Generic Run Configurations file name : *.launch description : run configurations are used to run external programs and can be serialized in *.launch files handling : accumulated from all opened projects (including user and common locations automatically linked in DVT-Settings project) Verissimo Linter Configurations file name : *.launch description : linter configurations are used to set the linter configuration files (*_lint_ruleset.xml, *_lint_waivers.xml, *_lint_user_notes.xml, *_lint_manual_checks_status.xml) and can be serialized in *.launch files handling : accumulated from all opened projects (including user and common locations automatically linked in DVT-Settings project) Compile Waivers file name : waivers.xml description : used to change the severity (promote/demote) or disable the problems reported by DVT during compilation (see Compile Waivers ) precedence : project user commonunmanaged handling : accumulated from all levels in precedence order default location : <project>/.dvt/waivers.xml Content Filters file name : content_filters.xml description : used to eliminate the unnecessary clutter introduced by 3rd party libraries like UVM (automatically hiding their API, TODO reminders, problems, \u00e2\u0080\u00a6) precedence : project user common handling : accumulated from all levels in precedence order default location : <project>/.dvt/content_filters.xml External Builders file name : external_builders.xml description : used to invoke any 3rd party script or tool and back-annotate its output (errors, warnings etc.) to the source code (see External Builders ) precedence : there can\u00e2\u0080\u0099t be two configurations with the same name, if it happens there is no guarantee on the precedence order handling : accumulated from all levels default location : <project>/.dvt/external_builders.xml Export HTML Documentation file name : dvt_export_html.xml description : settings used by the Export HTML Documentation Wizard (see Export HTML/PDF Documentation ) precedence : project\n-  user\n-  common handling : flags that have a key-value nature will be overwritten by the higher precedence value and all other flags will be accumulated default location : <project>/.dvt/dvt_export_html.xml Smart Log Styles file name : log_styles.xml description : Smart Log - Styles customization precedence : project user common handling : accumulated from all levels in precedence order default location : <project>/.dvt/log_styles.xml Custom Pragmas file name : custom_pragmas.xml description : used to create Custom Pragmas precedence : project user common handling : accumulated from all levels in precedence order default location : <project>/.dvt/custom_pragmas.xml Settings Management Unmanaged Settings Back to top",
    "section_path": [],
    "tokens": 635,
    "source": "scraped"
  },
  {
    "id": "bae5895e-dea0-4b32-8035-52d4448d9595",
    "title": "Locking is not possible in the directory\u00e2\u0080\u00a6 | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/locking-is-not-possible-in-the-directory.html",
    "content": "Locking is not possible in the directory\u00e2\u0080\u00a6 | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Locking is not possible in the directory\u00e2\u0080\u00a6 Problem : I\u00e2\u0080\u0099m unable to start DVT from a shared location, at launch time I\u00e2\u0080\u0099m receiving an error Locking is not possible in the directory\u00e2\u0080\u00a6 Solution : If you are using DVT in a shared installation setup, make sure that the installation directory is read-only for users. Workspace in use, cannot launch eclipse\u00e2\u0080\u00a6 How to start DVT Eclipse with a different eclipse.ini Back to top",
    "section_path": [],
    "tokens": 109,
    "source": "scraped"
  },
  {
    "id": "4a8192b4-5050-45b7-960f-736d9c5cdb47",
    "title": "default.build | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/default-build.html",
    "content": "default.build | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide default.build .dvt/default.build is an argument file that configures DVT\u00e2\u0080\u0099s internal builder. By default, whenever a full build is performed, DVT starts by reading this file. It may contain: comments directives in two forms: +directive+arg1[+arg2+\u00e2\u0080\u00a6] -directive arg1[ arg2 \u00e2\u0080\u00a6] top files. Anything that is not a directive or comment is regarded as path to a top file . Note Unknown directives are ignored. In general, DVT-specific directives start with +dvt_ . Unknown directives that start with this prefix are flagged with a warning. The internal builder parses each top file, following includes/imports as specified by the language. Some directives ( parsing directives ) allow you to control how files are compiled based on their extension, for example using System Verilog 1800-2012 for *.sv, Verilog 2001 for *.v, VHDL 1076-2008 for *.vhdl and e Language 1647-2011 parser for *.e. The parsing directives are either generic or mode specific. Note A project is built by analyzing source code with one or more of DVT\u00e2\u0080\u0099s parsers depending on the Project Natures . Even if build configuration files in the .dvt folder specify certain files to be compiled with a specific language syntax, they will not be analyzed unless the corresponding nature is enabled for the project. The language syntax to project nature mapping is: e Language e Nature Verilog, SystemVerilog vlog Nature VHDL vhdl Nature C/C++ c/cpp Nature UPF/CPF upf/cpf Nature PSS pss Nature SLN sln Nature SDL sdl Nature DVT for VS Code has currently support only for Verilog / SystemVerilog and VHDL. In general, the directives are similar with the arguments (or flags) that you would pass to any compiler/simulator. A build file may include other argument files and so on. The internal builder follows the included files as it encounters them (as if part of a continuous stream). Note that the way a file is included (for example with -f or -F ) has an influence on how paths inside the included files are interpreted. For more details see Including Other Argument Files . To simplify the flow integration, DVT supports several Compatibility Modes . This capability allows you to reuse existing arguments or argument files that you already use for a particular simulator invocation. Non-top files Auto-config Back to top",
    "section_path": [],
    "tokens": 401,
    "source": "scraped"
  },
  {
    "id": "9978e18a-4e0c-4baf-8ca0-eb593e114792",
    "title": "Themes | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/reference/themes.html",
    "content": "Themes | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Themes DVT is integrated with Eclipse Color Themes. To change the coloring scheme, go to Window > Preferences > DVT > Themes . A code sample in the Themes preference page helps you preview the changes for all DVT supported languages. By default, the UI color (i.e. views) will be in sync with the editor background. You can change this by disabling the Synchronize UI theme color with editor background option. You can either use a predefined theme from the list in the preference page, or load one of your choice. To load a theme, use: Import a theme\u00e2\u0080\u00a6 : to load an Eclipse Color Themes theme in XML format. The new theme will be added to the list. You have to select it and press Apply for the theme to be applied. Import an old DVT theme : to load an old .dvttheme file. The theme will not be added to the list and it will be automatically applied. You can also choose to change the fonts used, either for the UI widgets or for the text editors. Note After applying a theme a restart is required. Note Applying a theme will overwrite the color preferences for the selected editors. Note The Restore Defaults button will also restore the list of themes to the predefined ones. Syntax Coloring Toolbar Actions Back to top",
    "section_path": [],
    "tokens": 255,
    "source": "scraped"
  },
  {
    "id": "888a8580-2725-45f8-b35d-7715f6ec697a",
    "title": "External Tools Integration | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/external-tools-integration/index.html",
    "content": "External Tools Integration | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide External Tools Integration Run Configurations Run Configuration Session Type Custom Shortcut and Button for a Run Configuration Using environment variables in DVT Generic Run Configurations Using an alias in a DVT Generic Run Configuration DVT Generic Run Configuration Variables Smart Log Smart Log - Filters Smart Log - Hyperlinks Smart Log - Styles External Builders How to define a new external builder How to invoke external builders External Builder Output Source Code Markers - errors warnings External Documentation Configure External Documentation Browse External Documentation Search External Documentation Preview HTML Documentation Run Configurations Back to top",
    "section_path": [],
    "tokens": 128,
    "source": "scraped"
  },
  {
    "id": "f18d7e98-ce89-4110-8b20-050dca413f26",
    "title": "Generate Getters and Setters | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/generate-getters-and-setters/index.html",
    "content": "Generate Getters and Setters | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Generate Getters and Setters To open the Generate Getters and Setters dialog start typing the name of a field inside a class, press Ctrl + Space and select Generate Getters and Setters or right-click inside a class and select Source \u00e2\u0080\u00a3 Generate Getters and Setters . A dialog with all the getters and setters that can be created for the current class will appear. You can type the first letters of the field\u00e2\u0080\u0099s name to filter out the list. Select the functions that you want to implement and press OK . Override Using Autocomplete Proposals Module Automatic Instantiation Back to top",
    "section_path": [],
    "tokens": 135,
    "source": "scraped"
  },
  {
    "id": "087fa3b5-bc58-435c-8c16-65df8a5cf32f",
    "title": "Settings Management | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/settings-management/index.html",
    "content": "Settings Management | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Settings Management DVT allows you to customize various settings from memory allocation thresholds to run configurations or editor specific preferences like tab width and code templates. Starting with version 3.5, DVT provides an out of the box mechanism that simplifies settings management. Settings are organized in several precedence levels in order to allow a fine-grained control: Project level settings are stored in <project>/.dvt directory User level setting are stored by default in $HOME/.dvt/settings , the location can be customized using $DVT_USER_SETTINGS system variable Common level settings are not stored by default, the location can be customized using $DVT_COMMON_SETTINGS system variable The order of precedence (starting with the higher one) is: Project level User level Common level In order to reuse a specific setting, for example from project level to user level, all you have to do is copy it from the project level specific file to the user level specific file. In similar way you can move settings from user to common level for team or company wide reuse. Managed Settings Unmanaged Settings User and Common Settings Location Use Cases Memory Allocation Thresholds Workspace Preferences Run Configurations Compile Waivers Content Filters External Builders Export HTML Documentation Custom Pragmas Examples Deprecated Settings Management (before DVT 3.5) Workspace Settings Project Settings Other Settings Importing Preferences From a Different Workspace Using Import/Export Wizard Using dvt.sh Script Manually Customizing Default Settings Using dvt.ini Show Changed Preferences Dialog Changing the Default dvt.ini Using a User Customized dvt.ini VMM Templates Managed Settings Back to top",
    "section_path": [],
    "tokens": 281,
    "source": "scraped"
  }
]