[
  {
    "id": "699a311d-0dd6-4b01-bbda-3fc0d1679f8a",
    "title": "Table of Contents | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/index.html",
    "content": "Table of Contents | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Table of Contents Installation Checklist Install DVT Using a pre-packed Distribution Install DVT Using the Update Site Eclipse Version Java Version DVT Plug-in Set the License Predefined Projects Opening a Predefined Project Preferences Getting Started What is a Workspace What is a Project Create a New Project Import an Existing Project Automatic Create or Import Project Natures Workspace and Workbench Work Workspace Workbench Workspace Again Refresh Linked Resources Backup and Local History Basic Tutorial Switch to the DVT Perspective Open a Project Configure the Build Build the Project Inspect the Compilation Errors See Comments in Tooltips Use Hyperlinks to Move Around in the Code Quickly Open a Type (Class, Module, Interface) Quickly Inspect the Class Hierarchy Quickly Open a File Quickly Move Inside the Editor Inspect the Class Hierarchy and Class Members Inspect the Design Hierarchy Inspect the Verification Hierarchy Browse Through All the Available Types (Classes, Modules, Interfaces) Look for the Implementation of an Extern Function or Task Search for Entities Use Content Assist (Autocomplete) Use Code Templates Use Module Auto Instance Expand Macros (Apply Preprocessing) Trace Macro Errors Track Tasks using TODO Markers Quickly See the Current Scope in the Status Bar Fold Code Regions in Order to Improve Readability Access the Context Sensitive Help Build Configurations Non-top files default.build Auto-config Simulator Log-config Emulating compiler invocations Multiple .build Files Compatibility Modes List of Compatibility Modes How to Specify the Compatibility Mode Paths Strings Comments Environment Variables Including Other Argument Files Build Persistence DB Access Considerations DVT Auto-Linked Run a Script Before Build All Build Directives e Language Test Files e Language SPECMAN_PATH Adding VIPs to $SPECMAN_PATH using sn_which.sh SystemVerilog OVM or UVM Library Compilation Xilinx Libraries Compilation Precompilation support for Xilinx Libraries Intel(Altera) Quartus Libraries Compilation Precompilation support for Intel(Altera) Quartus Libraries Questa Libraries Compilation Use of External Programs Compile Checks Compile Waivers Compile Waivers Examples Compile Waivers File Syntax (XML) Semantic Checks Synthesis Checks Performance Checks Dead Code Checks Non Standard Checks Content Assist (Autocomplete) Content assist for CamelCase and Underscore Code Templates Module Automatic Instantiation Override Functions Using Autocomplete Override Constraints Using Autocomplete Implement Extern Functions Using Autocomplete Use Assignment Pattern for Struct Type Variable Quick Fix Proposals Add Parameter to Module Add Port to Module Add Signal to Sensitivity List Add Virtual Qualifier to Interface Type Correct Spelling In Comments and Strings Create Class In New File Create File From Build Config Editor Create Included File Create Interface Class In New File Declare Extern Prototype Declare Method Declare Variable Did You Mean Explicitly Declare Fully Qualify Type Implement Extern Constraint Implement Extern Method Implement Missing Pure Virtual Methods Import Type Remove \u00e2\u0080\u0098local\u00e2\u0080\u0099 or \u00e2\u0080\u0098protected\u00e2\u0080\u0099 Qualifier Remove Signal from Sensitivity List Remove Signal Never Used Update Extern Prototype/Implementation Update Module Instance Update Virtual Method Signature Waive Compilation Problems Quick Assist Proposals Bind Method Call Arguments by Name Bind Method Call Arguments by Position Connect Instance Ports by Name Connect Instance Ports by Position Collapse Macro Expand Macro Expand .* Port Connections Extract to Variable Extract to Method Extract to Module Move Selection to New File Join Extern and Implementation Split into Extern and Implementation Rename in File AI Assistant Overview Getting Started Key Terms Sessions Blueprints Prompting Symbols Snippets Working in Chat List of Buttons, Shortcuts and Commands Working in Editor Code Completion Protecting Code Pattern Format Examples Reference List of Commands Predefined Blueprints Custom Blueprints Predefined Snippets Custom Snippets Advanced LLM Configuration Environment variables-based configuration File-based configuration How to Set-up Local LLMs Using Ollama Add Comments to Selected Element Troubleshooting Why do I get unexpected replies? Why do I get different replies for the same request? What to do if I get errors or find a bug? Content Filters Content Filters XML syntax Filtering by Element Type Content Filters Examples Predefined Content Filters Code Templates Code Templates in Autocomplete Constraint Code Templates Method Code Templates Global Code Templates Project Level Code Templates Code Templates View File Templates Project Templates What is a project template? How to generate code from a project template Step 1. Specify Directories Step 2. Specify Parameters Template Configuration template-config.xml template.config Add from Template Code Formatting Whitespace Indentation Vertical Alignment Vertical Align Patterns (ro.amiq.vlogdt/format.vertical_align.vregex) Line Wrapping Disable Format for Code Sections Format Multiple Files External Preferences Keys Automatic Indentation As You Type Override Functions Override Annotation Inspect Overrides in the Quick Type Hierarchy View Inspect Overrides in the Layers View Override Using the Dialog Override Using Autocomplete Override Using the Type Hierarchy View Override Constraints Override Annotation Inspect Overrides in the Quick Type Hierarchy View Inspect Overrides in the Layers View Override Using the Dialog Override Using Autocomplete Proposals Generate Getters and Setters Module Automatic Instantiation Autoinstance Using Autocomplete Autoinstance Using Drag and Drop Semantic Search Show Usages, Readers or Writers Favorite Searches Show Constraints Show Instances Show Instances in the Search View Show Instances in the Design Hierarchy View Quick Search in Views CamelCase Simple Regex Hierarchical Search Search for Members Search Port in Design Hierarchy Search Port in Verification Hierarchy Search all UVM Phase Overrides Search Global API Trace Connections Trace Connections from Design Hierarchy Trace Connections from Editor Trace Connections View Trace Path Breadcrumb Navigation Bar Design Breadcrumb Verification Breadcrumb Scope Breadcrumb Filesystem Breadcrumb Code Factory Factory Input Creating code Create from Template Design API Port API Port Data API Parameter API Example Refactoring Rename Refactoring Rename Port Across the Design Hierarchy Rename File Bind Method Call Arguments by Name Bind Method Call Arguments by Position Connect Instance Ports by Name Connect Instance Ports by Position Expand .* Port Connections Extract to Variable Extract to Method Extract to Module Move Selection to New File Join Extern and Implementation Split into Extern and Implementation Change Method Signature Connect Instances Across the Design Hierarchy Connect Instances Using New Ports Connect Instances  Using Existing Ports Structural Changes Preview Diagram Refactoring Connect View Add Port to Module from Selected Field Add New Port to Module Add New Parameter to Module Refactoring Scripts Writing a Refactoring Script Applying a Refactoring Script Diagrams UML Diagrams UML Diagrams - Select Types UML Diagrams - Preferences UML Diagrams - Legend Architecture UML Diagrams Sequences UML Diagrams Design Diagrams Schematic Diagrams Flow Diagrams Block Diagrams Finite-State Machine Diagrams Diagram Filters Design Diagram Actions Breadcrumb Navigation Bar Low Power Format Support UVM Components Diagrams Component Diagrams from Verification Hierarchy Component Diagrams from Simulation Diagram Filters Diagram Actions Diagram Toolbar Diagram Magnifier WaveDrom Timing Diagrams Bit Field Diagrams Bit Field Diagrams for UVM registers Bit Field Diagrams for packed data types Low Power Format Support Supply Network Diagram Export HTML/PDF Documentation Preview HTML Documentation External Tools Integration Run Configurations Run Configuration Session Type Custom Shortcut and Button for a Run Configuration Using environment variables in DVT Generic Run Configurations Using an alias in a DVT Generic Run Configuration DVT Generic Run Configuration Variables Smart Log Smart Log - Filters Smart Log - Hyperlinks Smart Log - Styles External Builders How to define a new external builder How to invoke external builders External Builder Output Source Code Markers - errors warnings External Documentation Configure External Documentation Browse External Documentation Search External Documentation Debugger Integration Simulation Prerequisites Launch a Debug Simulation Connect to an Existing Simulation Breakpoints Threads, Call Stack, Stepping Variables Watch Expressions Debug Specific Configurations Custom Dialogs Quick Steps Customizing the Dialog Output SWT/XML Reference Layouts Widgets Custom Dialog Snapshots Custom Dialog Snapshots File Syntax (XML) Command Line Interface dvt_cli.sh Syntax Examples Makefile Example Commands Create a Project (Mixed-Language Capable) Create a Project From an Existing Template Import an Existing Project List Compiled Files Compare Files Launch a Run Configuration Open a File Close a File Open a Custom Dialog Open a Perspective Refresh a Project Rebuild a Project Rebuild All Projects Print Edited File Quit Query the running status Print version Run Performance Exploration Macros Support Inactive Code Highlight Overview Settings Macro Expansion Overview Triggering Tips IMPORTANT NOTE Macros and Quick Macros Views Reminders (TODO Markers) OVM Support OVM Compliance Review OVM Field Editor Triggering Interface Problems Tips OVM Smart Log Quick OVM Documentation Access OVM Templates UVM Support Runtime UVM Configuration Queries Static UVM Configuration Queries UVM Browser UVM Compliance Review UVM Content Filters UVM Field Editor Triggering Interface Problems Tips UVM Runtime Elaboration UVM Sequence Tree UVM Smart Log UVM Templates UVM Verification Hierarchy OVM to UVM Migration Triggering Preferences Review changes VMM Support VMM Smart Log Quick VMM Documentation Access VMM Templates Settings Management Managed Settings Unmanaged Settings User and Common Settings Location Use Cases Memory Allocation Thresholds Workspace Preferences Run Configurations Compile Waivers Content Filters External Builders Export HTML Documentation Custom Pragmas Examples Deprecated Settings Management (before DVT 3.5) Workspace Settings Project Settings Other Settings Importing Preferences From a Different Workspace Using Import/Export Wizard Using dvt.sh Script Manually Customizing Default Settings Using dvt.ini Show Changed Preferences Dialog Changing the Default dvt.ini Using a User Customized dvt.ini Reference Comments Formatting Markdown ( recommended ) Javadoc Natural Docs ( deprecated ) Common Shortcuts Custom Pragmas DVT Resource Monitor Editor Notification Editor Right Click Menu Folding Macros Source Code Factory Show References Trace Refactor Hyperlinks Hyperlinks in Comments Icons and Decorations Icons Decorations Changing Icon Colors Project Colors Inactive Generates Code Highlight Lazy Bring up Resources Memory Monitor Scripts dvt.sh dvt_cli.sh dvt_from_rawtokens.sh dvt_kit_installer.sh dvt_plugin_installer.sh dvt_build.sh Syntax Coloring Themes Toolbar Actions Tooltips Views Call Hierarchy View Checks View Code Templates View Compile Order view Config DB View Console View Coverage View Design Hierarchy View Factory Overrides View Inspect View Layers View Macros View Outline View Power Domain View Problems View Quick Query View Registers View Tasks View Trace Connections View Types View Type Hierarchy View UVM Browser View UVM Sequence Tree View Verification Hierarchy View Application Notes C/C++ support Design Elaboration Top candidates Parameter values Unelaborated Design Debugging Performance Compilation Speed-up How to exclusively compile the API? How to improve the elaboration time? Precompilation Support Auto precompiled databases Encrypted VIP Support FPGA Support Intel(Altera) Quartus Intel(Altera) Quartus Libraries Compilation Xilinx ISE/Vivado Xilinx Libraries Compilation Precompilation support for Intel(Altera) Quartus and Xilinx Libraries Generating External Tool Scripts from the DVT Build Configuration Incremental Compilation Preprocessed Files Support Navigation between (p) and (g) files Integration of the preprocessing tool Mapping preprocessing (p) to generated (g) files Scan locations for (p) files Output and logging Configuration Understanding DVT IDE memory usage UVM Library Compilation Troubleshooting Visual Artifacts Tips and Tricks Editing Code Navigation Searching Miscellaneous Q & A I am new to Eclipse, where should I start from? Where can I find DVT Help? How do I see and configure the key shortcuts? Are there any backup files in Eclipse? Workspace in use, cannot launch eclipse\u00e2\u0080\u00a6 Locking is not possible in the directory\u00e2\u0080\u00a6 How to start DVT Eclipse with a different eclipse.ini Save could not be completed IBM Clearcase Plugin Non existing package mti_fli How to use Working Sets for filtering Problems/Task/Search views? How to handle Simulator and Command Line Macros How do I Access Files Outside Project Dir - Working with Linked Resources Mapping Linux to Windows (/proj/ to Z:\\proj\\) Subversive vs Subclipse How do I associate a project with both DVT and CDT? Can I use vi/vim along with DVT? Can I perform dos2unix or unix2dos from DVT? How can I configure Eclipse to use a local CVS repository? I am using the Common Desktop Environment via Citrix and experiencing crashes. What can I do? How do I change the background color of the Editor? Some widget colors are not displayed properly. What can I do? How do I change the tooltip colors? How do I change Internet Proxy Settings? Eclipse does not start, there is no Workspace, metadata or log file created Workspace permissions How do I link mylyn with Bugzilla? How do I print source code? How do I disable Eclipse Software Sites? How do I revert to a previous version? What are the most common shortcuts in DVT? How does DVT integrate with emacs? How does DVT integrate with CVS? How to set an environment variable within a Run Configuration? How to run a remote Unix command from DVT Eclipse for Windows? Rebuild shortcut (Ctrl + Alt + R) does not work I want to use an alias in a DVT Generic Run Configuration, but it\u00e2\u0080\u0099s not recognized How to set multiple paths as sources of predefined projects ? Lines are suddenly changing indentation when I edit text or move the cursor through the editor. How to change the directory where the build log file is saved ? How to find the DVT logs on Linux/Unix ? How to create resource filters ? How to create custom shortcut and button for a Run Configuration? I know that file.foo is present in the project location, but I can\u00e2\u0080\u0099t see it in the Navigator View How to copy the full path to the file in the current editor? How to adjust the console logs filters matching parameters? When I switch to Block (Column) Selection mode the font changes In Block (Column) Selection mode I see strange editing artifacts How to modify the font size in the code editors? How to automatically checkout/lock files from the revision control system ? How can I see if a file is read-only? How can I open a file in DVT from the terminal? How can I open a file in DVT from Questa? How do I change the name of the xterm opened by a DVT Generic Run Configuration? I get errors while installing or updating a plugin from an update site What is New? 25.1.11 (18 June 2025) 25.1.10 (28 May 2025) 25.1.9 (13 May 2025) 25.1.8 (2 May 2025) 25.1.7 (9 April 2025) 25.1.6 (26 March 2025) 25.1.5 (12 March 2025) 25.1.4 (12 March 2025) 25.1.3 (26 February 2025) 25.1.2 (13 February 2025) 25.1.1 (21 January 2025) 24.2.28 (11 December 2024) 24.2.27 (26 November 2024) 24.2.26 (14 November 2024) 24.2.25 (31 October 2024) 24.2.24 (14 October 2024) 24.2.23 (11 October 2024) 24.1.22 (1 October 2024) 24.1.21 (18 September 2024) 24.1.20 (4 September 2024) 24.1.19 (22 August 2024) 24.1.18 (7 August 2024) 24.1.16 (25 July 2024) 24.1.14 (9 July 2024) 24.1.13 (26 June 2024) 24.1.12 (11 June 2024) 24.1.11 (29 May 2024) 24.1.10 (14 May 2024) 24.1.8 (24 April 2024) 24.1.7 (9 April 2024) 24.1.6 (27 March 2024) 24.1.5 (13 March 2024) 24.1.4 (28 February 2024) 24.1.3 (13 February 2024) 24.1.2 (1 February 2024) 24.1.1 (18 January 2024) 23.2.30 (21 December 2023) 23.2.29 (13 December 2023) 23.2.28 (28 November 2023) 23.2.27 (17 November 2023) 23.2.26 (14 November 2023) 23.2.25 (1 November 2023) 23.2.24 (17 October 2023) 23.2.23 (9 October 2023) 23.1.22 (22 September 2023) 23.1.20 (6 September 2023) 23.1.19 (25 August 2023) 23.1.18 (2 August 2023) 23.1.16 (18 July 2023) 23.1.15 (7 July 2023) 23.1.14 (22 June 2023) 23.1.13 (7 June 2023) 23.1.12 (23 May 2023) 23.1.11 (9 May 2023) 23.1.10 (25 April 2023) 23.1.9 (12 April 2023) 23.1.8 (29 March 2023) 23.1.7 (15 March 2023) 23.1.6 (1 March 2023) 23.1.5 (21 February 2023) 23.1.4 (8 February 2023) 23.1.3 (31 January 2023) 23.1.2 (25 January 2023) 23.1.1 (19 January 2023) 22.1.39 (20 December 2022) 22.1.38 (14 December 2022) 22.1.37 (6 December 2022) 22.1.36 (22 November 2022) 22.1.35 (17 November 2022) 22.1.34 (8 November 2022) 22.1.32 (1 November 2022) 22.1.31 (20 October 2022) 22.1.30 (11 October 2022) 22.1.29 (28 September 2022) 22.1.28 (28 September 2022) 22.1.27 (13 September 2022) 22.1.26 (7 September 2022) 22.1.25 (30 August 2022) 22.1.24 (22 August 2022) 22.1.23 (16 August 2022) 22.1.22 (2 August 2022) 22.1.21 (21 July 2022) 22.1.20 (11 July 2022) 22.1.19 (28 June 2022) 22.1.18 (15 June 2022) 22.1.17 (8 June 2022) 22.1.16 (31 May 2022) 22.1.14 (17 May 2022) 22.1.13 (9 May 2022) 22.1.12 (3 May 2022) 22.1.11 (18 April 2022) 22.1.10 (12 April 2022) 22.1.9 (30 March 2022) 22.1.8 (15 March 2022) 22.1.7 (2 March 2022) 22.1.6 (23 February 2022) 22.1.5 (16 February 2022) 22.1.4 (8 February 2022) 22.1.3 (31 January 2022) 22.1.2 (26 January 2022) 22.1.1 (18 January 2022) 21.1.53 (22 December 2021) 21.1.52 (14 December 2021) 21.1.51 (6 December 2021) 21.1.50 (23 November 2021) 21.1.49 (17 November 2021) 21.1.48 (16 November 2021) 21.1.47 (8 November 2021) 21.1.46 (2 November 2021) 21.1.45 (26 October 2021) 21.1.44 (19 October 2021) 21.1.43 (11 October 2021) 21.1.42 (4 October 2021) 21.1.41 (27 September 2021) 21.1.40 (21 September 2021) 21.1.39 (15 September 2021) 21.1.38 (8 September 2021) 21.1.36 (30 August 2021) 21.1.35 (23 August 2021) 21.1.34 (16 August 2021) 21.1.33 (9 August 2021) 21.1.32 (3 August 2021) 21.1.31 (27 July 2021) 21.1.30 (20 July 2021) 21.1.29 (12 July 2021) 21.1.28 (6 July 2021) 21.1.27 (28 June 2021) 21.1.26 (22 June 2021) 21.1.25 (16 June 2021) 21.1.24 (8 June 2021) 21.1.23 (3 June 2021) 21.1.22 (24 May 2021) 21.1.21 (18 May 2021) 21.1.20 (17 May 2021) 21.1.19 (10 May 2021) 21.1.18 (28 April 2021) 21.1.17 (26 April 2021) 21.1.16 (20 April 2021) 21.1.15 (19 April 2021) 21.1.14 (13 April 2021) 21.1.13 (5 April 2021) 21.1.12 (30 March 2021) 21.1.11 (22 March 2021) 21.1.10 (15 March 2021) 21.1.9 (8 March 2021) 21.1.8 (1 March 2021) 21.1.7 (22 February 2021) 21.1.6 (15 February 2021) 21.1.5 (5 February 2021) 21.1.4 (2 February 2021) 21.1.3 (25 January 2021) 21.1.2 (18 January 2021) 21.1.1 (11 January 2021) 20.1.44 (21 December 2020) 20.1.43 (8 December 2020) 20.1.42 (4 December 2020) 20.1.41 (20 November 2020) 20.1.40 (13 November 2020) 20.1.39 (9 November 2020) 20.1.38 (30 October 2020) 20.1.37 (23 October 2020) 20.1.36 (16 October 2020) 20.1.35 (8 October 2020) 20.1.34 (2 October 2020) 20.1.33 (28 September 2020) 20.1.32 (17 September 2020) 20.1.31 (11 September 2020) 20.1.30 (3 September 2020) 20.1.29 (28 August 2020) 20.1.28 (21 August 2020) 20.1.27 (14 August 2020) 20.1.26 (30 July 2020) 20.1.25 (24 July 2020) 20.1.24 (17 July 2020) 20.1.23 (9 July 2020) 20.1.22 (8 July 2020) 20.1.21 (2 July 2020) 20.1.20 (26 June 2020) 20.1.19 (18 June 2020) 20.1.17 (16 June 2020) 20.1.16 (12 June 2020) 20.1.15 (4 June 2020) 20.1.14 (28 May 2020) 20.1.13 (22 May 2020) 20.1.12 (21 May 2020) 20.1.11 (15 May 2020) 20.1.10 (11 May 2020) 20.1.9 (30 April 2020) 20.1.8 (16 April 2020) 20.1.7 (10 April 2020) 20.1.6 (2 April 2020) 20.1.5 (27 March 2020) 20.1.4 (20 March 2020) 20.1.3 (9 March 2020) 20.1.2 (28 February 2020) 20.1.1 (21 February 2020) 19.1.50 (7 February 2020) 19.1.49 (5 February 2020) 19.1.48 (29 January 2020) 19.1.47 (10 January 2020) 19.1.46 (6 January 2020) 19.1.45 (24 December 2019) 19.1.44 (20 December 2019) 19.1.43 (11 December 2019) 19.1.42 (6 December 2019) 19.1.41 (28 November 2019) 19.1.40 (12 November 2019) 19.1.39 (7 November 2019) 19.1.38 (31 October 2019) 19.1.37 (25 October 2019) 19.1.36 (21 October 2019) 19.1.35 (18 October 2019) 19.1.34 (11 October 2019) 19.1.33 (4 October 2019) 19.1.32 (20 September 2019) 19.1.31 (5 September 2019) 19.1.30 (29 August 2019) 19.1.29 (20 August 2019) 19.1.28 (14 August 2019) 19.1.27 (2 August 2019) 19.1.26 (26 July 2019) 19.1.25 (19 July 2019) 19.1.24 (11 July 2019) 19.1.23 (4 July 2019) 19.1.22 (1 July 2019) 19.1.21 (21 June 2019) 19.1.20 (7 June 2019) 19.1.19 (4 June 2019) 19.1.18 (31 May 2019) 19.1.17 (16 May 2019) 19.1.15 (9 May 2019) 19.1.14 (6 May 2019) 19.1.13 (25 April 2019) 19.1.12 (19 April 2019) 19.1.11 (16 April 2019) 19.1.10 (11 April 2019) 19.1.9 (5 April 2019) 19.1.8 (28 March 2019) 19.1.6 (22 March 2019) 19.1.5 (14 March 2019) 19.1.4 (8 March 2019) 19.1.3 (4 March 2019) 19.1.2 (28 February 2019) 19.1.1 (22 February 2019) 18.1.50 (27 February 2019) 18.1.49 (21 February 2019) 18.1.48 (18 February 2019) 18.1.47 (15 February 2019) 18.1.45 (13 February 2019) 18.1.44 (4 February 2019) 18.1.43 (1 February 2019) 18.1.42 (15 January 2019) 18.1.41 (13 December 2018) 18.1.40 (7 December 2018) 18.1.39 (29 November 2018) 18.1.38 (19 November 2018) 18.1.37 (15 November 2018) 18.1.36 (9 November 2018) 18.1.35 (2 November 2018) 18.1.34 (25 October 2018) 18.1.33 (18 October 2018) 18.1.32 (12 October 2018) 18.1.31 (2 October 2018) 18.1.30 (25  September 2018) 18.1.29 (13 September 2018) 18.1.28 (6 September 2018) 18.1.27 (30 August 2018) 18.1.26 (27 August 2018) 18.1.25 (9 August 2018) 18.1.24 (3 August 2018) 18.1.23 (26 July 2018) 18.1.22 (20 July 2018) 18.1.21 (6 July 2018) 18.1.20 (28 June 2018) 18.1.19 (21 June 2018) 18.1.18 (15 June 2018) 18.1.17 (14 June 2018) 18.1.16 (31 May 2018) 18.1.15 (17 May 2018) 18.1.14 (10 May 2018) 18.1.13 (7 May 2018) 18.1.12 (4 May 2018) 18.1.11 (27 April 2018) 18.1.10 (16 April 2018) 18.1.9 (12 April 2018) 18.1.8 (5 April 2018) 18.1.7 (2 April 2018) 18.1.6 (29 March 2018) 18.1.5 (22 March 2018) 18.1.4 (15 March 2018) 18.1.3 (8 March 2018) 18.1.2 (2 March 2018) 18.1.1 (22 February 2018) 17.1.45 (19 February 2018) 17.1.44 (8 February 2018) 17.1.43 (1 February 2018) 17.1.42 (25 January 2018) 17.1.41 (19 January 2018) 17.1.40 (11 January 2018) 17.1.39 (8 January 2018) 17.1.38 (18 December 2017) 17.1.37 (6 December 2017) 17.1.36 (24 November 2017) 17.1.35 (17 November 2017) 17.1.34 (10 November 2017) 17.1.33 (1 November 2017) 17.1.32 (25 October 2017) 17.1.31 (20 October 2017) 17.1.30 (13 October 2017) 17.1.29 (6 October 2017) 17.1.28 (28 September 2017) 17.1.27 (22 September 2017) 17.1.26 (14 September 2017) 17.1.25 (31 August 2017) 17.1.24 (24 August 2017) 17.1.23 (11 August 2017) 17.1.22 (10 August 2017) 17.1.21 (3 August 2017) 17.1.20 (28 July 2017) 17.1.19 (27 July 2017) 17.1.18 (21 July 2017) 17.1.17 (12 July 2017) 17.1.16 (30 June 2017) 17.1.15 (16 June 2017) 17.1.14 (12 June 2017) 17.1.13 (31 May 2017) 17.1.12 (26 May 2017) 17.1.11 (19 May 2017) 17.1.10 (15 May 2017) 17.1.9 (2 May 2017) 17.1.8 (18 April 2017) 17.1.7 (10 April 2017) 17.1.6 (31 March 2017) 17.1.5 (23 March 2017) 17.1.4 (20 March 2017) 17.1.3 (14 March 2017) 17.1.2 (3 March 2017) 17.1.1 (24 February 2017) 16.1.37 (24 February 2017) 16.1.36 (10 February 2017) 16.1.35 (1 February 2017) 16.1.34 (13 January 2017) 16.1.33 (3 January 2017) 16.1.32 (22 December 2016) 16.1.31 (9 December 2016) 16.1.30 (24 November 2016) 16.1.29 (14 November 2016) 16.1.28 (2 November 2016) 16.1.27 (28 October 2016) 16.1.26 (17 October 2016) 16.1.25 (9 October 2016) 16.1.24 (22 September 2016) 16.1.23 (14 September 2016) 16.1.22 (12 September 2016) 16.1.21 (26 August 2016) 16.1.20 (12 August 2016) 16.1.19 (5 August 2016) 16.1.18 (25 July 2016) 16.1.17 (15 July 2016) 16.1.16 (8 July 2016) 16.1.15 (30 June 2016) 16.1.14 (17 June 2016) 16.1.13 (10 June 2016) 16.1.12 (1 June 2016) 16.1.11 (23 May 2016) 16.1.10 (16 May 2016) 16.1.9 (9 May 2016) 16.1.8 (30 April 2016) 16.1.7 (25 April 2016) 16.1.6 (18 April 2016) 16.1.5 (8 April 2016) 16.1.4 (30 March 2016) 16.1.3 (10 March 2016) 16.1.2 (3 March 2016) 16.1.1 (24 February 2016) 15.1.41 (10 February 2016) 15.1.40 (26 January 2016) 15.1.39 (14 January 2016) 15.1.38 (7 January 2016) 15.1.37 (23 December 2015) 15.1.36 (11 December 2015) 15.1.35 (4 December 2015) 15.1.34 (28 November 2015) 15.1.32 (18 November 2015) 15.1.31 (16 November 2015) 15.1.30 (2 November 2015) 15.1.29 (30 October 2015) 15.1.28 (16 October 2015) 15.1.27 (8 October 2015) 15.1.26 (28 September 2015) 15.1.25 (22 September 2015) 15.1.24 (18 September 2015) 15.1.23 (9 September 2015) 15.1.22 (2 September 2015) 15.1.21 (25 August 2015) 15.1.20 (20 August 2015) 15.1.19 (18 August 2015) 15.1.18 (10 August 2015) 15.1.17 (3 August 2015) 15.1.16 (27 July 2015) 15.1.15 (10 July 2015) 15.1.14 (6 July 2015) 15.1.13 (19 June 2015) 15.1.12 (5 June 2015) 15.1.11 (20 May 2015) 15.1.10 (15 May 2015) 15.1.9 (8 May 2015) 15.1.8 (24 April 2015) 15.1.7 (21 April 2015) 15.1.6 (6 April 2015) 15.1.5 (30 March 2015) 15.1.4 (23 March 2015) 15.1.3 (16 March 2015) 15.1.2 (6 March 2015) 15.1.1 (27 February 2015) 3.5.39 (26 February 2015) 3.5.38 (23 February 2015) 3.5.37 (13 February 2015) 3.5.36 (9 February 2015) 3.5.35 (30 January 2015) 3.5.34 (16 January 2015) 3.5.33 (12 January 2015) 3.5.32 (18 December 2014) 3.5.31 (5 December 2014) 3.5.30 (28 November 2014) 3.5.29 (21 November 2014) 3.5.28 (16 November 2014) 3.5.27 (7 November 2014) 3.5.26 (31 October 2014) 3.5.25 (23 October 2014) 3.5.24 (10 October 2014) 3.5.23 (2 October 2014) 3.5.22 (9 September 2014) 3.5.21 (3 September 2014) 3.5.20 (28 August 2014) 3.5.19 (21 August 2014) 3.5.18 (1 August 2014) 3.5.17 (25 July 2014) 3.5.16 (8 July 2014) 3.5.15 (8 July 2014) 3.5.14 (24 June 2014) 3.5.13 (13 June 2014) 3.5.12 (10 June 2014) 3.5.11 (30 May 2014) 3.5.10 (22 May 2014) 3.5.9 (12 May 2014) 3.5.8 (30 April 2014) 3.5.7 (22 April 2014) 3.5.6 (15 April 2014) 3.5.5 (1 April 2014) 3.5.4 (21 March 2014) 3.5.3 (14 March 2014) 3.5.2 (11 March 2014) 3.5.1 (7 March 2014) 3.4.28 (24 February 2014) 3.4.27 (29 January 2014) 3.4.26 (8 January 2014) 3.4.25 (18 December 2013) 3.4.24 (2 December 2013) 3.4.23 (22 November 2013) 3.4.22 (15 November 2013) 3.4.21 (14 November 2013) 3.4.20 (8 November 2013) 3.4.19 (1 November 2013) 3.4.18 (30 October 2013) 3.4.17 (29 October 2013) 3.4.16 (11 October 2013) 3.4.15 (4 October 2013) 3.4.14 (25 September 2013) 3.4.13 (20 September 2013) 3.4.12 (11 September 2013) 3.4.11 (9 September 2013) 3.4.10 (26 August 2013) 3.4.9 (14 August 2013) 3.4.8 (12 August 2013) 3.4.7 (5 August 2013) 3.4.6 (26 July 2013) 3.4.5 (22 July 2013) 3.4.4 (9 July 2013) 3.4.3 (21 June 2013) 3.4.2 (14 June 2013) 3.4.1 (7 June 2013) 3.3.8 (24 May 2013) 3.3.7 (17 May 2013) 3.3.6 (27 April 2013) 3.3.5 (22 April 2013) 3.3.4 (15 April 2013) 3.3.3 (2 April 2013) 3.3.2 (22 March 2013) 3.3.1 (15 March 2013) 3.2.21 (8 March 2013) 3.2.20 (6 March 2013) 3.2.19 (5 March 2013) 3.2.18 (4 March 2013) 3.2.17 (20 February 2013) 3.2.16 (11 February 2013) 3.2.15 (28 January 2013) 3.2.14 (23 January 2013) 3.2.13 (23 January 2013) 3.2.12 (22 January 2013) 3.2.11 (11 January 2013) 3.2.10 (24 December 2012) 3.2.9 (11 December 2012) 3.2.8 (4 December 2012) 3.2.8 (4 December 2012) 3.2.7 (3 December 2012) 3.2.6 (19 November 2012) 3.2.5 (6 November 2012) 3.2.4 (26 October 2012) 3.2.3 (17 October 2012) 3.2.2 (12 October 2012) 3.2.1 (11 October 2012) 3.1.16 (5 October 2012) 3.1.15 (3 October 2012) 3.1.14 (27 September 2012) 3.1.13 (18 September 2012) 3.1.12 (13 September 2012) 3.1.11 (7 September 2012) 3.1.10 (1 September 2012) 3.1.9 (13 August 2012) 3.1.8 (7 August 2012) 3.1.7 (2 August 2012) 3.1.6 (24 July 2012) 3.1.5 (11 July 2012) 3.1.4 (10 July 2012) 3.1.3 (2 July 2012) 3.1.2 (15 June 2012) 3.1.1 (6 June 2012) 3.0.10 (23 May 2012) 3.0.9 (16 May 2012) 3.0.8 (9 May 2012) 3.0.7.9 (29 April 2012) 3.0.7.8 (24 April 2012) 3.0.7.7 (13 April 2012) 3.0.7.6 (30 March 2012) 3.0.7.5 (16 March 2012) 3.0.7.4 (8 March 2012) 3.0.7.3 (5 March 2012) 3.0.7.2 (1 March 2012) 3.0.7.1 (29 February 2012) 3.0.7 (13 February 2012) 3.0.6.6 (23 January 2012) 3.0.6.4 (10 January 2012) 3.0.6.3 (27 December 2011) 3.0.6.2 (19 December 2011) 3.0.6.1 (12 December 2011) 3.0.6 (1 December 2011) 3.0.5.5 (21 November 2011) 3.0.5.4 (8 November 2011) 3.0.5.3 (17 October 2011) 3.0.5.2 (23 September 2011) 3.0.5 (10 September 2011) 3.0.4.4 (9 September 2011) 3.0.4.3 (29 August 2011) 3.0.4.2 (4 August 2011) 3.0.4.1 (3 August 2011) 3.0.4 (30 July 2011) 3.0.3.3 (22 July 2011) 3.0.3.2 (14 July 2011) 3.0.3.1 (8 July 2011) 3.0.3 (1 July 2011) 3.0.2.1 (27 June 2011) 3.0.2 (17 June 2011) 3.0.1.1 (3 June 2011) 3.0.1 (27 May 2011) 3.0.0 (13 May 2011) 2.9.9.2 (6 May 2011) 2.9.9.1 (4 May 2011) 2.9.9 (30 April 2011) 2.9.8 (15 April 2011) 2.9.7.1 (1 April 2011) 2.9.7 (25 March 2011) 2.9.6.9 (1 March 2011) 2.9.6.8 (26 February 2011) 2.9.6.7 (31 January 2011) 2.9.6.6 (27 January 2011) 2.9.6.5 (7 January 2011) 2.9.6.4 (18 December 2010) 2.9.6.3 (28 November 2010) 2.9.6.2 (23 November 2010) 2.9.6.0 (17 November 2010) 2.9.5.9 (12 November 2010) 2.9.5.8 (5 November 2010) 2.9.5.7 (29 October 2010) 2.9.5.6 (26 October 2010) 2.9.5.5 (20 October 2010) 2.9.5.4 (11 October 2010) 2.9.5.3 (4 October 2010) 2.9.5.2 (1 October 2010) 2.9.5.1 (27 September 2010) 2.9.4 (14 September 2010) 2.9.3 (25 May 2010) 2.9.2 (7 May 2010) 2.8.9 (19 February 2010) 2.8.6 (22 December 2009) 2.8.5 (4 December 2009) 2.8.4 (3 December 2009) 2.8.3 (11 November 2009) 2.8.2 (10 November 2009) 2.8.0 (29 October 2009) 2.7.0 (23 September 2009) 2.6.0 (24 July 2009) 2.5.0 (16 May 2009) 2.4.0 (30 March 2009) 2.3.0 (27 January 2009) 2.0.0 (1 September 2008) 1.5.0 (18 May 2008) 1.4.0 (12 March 2008) How to Report an Issue? How to generate a thread dump from within DVT Eclipse? How to generate a thread dump from outside DVT Eclipse? How to generate a thread dump for Verissimo & Specador running in batch mode? Legal Notices Third Party Licenses Installation Checklist Back to top",
    "section_path": [],
    "tokens": 4756,
    "source": "scraped"
  },
  {
    "id": "67b11041-2935-4e0f-a939-d5dbb454bcb4",
    "title": "Smart Log | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/external-tools-integration/smart-log.html",
    "content": "Smart Log | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Smart Log For any invocation you can either use predefined filter sets for specific tools, or define your own filters and style maps in order to view the simulation output like the one below. See also Smart Log - Filters Smart Log - Hyperlinks Smart Log - Styles Run Configurations Smart Log - Filters To define a new filter for a DVT Generic run configuration go to the Filters Tab, click New\u00e2\u0080\u00a6 and specify filter parameters. The main filter parameters are: Name - The name of the filter Severity - The severity of the filter. Pattern - The filter pattern.  Use ${file} to indicate a file hyper-link, and ${line} to indicate the line to jump to.  Use (?<TAG_NAME>) to tag a group that will be used to randomly or explicitly assign a style (green bold for example - see Smart Log - Styles ). In the Filters Tab you can also set other parameters such as: The maximum number of characters per line ( 1 ) The maximum number of consecutive lines ( 2 ) Whether links should jump to resources from the current working set ( 5 ) You can browse through predefined filters to see more examples ( 3 ). You can also add a filter pattern for your console title ( 4 ). This should contain capturing groups whose contents will be appended to the console title. For example the pattern in the image above: \u00e2\u0080\u009cDVT_CONSOLE_TITLEs+(w+)\u00e2\u0080\u009d will append  to the console title when it will match a text like \u00e2\u0080\u009cDVT_CONSOLE_TITLE my_title\u00e2\u0080\u009d in the console output. Smart Log - Hyperlinks Using the predefined filters enables you access to hyperlinks for files and also for some error codes of certain simulators. By clicking on a hyperlinked error code a dialog pops-up with the explanation of that error provided by the simulator help tool. DVT supports verror for Questa and nchelp for IUS. You can customize the name of these tools by setting the following environment variables: DVT_VERROR_TOOL_NAME and DVT_NCHELP_TOOL_NAME You can further customize this feature by creating your own regular expression for a custom hyperlink that launches a defined launch configuration. Use ${cmd:run_configuration:regular_expression} to define these custom hyperlinks in your filter pattern, where run_configuration is the name of the launch configuration that is going to be launched when clicking on the hyperlink and regular_expression is the regular expression whose matched result will be hyperlinked. For example when running a launch configuration that outputs the location of a log file like this one: in order to hyperlink the location of the file a pattern needs to be defined: To summarize the content of the log file and display just the number of errors, warnings and infos in a new console: the \u00e2\u0080\u009cSummarize_log\u00e2\u0080\u009d launch configuration is defined with the $DVT_HYPERLINK_COMMAND_CAPTURING_GROUP_0 environment variable Smart Log - Styles Assuming the filter MyTrace has a pattern Trace  (?<AGENT_KIND>[a-zA-Z_0-9]+) (?<INSTANCE>[a-zA-Z_0-9]+).* that contains 2 groups tagged <AGENT_KIND> and <INSTANCE>, DVT will randomly assign a color for each unique combination (AGENT_KIND_match, INSTANCE_match). You\u00e2\u0080\u0099ll get different colors for: Master M1 (<AGENT_KIND> group matched \u00e2\u0080\u009cMaster\u00e2\u0080\u009d and <INSTANCE> matched \u00e2\u0080\u009cM1\u00e2\u0080\u009d) Master M2 (<AGENT_KIND> group matched \u00e2\u0080\u009cMaster\u00e2\u0080\u009d and <INSTANCE> matched \u00e2\u0080\u009cM2\u00e2\u0080\u009d) Slave S1 (<AGENT_KIND> group matched \u00e2\u0080\u009cSlave\u00e2\u0080\u009d and <INSTANCE> matched \u00e2\u0080\u009cS1\u00e2\u0080\u009d) Slave S2 (<AGENT_KIND> group matched \u00e2\u0080\u009cSlave\u00e2\u0080\u009d and <INSTANCE> matched \u00e2\u0080\u009cS2\u00e2\u0080\u009d) You can manually assign colors by editing the .dvt/log_styles.xml file: You can easily share log styles using Managed Settings . <?xml version=\"1.0\" encoding=\"UTF-8\"?> <section name=\"attributes\"> <item key=\"version\" value=\"1\"/> <list key=\"log_styles\"> <item value=\"PATTERN_NAME=MyTrace, AGENT_KIND=Master, INSTANCE=M1, COLOR=#FF8000, FONT_STYLE=BOLD, BORDER_STYLE=NONE\"/> <item value=\"PATTERN_NAME=MyTrace, AGENT_KIND=Master, INSTANCE=M2, COLOR=#008000, FONT_STYLE=BOLD, BORDER_STYLE=NONE\"/> <item value=\"PATTERN_NAME=MyTrace, AGENT_KIND=Slave, INSTANCE=S1, COLOR=#800080, FONT_STYLE=BOLD, BORDER_STYLE=NONE\"/> <item value=\"PATTERN_NAME=MyTrace, AGENT_KIND=Slave, INSTANCE=S2, COLOR=#8080FF, FONT_STYLE=BOLD, BORDER_STYLE=NONE\"/> </list> </section> For example the first line means \u00e2\u0080\u009cIf pattern MyTrace matched and AGENT_KIND is \u00e2\u0080\u0098Master\u00e2\u0080\u0099 and INSTANCE is \u00e2\u0080\u0098M1\u00e2\u0080\u0099 set color to \u00e2\u0080\u00a6\u00e2\u0080\u009d. You can use regular expressions, for example AGENT_KIND=M*. You can specify the COLOR , the FONT_STYLE (BOLD or ITALIC), and the BORDER_STYLE (DOT or SOLID or NONE). Note If you want to also use the random color palette available for the predefined filters, you should add the following item in the .dvt/log_styles.xml file: Run Configurations External Builders On this page Smart Log - Filters Smart Log - Hyperlinks Smart Log - Styles Back to top",
    "section_path": [],
    "tokens": 729,
    "source": "scraped"
  },
  {
    "id": "b2499dd2-f1ed-468c-825d-2b5572afd5fb",
    "title": "Macros and Quick Macros Views | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/macros-support/macros-and-quick-macros-views.html",
    "content": "Macros and Quick Macros Views | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Macros and Quick Macros Views The Macros View and Quick Macros View present all the macros in the project and allow you to quickly locate a macro definition in code. Macro Expansion Reminders (TODO Markers) Back to top",
    "section_path": [],
    "tokens": 73,
    "source": "scraped"
  },
  {
    "id": "b6e29f05-5bed-4e22-ad28-2c8d0d192451",
    "title": "How can I open a file in DVT from the terminal? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/how-can-i-open-a-file-in-dvt-from-the-terminal.html",
    "content": "How can I open a file in DVT from the terminal? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide How can I open a file in DVT from the terminal? You can use the Command Line Interface like this: dvt_cli.sh -workspace ~/dvt_workspace openFile $( readlink -f my/file.sv ) The command can be shortened by defining this alias in your ~/.cshrc : alias dvtopen 'dvt_cli.sh -workspace ~/dvt_workspace openFile `readlink -f \\!*`' or by defining this function in your ~/.bashrc : dvtopen () { dvt_cli.sh -workspace ~/dvt_workspace openFile $( readlink -f $1 ) ; } Then the command gets much shorter: dvtopen my/file.sv How can I see if a file is read-only? How can I open a file in DVT from Questa? Back to top",
    "section_path": [],
    "tokens": 145,
    "source": "scraped"
  },
  {
    "id": "8cf3a104-168c-4ed8-9a83-4a7c1f1017ec",
    "title": "Autoinstance Using Drag and Drop | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/module-automatic-instantiation/autoinstance-using-drag-and-drop.html",
    "content": "Autoinstance Using Drag and Drop | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Autoinstance Using Drag and Drop Design elements can be auto instantiated by dragging them from the Types View into the editor. You can customize what gets generated from menu Window \u00e2\u0080\u00a3 Preferences \u00e2\u0080\u00a3 DVT \u00e2\u0080\u00a3 SystemVerilog \u00e2\u0080\u00a3 Editor \u00e2\u0080\u00a3 Content Assist in the Auto-instantiation section. Autoinstance Using Autocomplete Semantic Search Back to top",
    "section_path": [],
    "tokens": 88,
    "source": "scraped"
  },
  {
    "id": "fddf1cae-a195-491f-a74a-a910b07d95bc",
    "title": "Install DVT Using a pre-packed Distribution | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/installation/distribution.html",
    "content": "Install DVT Using a pre-packed Distribution | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Install DVT Using a pre-packed Distribution The recommended way of installing DVT is by using a pre-packed distribution available on the site under the Download page. For Linux distributions you can choose one of the 4 distribution flavors depending on the GTK version installed in your OS: Eclipse 4.22 - requires GTK+ 3.22.0 Eclipse 4.19 - requires GTK+ 3.22.0 Eclipse 4.11 - requires GTK+ 3.10.0 Eclipse 4.7 - requires GTK+ 2.24.0 or GTK+ 3.0.0 Eclipse 4.6 - requires GTK+ 2.18.0 or GTK+ 3.0.0 Installation Checklist Install DVT Using the Update Site Back to top",
    "section_path": [],
    "tokens": 130,
    "source": "scraped"
  },
  {
    "id": "d11decb0-d8e0-4381-9112-2ad848954eb2",
    "title": "Add Port to Module from Selected Field | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/add-port-to-module-from-selected-field.html",
    "content": "Add Port to Module from Selected Field | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Add Port to Module from Selected Field You can use the Add Port to Module to add a selected field as a port easy and fast. Right click field wire1 in module A . Select Refactor > Add Port . You can optionally change the new generated port name. Select a direction for the port and press Preview or OK . Connect Instances Across the Design Hierarchy Add New Port to Module Back to top",
    "section_path": [],
    "tokens": 112,
    "source": "scraped"
  },
  {
    "id": "74c6cbdc-0210-472c-a53d-71051474b61f",
    "title": "Compile Waivers | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/compile-waivers.html",
    "content": "Compile Waivers | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Compile Waivers You can use waivers to change the severity (promote/demote) or disable the problems reported by DVT during compilation. Promote Warning -> Error Demote Error -> Warning Disable Hide Restore Restore a waived problem to its default (originally reported) severity Waivers are applied in order.\nMultiple waivers may be applied to the same problem. Waivers are defined per project, in the .dvt/waivers.xml file. For more flexibility, on top of the project level compilation waivers, DVT allows you to use compilation waiver files specific to a build configuration. To do that, simply add in the build configuration file the +dvt_compile_waivers_file+ directive followed by the path to the desired file. To quickly create a waivers file click on the Edit waivers button in the Problems View . The .dvt/waivers.xml is created with a default content and opened. You can easily create your own waivers from the default generated ones. In the waivers editor you can use autocomplete for tags, attributes and attribute values. To quickly create a new waiver, in the Problems View right click on any problem reported by DVT and waive it. DVT proposes some default values for the waiver file, description, path and message. You can easily change them to fine-tune the waiver. Another easy way to create a new waiver right from the editor is by using Waive Compilation Problems . You can include other waiver files using: < include path = \"/path/to/included_waivers.xml\" /> The path can be absolute or relative to the project root, and can use environment variables. Compile Waivers Examples Use Case Solution I want to hide all problems from a library that I do not control. < waiver name = \"Disable all from library folder.\" severity = \"DISABLED\" > < match path = \"/path/to/library/*\" /> </ waiver > I want to hide some errors that I don\u00e2\u0080\u0099t care about. < waiver name = \"Disable all that match a specific message pattern.\" severity = \"DISABLED\" > < match message = \"*some message pattern*\" /> </ waiver > I want to turn NON_STANDARD warnings into errors. < waiver name = \"Promote NON_STANDARD warnings to errors.\" severity = \"ERROR\" > < match message = \"NON_STANDARD*\" /> </ waiver > I want to see only the problems reported on files in a specific directory. Create a waiver to disable all problems: < waiver name = \"Disable all\" severity = \"DISABLED\" > < match path = \"*\" /> </ waiver > After it, create a waiver to restore the severity of the problems inside a specific path: < waiver name = \"Restore my problems\" severity = \"DEFAULT\" > < match path = \"/my/path\" /> </ waiver > I want to hide some DVT false alarms until the issue causing them is fixed. Use a message based and/or path based waiver. Each problem message is in the form: <CHECK_ID>: <Failure Details> or, for Non-top files : _<CHECK_ID>: <Failure Details> See Semantic Checks for a complete list of all checks and their identifiers. This allows you to change the severity by check id using a waiver like: <waiver name=\u00e2\u0080\u009dDisable all <CHECK_ID>\u00e2\u0080\u009d severity=\u00e2\u0080\u009dDISABLED\u00e2\u0080\u009d> Compile Waivers File Syntax (XML) <!-- XML file header; required. --> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE waivers PUBLIC \"-//DVT//waivers\" \"waivers.dtd\" > <!-- Root tag; required. Version attribute is required. The latest syntax version, illustrated by this example, is version 1. --> <waivers version= \"1\" > <!-- You can include waivers from other waiver files. The syntax of the included files is the same as the one presented below. You may use environment variables in the path to the included waiver files. You can use either an absolute path or a relative path. If no file matches the path relative to the project's location, DVT will try to resolve it relative to the folder containing the including file. --> <include path= \"$COMMON/path/to/included_waivers.xml\" /> <!-- The waiver tag must specify the NEW severity of the problems waived by this waiver; it can be one of ERROR, WARNING, DISABLED or DEFAULT. --> <waiver name= \"Optional short name of the waiver\" severity= \"DISABLED\" > <description> An optional verbose description of the waiver. </description> <!-- Each waiver must contain at least one match tag. Each match tag can specify any combination of the following attributes: message pattern, path pattern, default-severity. Any omitted attribute is implicitly matched. A match tag without any attributes will match all problems. A match tag matches a problem if ALL specified patterns and the default-severity match. The waiver will waive a problem if ANY of the match tags matches. NOTE: path pattern is matched against the problem's full path (NOT the project relative path) default-severity is matched against the problem's initial reported severity patterns may contain * or ? wildcards --> <match message= \"pattern to match against the problem's message\" path= \"/pattern/to/match/against/the/problems/absolute/path\" /> <match message= \"*message pattern*\" path= \"/path/pattern*\" /> <match message= \"*only by message*\" /> <match path= \"/only/by/path*\" /> <match path= \"/all/warnings/in/path/*\" default-severity= \"WARNING\" /> </waiver> <!-- Further example waivers --> <waiver name= \"Disable by message\" severity= \"DISABLED\" > <description> This waiver disables all problems containing 'JUST_A_FOO_PROBLEM' inside their message. </description> <match message= \"*JUST_A_FOO_PROBLEM*\" /> </waiver> <waiver name= \"Demote by path\" severity= \"WARNING\" > <description> This waiver turns into warnings all problems reported under '/path/to/foo' </description> <match path= \"/path/to/foo/*\" /> </waiver> <waiver name= \"Promote by path OR message\" severity= \"ERROR\" > <description> This waiver turns into errors all problems that contain 'JUST_A_FOO_PROBLEM' inside their message OR were reported under '/path/to/foo'. </description> <match message= \"*JUST_A_FOO_PROBLEM*\" /> <match path= \"/path/to/foo/*\" /> </waiver> <waiver name= \"Disable by path AND message\" severity= \"DISABLED\" > <description> This waiver disables all problems that contain 'JUST_A_FOO_PROBLEM' inside their message AND were reported under '/path/to/foo'. </description> <match message= \"*JUST_A_FOO_PROBLEM*\" path= \"/path/to/foo/*\" /> </waiver> </waivers> Note Backslashes \\ are always treated as path separators, regardless of the OS. Therefore, you cannot use \\? and \\* to escape wildcards. Compile Checks Semantic Checks On this page Compile Waivers Examples Compile Waivers File Syntax (XML) Back to top",
    "section_path": [],
    "tokens": 1020,
    "source": "scraped"
  },
  {
    "id": "c5b2f548-e563-4fef-b1f3-744689f5674d",
    "title": "Workspace in use, cannot launch eclipse\u00e2\u0080\u00a6 | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/workspace-in-use-cannot-launch-eclipse.html",
    "content": "Workspace in use, cannot launch eclipse\u00e2\u0080\u00a6 | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Workspace in use, cannot launch eclipse\u00e2\u0080\u00a6 Problem : I\u00e2\u0080\u0099m unable to select an existing workspace after my eclipse program that was accessing it was not shutdown properly.\nI get a Workspace in Use error when there are clearly no other eclipse instances running on my machine. Solution : If you are sure there is no eclipse looking at your workspace (not even another user), then you must remove the lock file located in the workspace at path_to_workspace/.metadata/.lock . On Windows, if you cannot delete this file (because another process is using it), then close all eclipse IDE sessions, do Ctrl + Alt + Delete to bring up Windows Task Manager, select Processes page, and delete javaw.exe . Are there any backup files in Eclipse? Locking is not possible in the directory\u00e2\u0080\u00a6 Back to top",
    "section_path": [],
    "tokens": 170,
    "source": "scraped"
  },
  {
    "id": "5e07202b-bf1c-4c8e-ab24-1380a93486ca",
    "title": "Precompilation Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/application-notes/precompilation.html",
    "content": "Precompilation Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Precompilation Support To speed up the full build of your project you can load a precompiled section of code (also referred to as a precompiled library, precompiled database fragment or simply precompiled db). First you need to figure out which section of the project should be precompiled, usually libraries or IPs which rarely get modified, and refactor the project\u00e2\u0080\u0099s original build configuration in two files: a precompiled_save.build config file to save the database, usually comprising of one or more +dvt_init sections a precompiled_load.build config file to load the database and compile other files on top of it For clarity it is recommended to use suggestive filenames, however there is no hard constraint. Next you need to perform a build using the precompiled_save.build config, either from the IDE or in batch mode using dvt_build.sh . Once the precompiled database is saved, switch to the precompiled_load.build config and rebuild.\nYou will get the same compilation result as with the original build config, however with a significantly faster full build. The precompiled_save.build config file must specify the +dvt_precompiled_db_save+<path> directive and the database location: + dvt_precompiled_db_save +/ path / to / precompiled / database / location ... build configuration directives ... The precompiled_load.build config file must start with a +dvt_init_precompiled_db_load directive and specify the database location: + dvt_init_precompiled_db_load + dvt_precompiled_db_location +/ path / to / precompiled / database / location The +dvt_init_precompiled_db_load is a special kind of invocation and only precompile-related configuration directives are allowed inside it.\nFiles compiled on top of the precompiled database must be specified in subsequent +dvt_init sections. You must rebuild the precompiled database when: DVT version changes Precompiled source files change Database files get corrupted Note that DVT triggers a notification when changes are detected in precompiled source code, based on MD5 checksums. To turn off this change detection mechanism, use +dvt_precompiled_db_disable_md5_change_detection when loading a precompiled database: + dvt_init_precompiled_db_load + dvt_precompiled_db_location +/ path / to / precompiled / database / location + dvt_precompiled_db_disable_md5_change_detection When the precompiled database needs to be rebuilt, you can either do it from the GUI or in batch mode using dvt_build.sh .\nThe batch mode command can be specified inside the +dvt_init_precompiled_db_load section, and will be automatically called in case load fails, for example: + dvt_init_precompiled_db_load + dvt_precompiled_db_location +/ path / to / precompiled / database / location + dvt_precompiled_db_build_cmd + \"$DVT_HOME/bin/dvt_build.sh -lang vlog -cmd /path/to/precompile_save.build\" Tip When precompiled databases need to be rebuilt, multiple +dvt_precompiled_db_build_cmd+<cmd> can be run in parallel. You can configure the maximum number of precompiled database rebuild commands that can run simultaneously using +dvt_precompiled_db_build_cmd_max_jobs . Precompiled databases created using +dvt_precompiled_db_save can be shared across the team. Simply point the +dvt_precompiled_db_location to the precompiled database location.\nPrecompiled source files might be located in a user-specific path. For DVT to properly display precompiled sources, define the save to load path re-mapping using dvt_precompiled_db_src_map . + dvt_init_precompiled_db_load + dvt_precompiled_db_location +/ path / to / precompiled / database / location + dvt_precompiled_db_src_map +/ save / src / path =/ load / src / path / You can load precompiled libraries even when source files are not available. All DVT features will work as expected, the only downside being that you cannot open the precompiled source files. Auto precompiled databases You can instruct DVT to automatically manage precompiled databases. The build configuration is partitioned into multiple compilation fragments under the hood, one for each +dvt_init section. Each fragment gets saved in a separate precompiled database. During the build process, DVT identifies which fragments need to be rebuilt and automatically keeps them up-to-date. To enable auto precompiled databases use +dvt_precompiled_db_auto followed by the database location: + dvt_precompiled_db_auto +/ path / to / precompiled / database / location ... + dvt_init sections ... There might be invocations which you do not want to auto-precompile, for example those containing frequently modified files. Use one of the following directives: +dvt_precompiled_db_auto_exclude_library+<libname1>[+<libname2>+\u00e2\u0080\u00a6] : this is a global directive which disables the precompilation for all invocations under a particular -work library +dvt_precompiled_db_auto_exclude : this directive excludes the invocation under which it resides from being precompiled Tip All precompiled files are marked with a decorator in Compile Order View. This table can help you decide which approach better suits your needs +dvt_init_precompiled_db_load +dvt_precompiled_db_auto Build configuration refactoring into save and load configurations is required. Build configuration can be used as-is (as long as it has multiple +dvt_init sections). Precompiled files cannot be edited. Precompiled files can be edited. You must handle precompiled database updates, for example when source code changes / across tool versions. DVT automatically detects changes in the precompiled files and updates the precompiled databases. Precompiled databases can be shared across the team. Precompiled databases cannot be shared across the team. To get the best speed-up, it is recommended to: explicitly configure precompilation for sections of code that never change use automatic precompilation for +dvt_init sections which rarely get changed exclude the invocations you are actively working on from being precompiled +dvt_precompiled_db_auto+/path/to/auto/precompiled/database/location +dvt_precompiled_db_auto_exclude_library+auto_precompiled_database1 +dvt_init_precompiled_db_load // This precompiled database is not automatically managed +dvt_precompiled_db_location+/path/to/precompiled/database/location1 +dvt_init_precompiled_db_load // This precompiled database is not automatically managed +dvt_precompiled_db_location+/path/to/precompiled/database/location2 +dvt_init // This invocation is excluded from auto precompilation -work auto_precompiled_database1 ... build configuration directives \u00e2\u0080\u00a6 +dvt_init // This invocation is excluded from auto precompilation -work auto_precompiled_database1 ... build configuration directives ... +dvt_init -work auto_precompiled_database2 ... build configuration directives ... +dvt_init // This invocation is excluded from auto precompilation -work auto_precompiled_database2 +dvt_precompiled_db_auto_exclude ... build configuration directives ... +dvt_init -work auto_precompiled_database3 ... build configuration directives ... Compilation Speed-up Encrypted VIP Support On this page Auto precompiled databases Back to top",
    "section_path": [],
    "tokens": 951,
    "source": "scraped"
  },
  {
    "id": "70a6e944-0bd9-4b1e-8b05-ff66c83af645",
    "title": "CamelCase | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/camelcase.html",
    "content": "CamelCase | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide CamelCase No filter. Filter: fsc All elements that contain the character sequence fsc . Filter: f_s_c All elements that contain consecutive words starting with f, s, c . Words are character sequences delimited by underscores or by capital letters. Filter: FSC All elements that contain words starting with or containing characters in this order f, s, c . Quick Search in Views Simple Regex Back to top",
    "section_path": [],
    "tokens": 98,
    "source": "scraped"
  },
  {
    "id": "5eaa0c87-0766-4945-a089-33623ac0fdb1",
    "title": "Search Port in Verification Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/search-port-in-verification-hierarchy.html",
    "content": "Search Port in Verification Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Search Port in Verification Hierarchy You can search for a specific port in the verification hierarchy by using the Verification Hierarchy View . Press the Select Top button and pick one of the available top units/components. Make the ports panel visible by pressing the Show/Hide Ports button. In the instances filter text box, type the name of the port you are looking for, preceded by the dot \u00e2\u0080\u0098.\u00e2\u0080\u0099 character. The instances that contain the port are bolded. The ports are also bolded and promoted to the top of the ports pane. Search Port in Design Hierarchy Search all UVM Phase Overrides Back to top",
    "section_path": [],
    "tokens": 139,
    "source": "scraped"
  },
  {
    "id": "43dc9963-e1b2-4de8-90cd-0cc27fbae32c",
    "title": "Project Natures | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/getting-started/workspace/project-natures.html",
    "content": "Project Natures | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Project Natures In Eclipse a project can have zero to many project natures . Various plug-ins provide functionality for a project if it is tagged with a specific nature. For example DVT builds a project only if it has one of the natures it knows about, for example Verilog, VHDL or e Language . Project natures are stored in the project definition, that is in the .project file. To turn on/off a specific nature for a project, select the project in Navigator and choose Change DVT Nature from the right click menu. What is a Project Workspace and Workbench Back to top",
    "section_path": [],
    "tokens": 134,
    "source": "scraped"
  },
  {
    "id": "464337c0-a187-4564-ae63-994da1fe9d6d",
    "title": "Rename Port Across the Design Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/rename-port-across-the-design-hierarchy.html",
    "content": "Rename Port Across the Design Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Rename Port Across the Design Hierarchy When you want to uniformly name a port which is directly propagated across several levels of the design, you can use Rename across the Design Hierarchy refactoring. If the port is directly connected to a sub instance port, then the sub instance port will also be renamed, and so on recursively across the whole sub design hierarchy tree. If the port is directly connected to a parent instance port, then the parent instance port will also be renamed only if it is part of the current editor instance Design Breadcrumb path, and so on recursively up the design top. For every port, both the definition and all its references are renamed. Place the editor cursor on the port, right click and select Refactor > Rename Port Across the Design Hierarchy . A dialog pops-up and allows you to configure: the new port name whether you want to perform the refactoring only in parent instances , only in sub-instances or both the maximum number of design hierarchy levels across which the renaming will be done; instances situated in the design hierarchy more than the specified number of levels above or below the starting point will not be affected Note That the full hierarchical path to the refactoring starting port is highlighted in yellow. You can preview the changes in a Schematic Diagrams . The diagram shows all the instances, ports and port connections affected by the refactoring. Instances reached from the refactoring starting point have green background Instances situated elsewhere in the design but affected by the refactoring have blue background Instances where name conflicts are detected have an orange border , and all the conflicting ports or signals are also shown Note Naming conflicts can appear when: one of the affected instances already has a port or signal that has the new name several ports of the same module would be renamed When done previewing, click the Resume button on the Diagram Editor top bar to return to the refactoring dialog. You can also preview the changes using a source code diff by clicking the Preview > button. Click OK to perform the refactoring. Rename Refactoring Rename File Back to top",
    "section_path": [],
    "tokens": 403,
    "source": "scraped"
  },
  {
    "id": "7262b3df-1430-4460-ada7-2bf1e4df8406",
    "title": "Whitespace | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/code-formatting/whitespace.html",
    "content": "Whitespace | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Whitespace Trim end of line whitespace (ro.amiq.vlogdt/format.whitespace.trim_end_of_line) - When enabled, end of line whitespace is deleted. Before After Trim Whitespace Lines (ro.amiq.vlogdt/format.whitespace.trim_whitespace_line) - When enabled, whitespace line are deleted. Before After Compact whitespace groups (ro.amiq.vlogdt/format.whitespace.compact) - When enabled, consecutive whitespace characters are trimmed to a single space character. It does not affect indentation, that is the whitespace at the beginning of a line is not affected by this option. Before After Compact consecutive empty lines (ro.amiq.vlogdt/format.whitespace.compact_consecutive_empty_lines) - When enabled, consecutive empty lines are compacted into groups of lines whose number is less than or equal to a specified value. It does not affect the empty lines inside multi-line comments. Maximum number of consecutive empty lines (ro.amiq.vlogdt/format.whitespace.maximum_nof_consecutive_empty_lines) - Consecutive empty lines are compacted when their number exceeds this value. Before After (Preference is set to \u00e2\u0080\u009c1\u00e2\u0080\u009d) Add whitespace before (ro.amiq.vlogdt/format.whitespace.add_before) - Space separated list of tokens to add whitespace before. Before After (\u00e2\u0080\u009c=\u00e2\u0080\u009d token) Add whitespace after (ro.amiq.vlogdt/format.whitespace.add_after) - Space separated list of tokens to add whitespace after. Before After (\u00e2\u0080\u009c=\u00e2\u0080\u009d token) Remove new line before (ro.amiq.vlogdt/format.whitespace.remove_nl_before) - Space separated list of tokens to remove new lines before. Before After (\u00e2\u0080\u009c=\u00e2\u0080\u009d token) Remove new line after (ro.amiq.vlogdt/format.whitespace.remove_nl_after) - Space separated list of tokens to remove new lines after. Before After (\u00e2\u0080\u009c=\u00e2\u0080\u009d token) Code Formatting Indentation Back to top",
    "section_path": [],
    "tokens": 248,
    "source": "scraped"
  },
  {
    "id": "13aab992-1326-410b-a9cf-03f9facb6d57",
    "title": "VMM Support | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/vmm-support/index.html",
    "content": "VMM Support | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide VMM Support VMM Smart Log Quick VMM Documentation Access VMM Templates OVM to UVM Migration VMM Smart Log Back to top",
    "section_path": [],
    "tokens": 53,
    "source": "scraped"
  },
  {
    "id": "114ec7eb-a075-462c-a5ef-baa56181549e",
    "title": "Can I perform dos2unix or unix2dos from DVT? | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/q-n-a/common/can-i-perform-dos2unix-or-unix2dos-from-dvt.html",
    "content": "Can I perform dos2unix or unix2dos from DVT? | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Can I perform dos2unix or unix2dos from DVT? Yes, you can access this built-in functionality from File \u00e2\u0080\u00a3 Convert line delimiters \u00e2\u0080\u00a3 <desired format> . Depending on the focus, the conversion is performed either for the current editor or for the files selected in the navigator view. Can I use vi/vim along with DVT? How can I configure Eclipse to use a local CVS repository? Back to top",
    "section_path": [],
    "tokens": 106,
    "source": "scraped"
  },
  {
    "id": "81184b4f-58eb-4bce-96dd-d63d20062d2f",
    "title": "Connect Instances Across the Design Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/refactoring/connect-instances-across-the-design-hierarchy.html",
    "content": "Connect Instances Across the Design Hierarchy | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Connect Instances Across the Design Hierarchy Connect Instances Using New Ports In order to connect two module instances using new ports, you must specify the output instance (the signal source) and the input instance (the signal destination). New ports will be created across the design hierarchy as needed, in order to propagate the signal. Press the Select Top button and pick one of the available design tops. Right click on an instance and select Connect Output from the context menu. The output instance is presented in the Refactoring Connect View Output textbox: Select another instance, right click and Connect Input . The input instance is presented in the Refactoring Connect View Input textbox along the previous set output instance: Press Compute Changes button. You can choose Diagram Preview to see the design affected by the refactoring operation or Code Preview to see the source code changes. Press the Connect button in order to perform the changes. Note You can undo the whole refactoring operation using the application menu Edit -> Undo . Note You can select the output/input instances from editor right click menu Refactoring -> Connect Output / Connect Input . Connect Instances  Using Existing Ports In order to connect two module instances using existing ports, you must specify the output port (the signal source) and the input port (the signal destination). New ports will be created across the design hierarchy as needed, in order to propagate the signal. Press the Select Top button and pick one of the available design tops. Press the Show/Hide Ports button to see the ports of the selected instance, if needed. Select an instance using left click and a port using right click Connect Output Port . The output instance and port are presented in the Refactoring Connect View Output textbox: Select another instance using left click and a port using right click Connect Input Port . The input instance and port are presented in the Refactoring Connect View Input textbox along the previous set instance and port: The rest of the steps are the same as connecting instances using new ports. More details Connect Instances Using New Ports . Note The swap between output instance and input instance doesn\u00e2\u0080\u0099t work for directional ports (input or output). Structural Changes Preview Diagram Any change to a module or entity definition, like new ports or new signals being added, affects all its instances. Before proceeding to source code changes, you can preview the design structural changes. Terminology: output instance is the module instance where the connection starts. It outputs the signal that will be connected. output module is the module being instantiated as an output instance . input instance is the module instance where the connection ends. It inputs the signal that will be connected. input module is the module being instantiated as an input instance . closest parent instance is the parent instance through which a signal is routed to connect the ports leading from the output instance to the input instance across the design hierarchy. No ports will be added to the closest parent instance . The closest parent module is the module corresponding to the closest parent instance . relevant modules are the modules that will change by adding new ports and/or new signals. relevant instances are instances of relevant modules . Ports are added only to modules that are instantiated on the paths leading from the output module instance and the input module instance to the closest parent instance . Ports are added to the output module or the input module only if the connection is not using an existing port. All relevant instances are colored in green in the preview diagram.\nAll the instances that will not change are colored in blue. They are hidden by default but the Show Side Effects button from the left side of the diagram can be used for showing them. Refactoring Connect View In the design hierarchy you can select the instances that you want to connect. You can Swap the ports direction. The output instance path . The port segment is presented only if you use an existing port. The input instance path . The port segment is presented only if you use an existing port. The output port / input port / signal name used for connect operation. Press Compute Changes to start the refactoring operation. Press Diagram Preview / Code Preview to visualize the structural/source code changes. Press Apply changes to finish the refactoring operation. Press Close to hide the Refactoring Connect View . (Optional) Press Reset to return to initial state of the view. Change Method Signature Add Port to Module from Selected Field On this page Connect Instances Using New Ports Connect Instances  Using Existing Ports Structural Changes Preview Diagram Refactoring Connect View Back to top",
    "section_path": [],
    "tokens": 833,
    "source": "scraped"
  },
  {
    "id": "6d516f30-b61a-465e-adae-8f85c4fb5a5a",
    "title": "Emulating compiler invocations | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/build-config/emulating-compiler-invocations.html",
    "content": "Emulating compiler invocations | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Emulating compiler invocations Sometimes a design is compiled across multiple invocations. For example, environment variables or preprocessing directives may change their values between invocations, or sources may be compiled into different libraries. The +dvt_init+<mode> directive is equivalent with a new compiler invocation, where <mode> represents the compiler compatibility mode . The directive resets the DVT builder to the mode specific default state and clears all the previous directives (preprocessing defines, system variables, libraries, etc.). You may specify any number of +dvt_init directives inside a build file. The compatibility mode is enforced until the next +dvt_init directive. Even if there is no +dvt_init directive specified, there is always an initial reset equivalent to +dvt_init+dvt . Simulator Log-config Multiple .build Files Back to top",
    "section_path": [],
    "tokens": 155,
    "source": "scraped"
  },
  {
    "id": "6dd7d2e8-8a22-43e8-88b3-8a145417dcc5",
    "title": "Search for Members | DVT SystemVerilog IDE for Eclipse User Guide",
    "url": "https://eda.amiq.com/documentation/eclipse/sv/toc/quick-search-in-views/search-for-members.html",
    "content": "Search for Members | DVT SystemVerilog IDE for Eclipse User Guide Skip to content DVT SystemVerilog IDE for Eclipse User Guide Toggle navigation menu \u00e2\u008c\u0098 K DVT SystemVerilog IDE for Eclipse User Guide Search for Members In addition to Hierarchical Search , you can use a member pattern after the dot \u00e2\u0080\u0098.\u00e2\u0080\u0099 character to search for types or instances that contain specific members (for example methods, ports, events, etc). The members that match the member pattern are promoted to the top of the members pane. Search for port example No filter. Filter: .sleep Search by port name. All instances with ports that contain the search pattern are shown. Filter: sec/.sleep Search by hierarchy and port name. Hierarchical searching and port searching can be combined. Search for method example No filter. Filter: .collect Search by member name. All types with members that contain the search pattern are shown. Filter: gpio/.collect Search by hierarchy and member name. Hierarchical searching and member searching can be combined. Hierarchical Search Search Port in Design Hierarchy Back to top",
    "section_path": [],
    "tokens": 173,
    "source": "scraped"
  }
]